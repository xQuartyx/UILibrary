local function Clone<Original>(ToClone: any & Original): (Original, boolean)
	local Type = typeof(ToClone)

	if Type == "function" and (clonefunc or clonefunction) then
		return (clonefunc or clonefunction)(ToClone), true
	elseif Type == "Instance" and (cloneref or clonereference) then
		return (cloneref or clonereference)(ToClone), true
	elseif Type == "table" then
		local function deepcopy(orig, copies: { [any]: any }?)
			local Copies = copies or {}
			local orig_type, copy = typeof(orig), nil

			if orig_type == 'table' then
				if Copies[orig] then
					copy = Copies[orig]
				else	
					copy = {}

					Copies[orig] = copy

					for orig_key, orig_value in next, orig, nil do
						copy[deepcopy(orig_key, Copies)] = deepcopy(orig_value, Copies)
					end

					(setrawmetatable or setmetatable)(copy, deepcopy((getrawmetatable or getmetatable)(orig), Copies))
				end
			elseif orig_type == 'Instance' or orig_type == 'function' then
				copy = Clone(orig)
			else
				copy = orig
			end

			return copy
		end

		return deepcopy(ToClone), true
	else
		return ToClone, false
	end
end

local RunService = game:GetService("RunService")
local MarketplaceService = game:GetService("MarketplaceService")
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local GuiService = game:GetService("GuiService")
local TextService = game:GetService("TextService")
local Mouse = game:GetService("Players").LocalPlayer:GetMouse()
local Camera = game:GetService("Workspace").CurrentCamera

local Themes = {
	Names = {
		"Vynixu",
		"Dark",
		"Darker",
		"Light",
		"Quiet Light",
		"Aqua",
		"Tomorrow Night Blue",
		"Abyss",
		"Amethyst",
		"Amethyst Dark",
		"Rose",
		"Yaru",
		"United Ubuntu",
		"Elementary",
		"Yaru Dark",
		"United GNOME",
		"Arc Dark",
		"Ambiance",
		"Adapta Nokto",
		"Monokai",
		"Monokai Classic",
		"Monokai Vibrant",
		"Monokai Dimmed",
		"Typewriter",
        "Dark Typewriter",
		"Kimbie Dark",
		"Solarized Dark",
		"Solarized Light",
		"DuoTone Dark Sea",
		"DuoTone Dark Sky",
		"DuoTone Dark Space",
		"DuoTone Dark Forest",
		"DuoTone Dark Earth",
		"VSC Dark+",
		"VSC Dark Modern",
		"VSC Dark High Contrast",
		"VSC Light+",
		"VSC Light Modern",
		"VSC Light High Contrast",
		"VSC Red",
		"VS Dark",
		"VS Light",
		"GitHub Dark",
		"GitHub Dark Dimmed",
		"GitHub Dark Default",
		"GitHub Dark High Contrast",
		"GitHub Dark Colorblind",
		"GitHub Light",
		"GitHub Light Default",
		"GitHub Light High Contrast",
		"GitHub Light Colorblind",
		"Viow Arabian",
		"Viow Arabian Mix",
		"Viow Darker",
		"Viow Flat",
		"Viow Light",
		"Viow Mars",
		"Viow Neon"
	},
	["Abyss"] = {
		Accent = Color3.fromRGB(102, 136, 204), -- #6688cc

		AcrylicMain = Color3.fromRGB(0, 12, 24), -- #000c18
		AcrylicBorder = Color3.fromRGB(43, 43, 74), -- #2b2b4a
		AcrylicGradient = ColorSequence.new(Color3.fromRGB(0, 12, 24), Color3.fromRGB(0, 12, 24)),
		AcrylicNoise = 1,

		TitleBarLine = Color3.fromRGB(43, 43, 74), -- #2b2b4a
		Tab = Color3.fromRGB(128, 162, 194), -- #80a2c2

		Element = Color3.fromRGB(24, 31, 47), -- #181f2f
		ElementBorder = Color3.fromRGB(43, 43, 74), -- #2b2b4a
		InElementBorder = Color3.fromRGB(0, 99, 165), -- #0063a5
		ElementTransparency = 0,

		ToggleSlider = Color3.fromRGB(0, 99, 165), -- #0063a5
		ToggleToggled = Color3.fromRGB(24, 31, 47), -- #181f2f

		SliderRail = Color3.fromRGB(0, 99, 165), -- #0063a5

		DropdownFrame = Color3.fromRGB(24, 31, 47), -- #181f2f
		DropdownHolder = Color3.fromRGB(24, 31, 47), -- #181f2f
		DropdownBorder = Color3.fromRGB(43, 43, 74), -- #2b2b4a
		DropdownOption = Color3.fromRGB(102, 136, 204), -- #6688cc

		Keybind = Color3.fromRGB(24, 31, 47), -- #181f2f

		Input = Color3.fromRGB(24, 31, 47), -- #181f2f
		InputFocused = Color3.fromRGB(24, 31, 47), -- #181f2f
		InputIndicator = Color3.fromRGB(64, 99, 133), -- #406385

		Dialog = Color3.fromRGB(38, 38, 65), -- #262641
		DialogHolder = Color3.fromRGB(6, 6, 33), -- #060621
		DialogHolderLine = Color3.fromRGB(43, 43, 74), -- #2b2b4a
		DialogButton = Color3.fromRGB(24, 31, 47), -- #181f2f
		DialogButtonBorder = Color3.fromRGB(43, 43, 74), -- #2b2b4a
		DialogBorder = Color3.fromRGB(43, 43, 74), -- #2b2b4a
		DialogInput = Color3.fromRGB(24, 31, 47), -- #181f2f
		DialogInputLine = Color3.fromRGB(0, 99, 165), -- #0063a5

		Text = Color3.fromRGB(102, 136, 204), -- #6688cc
		SubText = Color3.fromRGB(64, 99, 133), -- #406385
		Hover = Color3.fromRGB(8, 40, 107), -- #08286b
		HoverChange = 0.1
	},
	["Adapta Nokto"] = {
		Accent = Color3.fromHex("#ec6a3f"),

		AcrylicMain = Color3.fromHex("#31312e"),
		AcrylicBorder = Color3.fromHex("#403f3a"),
		AcrylicGradient = ColorSequence.new(Color3.fromHex("#31312e"), Color3.fromHex("#31312e")),
		AcrylicNoise = 1,

		TitleBarLine = Color3.fromHex("#403f3a"),
		Tab = Color3.fromHex("#dddddd"),

		Element = Color3.fromHex("#373633"),
		ElementBorder = Color3.fromHex("#403f3a"),
		InElementBorder = Color3.fromHex("#ec6a3f"),
		ElementTransparency = 0,

		ToggleSlider = Color3.fromHex("#ec6a3f"),
		ToggleToggled = Color3.fromHex("#31312e"),

		SliderRail = Color3.fromHex("#ec6a3f"),

		DropdownFrame = Color3.fromHex("#373633"),
		DropdownHolder = Color3.fromHex("#373633"),
		DropdownBorder = Color3.fromHex("#403f3a"),
		DropdownOption = Color3.fromHex("#dddddd"),

		Keybind = Color3.fromHex("#373633"),

		Input = Color3.fromHex("#373633"),
		InputFocused = Color3.fromHex("#373633"),
		InputIndicator = Color3.fromHex("#747c84"),

		Dialog = Color3.fromHex("#3c3b37"),
		DialogHolder = Color3.fromHex("#31312e"),
		DialogHolderLine = Color3.fromHex("#403f3a"),
		DialogButton = Color3.fromHex("#373633"),
		DialogButtonBorder = Color3.fromHex("#403f3a"),
		DialogBorder = Color3.fromHex("#403f3a"),
		DialogInput = Color3.fromHex("#373633"),
		DialogInputLine = Color3.fromHex("#ec6a3f"),

		Text = Color3.fromHex("#dddddd"),
		SubText = Color3.fromHex("#747c84"),
		Hover = Color3.fromHex("#403f3a"),
		HoverChange = 0.1
	},
	["Ambiance"] = {
		Accent = Color3.fromHex("#00BCD4"),

		AcrylicMain = Color3.fromHex("#29353b"),
		AcrylicBorder = Color3.fromHex("#222D32"),
		AcrylicGradient = ColorSequence.new(Color3.fromHex("#29353b"), Color3.fromHex("#29353b")),
		AcrylicNoise = 1,

		TitleBarLine = Color3.fromHex("#222D32"),
		Tab = Color3.fromHex("#EEFFFF"),

		Element = Color3.fromHex("#243035"),
		ElementBorder = Color3.fromHex("#222D32"),
		InElementBorder = Color3.fromHex("#00BCD4"),
		ElementTransparency = 0,

		ToggleSlider = Color3.fromHex("#00BCD4"),
		ToggleToggled = Color3.fromHex("#29353b"),

		SliderRail = Color3.fromHex("#00BCD4"),

		DropdownFrame = Color3.fromHex("#243035"),
		DropdownHolder = Color3.fromHex("#243035"),
		DropdownBorder = Color3.fromHex("#222D32"),
		DropdownOption = Color3.fromHex("#EEFFFF"),

		Keybind = Color3.fromHex("#243035"),

		Input = Color3.fromHex("#243035"),
		InputFocused = Color3.fromHex("#243035"),
		InputIndicator = Color3.fromHex("#546E7A"),

		Dialog = Color3.fromHex("#222D32"),
		DialogHolder = Color3.fromHex("#29353b"),
		DialogHolderLine = Color3.fromHex("#222D32"),
		DialogButton = Color3.fromHex("#243035"),
		DialogButtonBorder = Color3.fromHex("#222D32"),
		DialogBorder = Color3.fromHex("#222D32"),
		DialogInput = Color3.fromHex("#243035"),
		DialogInputLine = Color3.fromHex("#00BCD4"),

		Text = Color3.fromHex("#EEFFFF"),
		SubText = Color3.fromHex("#546E7A"),
		Hover = Color3.fromHex("#2D3B42"),
		HoverChange = 0.1
	},
	["Amethyst Dark"] = {
		Accent = Color3.fromHex("#b133ff"),

		AcrylicMain = Color3.fromHex("#120024"),
		AcrylicBorder = Color3.fromHex("#4d057b"),
		AcrylicGradient = ColorSequence.new(Color3.fromHex("#120024"), Color3.fromHex("#120024")),
		AcrylicNoise = 0.92,

		TitleBarLine = Color3.fromHex("#4d057b"),
		Tab = Color3.fromHex("#e9d9f2"),

		Element = Color3.fromHex("#25013c"),
		ElementBorder = Color3.fromHex("#4d057b"),
		InElementBorder = Color3.fromHex("#b133ff"),
		ElementTransparency = 0.85,

		ToggleSlider = Color3.fromHex("#7d16bf"),
		ToggleToggled = Color3.fromHex("#120024"),

		SliderRail = Color3.fromHex("#7d16bf"),

		DropdownFrame = Color3.fromHex("#25013c"),
		DropdownHolder = Color3.fromHex("#25013c"),
		DropdownBorder = Color3.fromHex("#4d057b"),
		DropdownOption = Color3.fromHex("#e9d9f2"),

		Keybind = Color3.fromHex("#25013c"),

		Input = Color3.fromHex("#180030"),
		InputFocused = Color3.fromHex("#180030"),
		InputIndicator = Color3.fromHex("#9e85ad"),

		Dialog = Color3.fromHex("#25013c"),
		DialogHolder = Color3.fromHex("#120024"),
		DialogHolderLine = Color3.fromHex("#4d057b"),
		DialogButton = Color3.fromHex("#25013c"),
		DialogButtonBorder = Color3.fromHex("#4d057b"),
		DialogBorder = Color3.fromHex("#4d057b"),
		DialogInput = Color3.fromHex("#180030"),
		DialogInputLine = Color3.fromHex("#b133ff"),

		Text = Color3.fromHex("#e9d9f2"),
		SubText = Color3.fromHex("#9e85ad"),
		Hover = Color3.fromHex("#4d057b"),
		HoverChange = 0.1
	},
	["Amethyst"] = {
		Accent = Color3.fromRGB(97, 62, 167),

		AcrylicMain = Color3.fromRGB(20, 20, 20),
		AcrylicBorder = Color3.fromRGB(110, 90, 130),
		AcrylicGradient = ColorSequence.new(Color3.fromRGB(85, 57, 139), Color3.fromRGB(40, 25, 65)),
		AcrylicNoise = 0.92,

		TitleBarLine = Color3.fromRGB(95, 75, 110),
		Tab = Color3.fromRGB(160, 140, 180),

		Element = Color3.fromRGB(140, 120, 160),
		ElementBorder = Color3.fromRGB(60, 50, 70),
		InElementBorder = Color3.fromRGB(100, 90, 110),
		ElementTransparency = 0.87,

		ToggleSlider = Color3.fromRGB(140, 120, 160),
		ToggleToggled = Color3.fromRGB(0, 0, 0),

		SliderRail = Color3.fromRGB(140, 120, 160),

		DropdownFrame = Color3.fromRGB(170, 160, 200),
		DropdownHolder = Color3.fromRGB(60, 45, 80),
		DropdownBorder = Color3.fromRGB(50, 40, 65),
		DropdownOption = Color3.fromRGB(140, 120, 160),

		Keybind = Color3.fromRGB(140, 120, 160),

		Input = Color3.fromRGB(140, 120, 160),
		InputFocused = Color3.fromRGB(20, 10, 30),
		InputIndicator = Color3.fromRGB(170, 150, 190),

		Dialog = Color3.fromRGB(60, 45, 80),
		DialogHolder = Color3.fromRGB(45, 30, 65),
		DialogHolderLine = Color3.fromRGB(40, 25, 60),
		DialogButton = Color3.fromRGB(60, 45, 80),
		DialogButtonBorder = Color3.fromRGB(95, 80, 110),
		DialogBorder = Color3.fromRGB(85, 70, 100),
		DialogInput = Color3.fromRGB(70, 55, 85),
		DialogInputLine = Color3.fromRGB(175, 160, 190),

		Text = Color3.fromRGB(240, 240, 240),
		SubText = Color3.fromRGB(170, 170, 170),
		Hover = Color3.fromRGB(140, 120, 160),
		HoverChange = 0.04
	},
	["Aqua"] = {
		Accent = Color3.fromRGB(60, 165, 165),

		AcrylicMain = Color3.fromRGB(20, 20, 20),
		AcrylicBorder = Color3.fromRGB(50, 100, 100),
		AcrylicGradient = ColorSequence.new(Color3.fromRGB(60, 140, 140), Color3.fromRGB(40, 80, 80)),
		AcrylicNoise = 0.92,

		TitleBarLine = Color3.fromRGB(60, 120, 120),
		Tab = Color3.fromRGB(140, 180, 180),

		Element = Color3.fromRGB(110, 160, 160),
		ElementBorder = Color3.fromRGB(40, 70, 70),
		InElementBorder = Color3.fromRGB(80, 110, 110),
		ElementTransparency = 0.84,

		ToggleSlider = Color3.fromRGB(110, 160, 160),
		ToggleToggled = Color3.fromRGB(0, 0, 0),

		SliderRail = Color3.fromRGB(110, 160, 160),

		DropdownFrame = Color3.fromRGB(160, 200, 200),
		DropdownHolder = Color3.fromRGB(40, 80, 80),
		DropdownBorder = Color3.fromRGB(40, 65, 65),
		DropdownOption = Color3.fromRGB(110, 160, 160),

		Keybind = Color3.fromRGB(110, 160, 160),

		Input = Color3.fromRGB(110, 160, 160),
		InputFocused = Color3.fromRGB(20, 10, 30),
		InputIndicator = Color3.fromRGB(130, 170, 170),

		Dialog = Color3.fromRGB(40, 80, 80),
		DialogHolder = Color3.fromRGB(30, 60, 60),
		DialogHolderLine = Color3.fromRGB(25, 50, 50),
		DialogButton = Color3.fromRGB(40, 80, 80),
		DialogButtonBorder = Color3.fromRGB(80, 110, 110),
		DialogBorder = Color3.fromRGB(50, 100, 100),
		DialogInput = Color3.fromRGB(45, 90, 90),
		DialogInputLine = Color3.fromRGB(130, 170, 170),

		Text = Color3.fromRGB(240, 240, 240),
		SubText = Color3.fromRGB(170, 170, 170),
		Hover = Color3.fromRGB(110, 160, 160),
		HoverChange = 0.04
	},
	["Arc Dark"] = {
		Accent = Color3.fromHex("#5294e2"),

		AcrylicMain = Color3.fromHex("#383c4a"),
		AcrylicBorder = Color3.fromHex("#404f7d"),
		AcrylicGradient = ColorSequence.new(Color3.fromHex("#383c4a"), Color3.fromHex("#383c4a")),
		AcrylicNoise = 1,

		TitleBarLine = Color3.fromHex("#404f7d"),
		Tab = Color3.fromHex("#a2a2a2"),

		Element = Color3.fromHex("#4b5162"),
		ElementBorder = Color3.fromHex("#404f7d"),
		InElementBorder = Color3.fromHex("#5294e2"),
		ElementTransparency = 0,

		ToggleSlider = Color3.fromHex("#5294e2"),
		ToggleToggled = Color3.fromHex("#383c4a"),

		SliderRail = Color3.fromHex("#5294e2"),

		DropdownFrame = Color3.fromHex("#4b5162"),
		DropdownHolder = Color3.fromHex("#4b5162"),
		DropdownBorder = Color3.fromHex("#404f7d"),
		DropdownOption = Color3.fromHex("#a2a2a2"),

		Keybind = Color3.fromHex("#4b5162"),

		Input = Color3.fromHex("#4b5162"),
		InputFocused = Color3.fromHex("#4b5162"),
		InputIndicator = Color3.fromHex("#7285b7"),

		Dialog = Color3.fromHex("#434858"),
		DialogHolder = Color3.fromHex("#383c4a"),
		DialogHolderLine = Color3.fromHex("#404f7d"),
		DialogButton = Color3.fromHex("#4b5162"),
		DialogButtonBorder = Color3.fromHex("#404f7d"),
		DialogBorder = Color3.fromHex("#404f7d"),
		DialogInput = Color3.fromHex("#4b5162"),
		DialogInputLine = Color3.fromHex("#5294e2"),

		Text = Color3.fromHex("#a2a2a2"),
		SubText = Color3.fromHex("#7285b7"),
		Hover = Color3.fromHex("#4b5162"),
		HoverChange = 0.1
	},
	["Dark Typewriter"] = {
		Accent = Color3.fromRGB(109, 180, 120),

		AcrylicMain = Color3.fromRGB(38, 38, 38),
		AcrylicBorder = Color3.fromRGB(85, 85, 85),
		AcrylicGradient = ColorSequence.new(Color3.fromRGB(38, 38, 38), Color3.fromRGB(38, 38, 38)),
		AcrylicNoise = 1,

		TitleBarLine = Color3.fromRGB(189, 189, 189),
		Tab = Color3.fromRGB(109, 180, 120),

		Element = Color3.fromRGB(42, 42, 42),
		ElementBorder = Color3.fromRGB(51, 51, 51),
		InElementBorder = Color3.fromRGB(51, 51, 51),
		ElementTransparency = 0,

		ToggleSlider = Color3.fromRGB(103, 169, 113),
		ToggleToggled = Color3.fromRGB(255, 255, 255),

		SliderRail = Color3.fromRGB(51, 51, 51),

		DropdownFrame = Color3.fromRGB(68, 68, 68),
		DropdownHolder = Color3.fromRGB(68, 68, 68),
		DropdownBorder = Color3.fromRGB(38, 38, 38),
		DropdownOption = Color3.fromRGB(153, 200, 255),

		Keybind = Color3.fromRGB(54, 54, 54),

		Input = Color3.fromRGB(27, 27, 27),
		InputFocused = Color3.fromRGB(51, 51, 51),
		InputIndicator = Color3.fromRGB(197, 184, 161),

		Dialog = Color3.fromRGB(38, 38, 38),
		DialogHolder = Color3.fromRGB(58, 52, 46),
		DialogHolderLine = Color3.fromRGB(40, 40, 40),
		DialogButton = Color3.fromRGB(42, 42, 42),
		DialogButtonBorder = Color3.fromRGB(51, 51, 51),
		DialogBorder = Color3.fromRGB(189, 189, 189),
		DialogInput = Color3.fromRGB(27, 27, 27),
		DialogInputLine = Color3.fromRGB(197, 184, 161),

		Text = Color3.fromRGB(197, 184, 161),
		SubText = Color3.fromRGB(158, 158, 158),
		Hover = Color3.fromRGB(149, 149, 149),
		HoverChange = 0.04
	},
	["Dark"] = {
		Accent = Color3.fromRGB(96, 205, 255),

		AcrylicMain = Color3.fromRGB(60, 60, 60),
		AcrylicBorder = Color3.fromRGB(90, 90, 90),
		AcrylicGradient = ColorSequence.new(Color3.fromRGB(40, 40, 40), Color3.fromRGB(40, 40, 40)),
		AcrylicNoise = 0.9,

		TitleBarLine = Color3.fromRGB(75, 75, 75),
		Tab = Color3.fromRGB(120, 120, 120),

		Element = Color3.fromRGB(120, 120, 120),
		ElementBorder = Color3.fromRGB(35, 35, 35),
		InElementBorder = Color3.fromRGB(90, 90, 90),
		ElementTransparency = 0.87,

		ToggleSlider = Color3.fromRGB(120, 120, 120),
		ToggleToggled = Color3.fromRGB(0, 0, 0),

		SliderRail = Color3.fromRGB(120, 120, 120),

		DropdownFrame = Color3.fromRGB(160, 160, 160),
		DropdownHolder = Color3.fromRGB(45, 45, 45),
		DropdownBorder = Color3.fromRGB(35, 35, 35),
		DropdownOption = Color3.fromRGB(120, 120, 120),

		Keybind = Color3.fromRGB(120, 120, 120),

		Input = Color3.fromRGB(160, 160, 160),
		InputFocused = Color3.fromRGB(10, 10, 10),
		InputIndicator = Color3.fromRGB(150, 150, 150),

		Dialog = Color3.fromRGB(45, 45, 45),
		DialogHolder = Color3.fromRGB(35, 35, 35),
		DialogHolderLine = Color3.fromRGB(30, 30, 30),
		DialogButton = Color3.fromRGB(45, 45, 45),
		DialogButtonBorder = Color3.fromRGB(80, 80, 80),
		DialogBorder = Color3.fromRGB(70, 70, 70),
		DialogInput = Color3.fromRGB(55, 55, 55),
		DialogInputLine = Color3.fromRGB(160, 160, 160),

		Text = Color3.fromRGB(240, 240, 240),
		SubText = Color3.fromRGB(170, 170, 170),
		Hover = Color3.fromRGB(120, 120, 120),
		HoverChange = 0.07
	},
	["Darker"] = {
		Accent = Color3.fromRGB(72, 138, 182),

		AcrylicMain = Color3.fromRGB(30, 30, 30),
		AcrylicBorder = Color3.fromRGB(60, 60, 60),
		AcrylicGradient = ColorSequence.new(Color3.fromRGB(25, 25, 25), Color3.fromRGB(15, 15, 15)),
		AcrylicNoise = 0.94,

		TitleBarLine = Color3.fromRGB(65, 65, 65),
		Tab = Color3.fromRGB(100, 100, 100),

		Element = Color3.fromRGB(70, 70, 70),
		ElementBorder = Color3.fromRGB(25, 25, 25),
		InElementBorder = Color3.fromRGB(55, 55, 55),
		ElementTransparency = 0.82,

		DropdownFrame = Color3.fromRGB(120, 120, 120),
		DropdownHolder = Color3.fromRGB(35, 35, 35),
		DropdownBorder = Color3.fromRGB(25, 25, 25),

		Dialog = Color3.fromRGB(35, 35, 35),
		DialogHolder = Color3.fromRGB(25, 25, 25),
		DialogHolderLine = Color3.fromRGB(20, 20, 20),
		DialogButton = Color3.fromRGB(35, 35, 35),
		DialogButtonBorder = Color3.fromRGB(55, 55, 55),
		DialogBorder = Color3.fromRGB(50, 50, 50),
		DialogInput = Color3.fromRGB(45, 45, 45),
		DialogInputLine = Color3.fromRGB(120, 120, 120)
	},
	["DuoTone Dark Earth"] = {
		Accent = Color3.fromHex("#fecb52"),

		AcrylicMain = Color3.fromHex("#2c2826"),
		AcrylicBorder = Color3.fromHex("#48413d"),
		AcrylicGradient = ColorSequence.new(Color3.fromHex("#2c2826"), Color3.fromHex("#2c2826")),
		AcrylicNoise = 1,

		TitleBarLine = Color3.fromHex("#48413d"),
		Tab = Color3.fromHex("#bd987f"),

		Element = Color3.fromHex("#35302D"),
		ElementBorder = Color3.fromHex("#48413d"),
		InElementBorder = Color3.fromHex("#fecb52"),
		ElementTransparency = 0,

		ToggleSlider = Color3.fromHex("#fecb52"),
		ToggleToggled = Color3.fromHex("#2c2826"),

		SliderRail = Color3.fromHex("#fecb52"),

		DropdownFrame = Color3.fromHex("#35302D"),
		DropdownHolder = Color3.fromHex("#35302D"),
		DropdownBorder = Color3.fromHex("#48413d"),
		DropdownOption = Color3.fromHex("#bd987f"),

		Keybind = Color3.fromHex("#35302D"),

		Input = Color3.fromHex("#35302D"),
		InputFocused = Color3.fromHex("#35302D"),
		InputIndicator = Color3.fromHex("#564b43"),

		Dialog = Color3.fromHex("#35302D"),
		DialogHolder = Color3.fromHex("#2c2826"),
		DialogHolderLine = Color3.fromHex("#48413d"),
		DialogButton = Color3.fromHex("#35302D"),
		DialogButtonBorder = Color3.fromHex("#48413d"),
		DialogBorder = Color3.fromHex("#48413d"),
		DialogInput = Color3.fromHex("#35302D"),
		DialogInputLine = Color3.fromHex("#fecb52"),

		Text = Color3.fromHex("#bd987f"),
		SubText = Color3.fromHex("#564b43"),
		Hover = Color3.fromHex("#4D4642"),
		HoverChange = 0.1
	},
	["DuoTone Dark Forest"] = {
		Accent = Color3.fromHex("#e7f98b"),

		AcrylicMain = Color3.fromHex("#2a2d2a"),
		AcrylicBorder = Color3.fromHex("#424842"),
		AcrylicGradient = ColorSequence.new(Color3.fromHex("#2a2d2a"), Color3.fromHex("#2a2d2a")),
		AcrylicNoise = 1,

		TitleBarLine = Color3.fromHex("#424842"),
		Tab = Color3.fromHex("#a9bca9"),

		Element = Color3.fromHex("#313531"),
		ElementBorder = Color3.fromHex("#424842"),
		InElementBorder = Color3.fromHex("#e7f98b"),
		ElementTransparency = 0,

		ToggleSlider = Color3.fromHex("#e7f98b"),
		ToggleToggled = Color3.fromHex("#2a2d2a"),

		SliderRail = Color3.fromHex("#e7f98b"),

		DropdownFrame = Color3.fromHex("#313531"),
		DropdownHolder = Color3.fromHex("#313531"),
		DropdownBorder = Color3.fromHex("#424842"),
		DropdownOption = Color3.fromHex("#a9bca9"),

		Keybind = Color3.fromHex("#313531"),

		Input = Color3.fromHex("#313531"),
		InputFocused = Color3.fromHex("#313531"),
		InputIndicator = Color3.fromHex("#585f58"),

		Dialog = Color3.fromHex("#313531"),
		DialogHolder = Color3.fromHex("#2a2d2a"),
		DialogHolderLine = Color3.fromHex("#424842"),
		DialogButton = Color3.fromHex("#313531"),
		DialogButtonBorder = Color3.fromHex("#424842"),
		DialogBorder = Color3.fromHex("#424842"),
		DialogInput = Color3.fromHex("#313531"),
		DialogInputLine = Color3.fromHex("#e7f98b"),

		Text = Color3.fromHex("#a9bca9"),
		SubText = Color3.fromHex("#585f58"),
		Hover = Color3.fromHex("#474D47"),
		HoverChange = 0.1
	},
	["DuoTone Dark Sea"] = {
		Accent = Color3.fromHex("#34FEBB"),

		AcrylicMain = Color3.fromHex("#1D262F"),
		AcrylicBorder = Color3.fromHex("#303F4F"),
		AcrylicGradient = ColorSequence.new(Color3.fromHex("#1D262F"), Color3.fromHex("#1D262F")),
		AcrylicNoise = 1,

		TitleBarLine = Color3.fromHex("#303F4F"),
		Tab = Color3.fromHex("#88b4e7"),

		Element = Color3.fromHex("#232D38"),
		ElementBorder = Color3.fromHex("#303F4F"),
		InElementBorder = Color3.fromHex("#34FEBB"),
		ElementTransparency = 0,

		ToggleSlider = Color3.fromHex("#34FEBB"),
		ToggleToggled = Color3.fromHex("#1D262F"),

		SliderRail = Color3.fromHex("#34FEBB"),

		DropdownFrame = Color3.fromHex("#232D38"),
		DropdownHolder = Color3.fromHex("#232D38"),
		DropdownBorder = Color3.fromHex("#303F4F"),
		DropdownOption = Color3.fromHex("#88b4e7"),

		Keybind = Color3.fromHex("#232D38"),

		Input = Color3.fromHex("#232D38"),
		InputFocused = Color3.fromHex("#232D38"),
		InputIndicator = Color3.fromHex("#444c55"),

		Dialog = Color3.fromHex("#232D38"),
		DialogHolder = Color3.fromHex("#1D262F"),
		DialogHolderLine = Color3.fromHex("#303F4F"),
		DialogButton = Color3.fromHex("#232D38"),
		DialogButtonBorder = Color3.fromHex("#303F4F"),
		DialogBorder = Color3.fromHex("#303F4F"),
		DialogInput = Color3.fromHex("#232D38"),
		DialogInputLine = Color3.fromHex("#34FEBB"),

		Text = Color3.fromHex("#88b4e7"),
		SubText = Color3.fromHex("#444c55"),
		Hover = Color3.fromHex("#354454"),
		HoverChange = 0.1
	},
	["DuoTone Dark Sky"] = {
		Accent = Color3.fromHex("#fec38f"),

		AcrylicMain = Color3.fromHex("#2c2734"),
		AcrylicBorder = Color3.fromHex("#443d51"),
		AcrylicGradient = ColorSequence.new(Color3.fromHex("#2c2734"), Color3.fromHex("#2c2734")),
		AcrylicNoise = 1,

		TitleBarLine = Color3.fromHex("#443d51"),
		Tab = Color3.fromHex("#cab2fa"),

		Element = Color3.fromHex("#342E3D"),
		ElementBorder = Color3.fromHex("#443d51"),
		InElementBorder = Color3.fromHex("#fec38f"),
		ElementTransparency = 0,

		ToggleSlider = Color3.fromHex("#fec38f"),
		ToggleToggled = Color3.fromHex("#2c2734"),

		SliderRail = Color3.fromHex("#fec38f"),

		DropdownFrame = Color3.fromHex("#342E3D"),
		DropdownHolder = Color3.fromHex("#342E3D"),
		DropdownBorder = Color3.fromHex("#443d51"),
		DropdownOption = Color3.fromHex("#cab2fa"),

		Keybind = Color3.fromHex("#342E3D"),

		Input = Color3.fromHex("#342E3D"),
		InputFocused = Color3.fromHex("#342E3D"),
		InputIndicator = Color3.fromHex("#544d60"),

		Dialog = Color3.fromHex("#342E3D"),
		DialogHolder = Color3.fromHex("#2c2734"),
		DialogHolderLine = Color3.fromHex("#443d51"),
		DialogButton = Color3.fromHex("#342E3D"),
		DialogButtonBorder = Color3.fromHex("#443d51"),
		DialogBorder = Color3.fromHex("#443d51"),
		DialogInput = Color3.fromHex("#342E3D"),
		DialogInputLine = Color3.fromHex("#fec38f"),

		Text = Color3.fromHex("#cab2fa"),
		SubText = Color3.fromHex("#544d60"),
		Hover = Color3.fromHex("#494256"),
		HoverChange = 0.1
	},
	["DuoTone Dark Space"] = {
		Accent = Color3.fromHex("#fe7734"),

		AcrylicMain = Color3.fromHex("#24242e"),
		AcrylicBorder = Color3.fromHex("#3a3a4a"),
		AcrylicGradient = ColorSequence.new(Color3.fromHex("#24242e"), Color3.fromHex("#24242e")),
		AcrylicNoise = 1,

		TitleBarLine = Color3.fromHex("#3a3a4a"),
		Tab = Color3.fromHex("#8686cb"),

		Element = Color3.fromHex("#2B2B36"),
		ElementBorder = Color3.fromHex("#3a3a4a"),
		InElementBorder = Color3.fromHex("#fe7734"),
		ElementTransparency = 0,

		ToggleSlider = Color3.fromHex("#fe7734"),
		ToggleToggled = Color3.fromHex("#24242e"),

		SliderRail = Color3.fromHex("#fe7734"),

		DropdownFrame = Color3.fromHex("#2B2B36"),
		DropdownHolder = Color3.fromHex("#2B2B36"),
		DropdownBorder = Color3.fromHex("#3a3a4a"),
		DropdownOption = Color3.fromHex("#8686cb"),

		Keybind = Color3.fromHex("#2B2B36"),

		Input = Color3.fromHex("#2B2B36"),
		InputFocused = Color3.fromHex("#2B2B36"),
		InputIndicator = Color3.fromHex("#49495a"),

		Dialog = Color3.fromHex("#2B2B36"),
		DialogHolder = Color3.fromHex("#24242e"),
		DialogHolderLine = Color3.fromHex("#3a3a4a"),
		DialogButton = Color3.fromHex("#2B2B36"),
		DialogButtonBorder = Color3.fromHex("#3a3a4a"),
		DialogBorder = Color3.fromHex("#3a3a4a"),
		DialogInput = Color3.fromHex("#2B2B36"),
		DialogInputLine = Color3.fromHex("#fe7734"),

		Text = Color3.fromHex("#8686cb"),
		SubText = Color3.fromHex("#49495a"),
		Hover = Color3.fromHex("#3F3F4F"),
		HoverChange = 0.1
	},
	["Elementary"] = {
		Accent = Color3.fromHex("#cb5226"),

		AcrylicMain = Color3.fromHex("#eff0f1"),
		AcrylicBorder = Color3.fromHex("#e9d18d"),
		AcrylicGradient = ColorSequence.new(Color3.fromHex("#eff0f1"), Color3.fromHex("#eff0f1")),
		AcrylicNoise = 1,

		TitleBarLine = Color3.fromHex("#e9d18d"),
		Tab = Color3.fromHex("#5e5e5e"),

		Element = Color3.fromHex("#fdf6e3"),
		ElementBorder = Color3.fromHex("#e9d18d"),
		InElementBorder = Color3.fromHex("#cb5226"),
		ElementTransparency = 0,

		ToggleSlider = Color3.fromHex("#cb5226"),
		ToggleToggled = Color3.fromHex("#fdf6e3"),

		SliderRail = Color3.fromHex("#cb5226"),

		DropdownFrame = Color3.fromHex("#fbefce"),
		DropdownHolder = Color3.fromHex("#fbefce"),
		DropdownBorder = Color3.fromHex("#e9d18d"),
		DropdownOption = Color3.fromHex("#5e5e5e"),

		Keybind = Color3.fromHex("#fdf6e3"),

		Input = Color3.fromHex("#fdf6e3"),
		InputFocused = Color3.fromHex("#fdf6e3"),
		InputIndicator = Color3.fromHex("#93a1a1"),

		Dialog = Color3.fromHex("#fbefce"),
		DialogHolder = Color3.fromHex("#fbefce"),
		DialogHolderLine = Color3.fromHex("#e9d18d"),
		DialogButton = Color3.fromHex("#fbefce"),
		DialogButtonBorder = Color3.fromHex("#e9d18d"),
		DialogBorder = Color3.fromHex("#e9d18d"),
		DialogInput = Color3.fromHex("#fdf6e3"),
		DialogInputLine = Color3.fromHex("#cb5226"),

		Text = Color3.fromHex("#5e5e5e"),
		SubText = Color3.fromHex("#93a1a1"),
		Hover = Color3.fromHex("#d6d6d6"),
		HoverChange = 0.1
	},
	["GitHub Dark Colorblind"] = {
		Accent = Color3.fromHex("#1f6feb"), -- focusBorder

		AcrylicMain = Color3.fromHex("#010409"), -- sideBar.background
		AcrylicBorder = Color3.fromHex("#30363d"), -- titleBar.border
		AcrylicGradient = ColorSequence.new(Color3.fromHex("#010409"), Color3.fromHex("#010409")), -- sideBar.background
		AcrylicNoise = 1,

		TitleBarLine = Color3.fromHex("#30363d"), -- titleBar.border
		Tab = Color3.fromHex("#c9d1d9"), -- tab.activeForeground

		Element = Color3.fromHex("#161b22"), -- dropdown.background
		ElementBorder = Color3.fromHex("#30363d"), -- dropdown.border
		InElementBorder = Color3.fromHex("#1f6feb"),  -- focusBorder
		ElementTransparency = 0,

		ToggleSlider = Color3.fromHex("#1f6feb"),  -- focusBorder
		ToggleToggled = Color3.fromHex("#0d1117"), -- input.background

		SliderRail = Color3.fromHex("#1f6feb"),  -- focusBorder

		DropdownFrame = Color3.fromHex("#161b22"),  -- dropdown.background
		DropdownHolder = Color3.fromHex("#161b22"),  -- dropdown.background
		DropdownBorder = Color3.fromHex("#30363d"),  -- dropdown.border
		DropdownOption = Color3.fromHex("#c9d1d9"), -- dropdown.foreground

		Keybind = Color3.fromHex("#0d1117"),  -- input.background

		Input = Color3.fromHex("#0d1117"),  -- input.background
		InputFocused = Color3.fromHex("#0d1117"),  -- input.background
		InputIndicator = Color3.fromHex("#6e7681"),  -- input.placeholderForeground

		Dialog = Color3.fromHex("#161b22"), -- notifications.background
		DialogHolder = Color3.fromHex("#161b22"), -- notifications.background
		DialogHolderLine = Color3.fromHex("#30363d"), -- notifications.border
		DialogButton = Color3.fromHex("#0d1117"), -- input.background (following your established pattern)
		DialogButtonBorder = Color3.fromHex("#30363d"), -- dropdown.border (following your established pattern)
		DialogBorder = Color3.fromHex("#30363d"), -- notifications.border
		DialogInput = Color3.fromHex("#0d1117"), -- input.background
		DialogInputLine = Color3.fromHex("#1f6feb"),  -- focusBorder

		Text = Color3.fromHex("#c9d1d9"), -- foreground
		SubText = Color3.fromHex("#8b949e"), -- descriptionForeground
		Hover = Color3.fromHex("#6e7681"),  -- list.hoverBackground (subtle transparent hover) or #22272D for solid
		HoverChange = 0.1
	},
	["GitHub Dark Default"] = {
		Accent = Color3.fromHex("#1f6feb"),  -- focusBorder

		AcrylicMain = Color3.fromHex("#010409"), -- sideBar.background
		AcrylicBorder = Color3.fromHex("#30363d"), -- titleBar.border
		AcrylicGradient = ColorSequence.new(Color3.fromHex("#010409"), Color3.fromHex("#010409")), -- sideBar.background
		AcrylicNoise = 1,

		TitleBarLine = Color3.fromHex("#30363d"), -- titleBar.border
		Tab = Color3.fromHex("#e6edf3"), -- tab.activeForeground

		Element = Color3.fromHex("#161b22"), -- dropdown.background  (using a darker shade for more contrast)
		ElementBorder = Color3.fromHex("#30363d"), -- dropdown.border
		InElementBorder = Color3.fromHex("#1f6feb"), -- focusBorder
		ElementTransparency = 0,

		ToggleSlider = Color3.fromHex("#1f6feb"), -- focusBorder
		ToggleToggled = Color3.fromHex("#0d1117"), -- input.background

		SliderRail = Color3.fromHex("#1f6feb"), -- focusBorder

		DropdownFrame = Color3.fromHex("#161b22"), -- dropdown.background
		DropdownHolder = Color3.fromHex("#161b22"), -- dropdown.background
		DropdownBorder = Color3.fromHex("#30363d"), -- dropdown.border
		DropdownOption = Color3.fromHex("#e6edf3"),  -- dropdown.foreground

		Keybind = Color3.fromHex("#0d1117"), -- input.background

		Input = Color3.fromHex("#0d1117"),  -- input.background
		InputFocused = Color3.fromHex("#0d1117"),  -- input.background
		InputIndicator = Color3.fromHex("#6e7681"),-- input.placeholderForeground

		Dialog = Color3.fromHex("#161b22"), -- notifications.background
		DialogHolder = Color3.fromHex("#161b22"), -- notifications.background
		DialogHolderLine = Color3.fromHex("#30363d"), -- notifications.border
		DialogButton = Color3.fromHex("#0d1117"), -- input.background (as requested)
		DialogButtonBorder = Color3.fromHex("#30363d"),  -- dropdown.border (as requested)
		DialogBorder = Color3.fromHex("#30363d"),  -- notifications.border
		DialogInput = Color3.fromHex("#0d1117"), -- input.background
		DialogInputLine = Color3.fromHex("#1f6feb"), -- focusBorder

		Text = Color3.fromHex("#e6edf3"), -- foreground
		SubText = Color3.fromHex("#7d8590"),-- descriptionForeground
		Hover = Color3.fromHex("#6e7681"),  -- list.hoverBackground (keeping alpha for subtle hover effect) or #22272D
		HoverChange = 0.1
	},
	["GitHub Dark Dimmed"] = {
		Accent = Color3.fromHex("#316dca"), -- focusBorder

		AcrylicMain = Color3.fromHex("#1c2128"), -- sideBar.background
		AcrylicBorder = Color3.fromHex("#444c56"), -- titleBar.border
		AcrylicGradient = ColorSequence.new(Color3.fromHex("#1c2128"), Color3.fromHex("#1c2128")), -- sideBar.background
		AcrylicNoise = 1,

		TitleBarLine = Color3.fromHex("#444c56"), -- titleBar.border
		Tab = Color3.fromHex("#adbac7"),  -- tab.activeForeground

		Element = Color3.fromHex("#2d333b"), -- dropdown.background
		ElementBorder = Color3.fromHex("#444c56"),  -- dropdown.border
		InElementBorder = Color3.fromHex("#316dca"), -- focusBorder
		ElementTransparency = 0,

		ToggleSlider = Color3.fromHex("#316dca"),  -- focusBorder
		ToggleToggled = Color3.fromHex("#22272e"), -- input.background

		SliderRail = Color3.fromHex("#316dca"),  -- focusBorder

		DropdownFrame = Color3.fromHex("#2d333b"),  -- dropdown.background
		DropdownHolder = Color3.fromHex("#2d333b"), -- dropdown.background
		DropdownBorder = Color3.fromHex("#444c56"),  -- dropdown.border
		DropdownOption = Color3.fromHex("#adbac7"),  -- dropdown.foreground

		Keybind = Color3.fromHex("#22272e"), -- input.background

		Input = Color3.fromHex("#22272e"),  -- input.background
		InputFocused = Color3.fromHex("#22272e"),  -- input.background
		InputIndicator = Color3.fromHex("#636e7b"),  -- input.placeholderForeground

		Dialog = Color3.fromHex("#2d333b"), -- notifications.background
		DialogHolder = Color3.fromHex("#2d333b"), -- notifications.background
		DialogHolderLine = Color3.fromHex("#444c56"), -- notifications.border
		DialogButton = Color3.fromHex("#22272e"),  -- input.background (following your previous instruction)
		DialogButtonBorder = Color3.fromHex("#444c56"), -- dropdown.border (following your previous instruction)
		DialogBorder = Color3.fromHex("#444c56"), -- notifications.border
		DialogInput = Color3.fromHex("#22272e"), -- input.background
		DialogInputLine = Color3.fromHex("#316dca"), -- focusBorder

		Text = Color3.fromHex("#adbac7"),  -- foreground
		SubText = Color3.fromHex("#768390"),  -- descriptionForeground
		Hover = Color3.fromHex("#636e7b"),  -- list.hoverBackground (subtle transparent hover) or #333A42
		HoverChange = 0.1
	},
	["GitHub Dark High Contrast"] = {
		Accent = Color3.fromHex("#409eff"), -- focusBorder

		AcrylicMain = Color3.fromHex("#010409"), -- sideBar.background
		AcrylicBorder = Color3.fromHex("#7a828e"),  -- titleBar.border
		AcrylicGradient = ColorSequence.new(Color3.fromHex("#010409"), Color3.fromHex("#010409")), -- sideBar.background
		AcrylicNoise = 1,


		TitleBarLine = Color3.fromHex("#7a828e"),  -- titleBar.border
		Tab = Color3.fromHex("#f0f3f6"), -- tab.activeForeground

		Element = Color3.fromHex("#272b33"), -- dropdown.background
		ElementBorder = Color3.fromHex("#7a828e"), -- dropdown.border
		InElementBorder = Color3.fromHex("#409eff"), -- focusBorder
		ElementTransparency = 0,


		ToggleSlider = Color3.fromHex("#409eff"),  -- focusBorder
		ToggleToggled = Color3.fromHex("#0a0c10"),  -- input.background

		SliderRail = Color3.fromHex("#409eff"), -- focusBorder

		DropdownFrame = Color3.fromHex("#272b33"), -- dropdown.background
		DropdownHolder = Color3.fromHex("#272b33"), -- dropdown.background
		DropdownBorder = Color3.fromHex("#7a828e"),  -- dropdown.border
		DropdownOption = Color3.fromHex("#f0f3f6"),  -- dropdown.foreground

		Keybind = Color3.fromHex("#0a0c10"), -- input.background

		Input = Color3.fromHex("#0a0c10"), -- input.background
		InputFocused = Color3.fromHex("#0a0c10"), -- input.background
		InputIndicator = Color3.fromHex("#9ea7b3"), -- input.placeholderForeground

		Dialog = Color3.fromHex("#272b33"),  -- notifications.background
		DialogHolder = Color3.fromHex("#272b33"),  -- notifications.background
		DialogHolderLine = Color3.fromHex("#7a828e"), -- notifications.border
		DialogButton = Color3.fromHex("#0a0c10"), -- input.background (as previously requested)
		DialogButtonBorder = Color3.fromHex("#7a828e"), -- dropdown.border (as previously requested)
		DialogBorder = Color3.fromHex("#7a828e"), -- notifications.border
		DialogInput = Color3.fromHex("#0a0c10"), -- input.background
		DialogInputLine = Color3.fromHex("#409eff"), -- focusBorder

		Text = Color3.fromHex("#f0f3f6"),  -- foreground
		SubText = Color3.fromHex("#f0f3f6"), -- descriptionForeground (same as main text for high contrast)
		Hover = Color3.fromHex("#9ea7b3"), -- list.hoverBackground (subtle transparent hover) or #333A42 for solid
		HoverChange = 0.1
	},
	["GitHub Dark"] = {
		Accent = Color3.fromHex("#005cc5"), -- focusBorder

		AcrylicMain = Color3.fromHex("#1f2428"), -- sideBar.background
		AcrylicBorder = Color3.fromHex("#1b1f23"),  -- titleBar.border
		AcrylicGradient = ColorSequence.new(Color3.fromHex("#1f2428"), Color3.fromHex("#1f2428")),-- sideBar.background
		AcrylicNoise = 1,

		TitleBarLine = Color3.fromHex("#1b1f23"), -- titleBar.border
		Tab = Color3.fromHex("#e1e4e8"), -- titleBar.activeForeground

		Element = Color3.fromHex("#2f363d"),  -- input.background
		ElementBorder = Color3.fromHex("#1b1f23"), -- input.border
		InElementBorder = Color3.fromHex("#005cc5"), -- focusBorder
		ElementTransparency = 0,

		ToggleSlider = Color3.fromHex("#005cc5"), -- focusBorder
		ToggleToggled = Color3.fromHex("#2f363d"), -- input.background

		SliderRail = Color3.fromHex("#005cc5"),  -- focusBorder

		DropdownFrame = Color3.fromHex("#2f363d"), -- dropdown.background
		DropdownHolder = Color3.fromHex("#2f363d"), -- dropdown.background
		DropdownBorder = Color3.fromHex("#1b1f23"),  -- dropdown.border
		DropdownOption = Color3.fromHex("#e1e4e8"),  -- dropdown.foreground

		Keybind = Color3.fromHex("#2f363d"),  -- input.background

		Input = Color3.fromHex("#2f363d"),  -- input.background
		InputFocused = Color3.fromHex("#2f363d"),  -- input.background
		InputIndicator = Color3.fromHex("#959da5"),-- input.placeholderForeground

		Dialog = Color3.fromHex("#2f363d"),  -- notifications.background
		DialogHolder = Color3.fromHex("#2f363d"), -- notifications.background
		DialogHolderLine = Color3.fromHex("#444d56"), --  textBlockQuote.border
		DialogButton = Color3.fromHex("#2f363d"), --  Your preferred button background
		DialogButtonBorder = Color3.fromHex("#1b1f23"),-- Your preferred button border
		DialogBorder = Color3.fromHex("#1b1f23"), -- notifications.border
		DialogInput = Color3.fromHex("#2f363d"), -- notifications.background
		DialogInputLine = Color3.fromHex("#005cc5"), -- focusBorder

		Text = Color3.fromHex("#d1d5da"), -- foreground
		SubText = Color3.fromHex("#959da5"), -- descriptionForeground
		Hover = Color3.fromHex("#282e34"), -- list.hoverBackground
		HoverChange = 0.1
	},
	["GitHub Light Colorblind"] = {
		Accent = Color3.fromHex("#0969da"), -- focusBorder

		AcrylicMain = Color3.fromHex("#f6f8fa"), -- textBlockQuote.background
		AcrylicBorder = Color3.fromHex("#d0d7de"), -- textBlockQuote.border
		AcrylicGradient = ColorSequence.new(Color3.fromHex("#f6f8fa"), Color3.fromHex("#f6f8fa")), -- textBlockQuote.background
		AcrylicNoise = 1,

		TitleBarLine = Color3.fromHex("#d0d7de"), -- titleBar.border
		Tab = Color3.fromHex("#24292f"), -- foreground

		Element = Color3.fromHex("#ffffff"),  -- input.background
		ElementBorder = Color3.fromHex("#d0d7de"), -- input.border
		InElementBorder = Color3.fromHex("#0969da"), -- focusBorder
		ElementTransparency = 0,

		ToggleSlider = Color3.fromHex("#0969da"), -- focusBorder
		ToggleToggled = Color3.fromHex("#ffffff"), -- input.background

		SliderRail = Color3.fromHex("#0969da"), -- focusBorder

		DropdownFrame = Color3.fromHex("#ffffff"), -- dropdown.background
		DropdownHolder = Color3.fromHex("#ffffff"), -- dropdown.background
		DropdownBorder = Color3.fromHex("#d0d7de"), -- dropdown.border
		DropdownOption = Color3.fromHex("#24292f"), -- foreground

		Keybind = Color3.fromHex("#ffffff"), -- input.background

		Input = Color3.fromHex("#ffffff"), -- input.background
		InputFocused = Color3.fromHex("#ffffff"), -- input.background
		InputIndicator = Color3.fromHex("#6e7781"), -- input.placeholderForeground

		Dialog = Color3.fromHex("#ffffff"), -- notifications.background
		DialogHolder = Color3.fromHex("#ffffff"), -- notifications.background
		DialogHolderLine = Color3.fromHex("#d0d7de"),  -- notifications.border
		DialogButton = Color3.fromHex("#ffffff"), -- Your preferred button background
		DialogButtonBorder = Color3.fromHex("#20252c"), -- Your preferred button border
		DialogBorder = Color3.fromHex("#d0d7de"), -- notifications.border
		DialogInput = Color3.fromHex("#ffffff"),  -- notifications.background
		DialogInputLine = Color3.fromHex("#0969da"), -- focusBorder

		Text = Color3.fromHex("#24292f"),  -- foreground
		SubText = Color3.fromHex("#57606a"), -- descriptionForeground
		Hover = Color3.fromHex("#eaeef2"),  -- list.hoverBackground (alpha removed)
		HoverChange = 0.1
	},
	["GitHub Light Default"] = {
		Accent = Color3.fromHex("#0969da"), -- focusBorder

		AcrylicMain = Color3.fromHex("#f6f8fa"), -- sideBar.background
		AcrylicBorder = Color3.fromHex("#d0d7de"), -- titleBar.border
		AcrylicGradient = ColorSequence.new(Color3.fromHex("#f6f8fa"), Color3.fromHex("#f6f8fa")), -- sideBar.background
		AcrylicNoise = 1,

		TitleBarLine = Color3.fromHex("#d0d7de"), -- titleBar.border
		Tab = Color3.fromHex("#1f2328"), -- tab.activeForeground

		Element = Color3.fromHex("#ffffff"), -- input.background
		ElementBorder = Color3.fromHex("#d0d7de"), -- input.border
		InElementBorder = Color3.fromHex("#0969da"), -- focusBorder
		ElementTransparency = 0,

		ToggleSlider = Color3.fromHex("#0969da"), -- focusBorder
		ToggleToggled = Color3.fromHex("#ffffff"),  -- input.background

		SliderRail = Color3.fromHex("#0969da"),  -- focusBorder

		DropdownFrame = Color3.fromHex("#ffffff"), -- dropdown.background
		DropdownHolder = Color3.fromHex("#ffffff"), -- dropdown.background
		DropdownBorder = Color3.fromHex("#d0d7de"), -- dropdown.border
		DropdownOption = Color3.fromHex("#1f2328"), -- dropdown.foreground

		Keybind = Color3.fromHex("#ffffff"), -- input.background

		Input = Color3.fromHex("#ffffff"), -- input.background
		InputFocused = Color3.fromHex("#ffffff"), -- input.background
		InputIndicator = Color3.fromHex("#6e7781"), -- input.placeholderForeground

		Dialog = Color3.fromHex("#ffffff"),  -- notifications.background
		DialogHolder = Color3.fromHex("#ffffff"), -- notifications.background
		DialogHolderLine = Color3.fromHex("#d0d7de"), -- notifications.border
		DialogButton = Color3.fromHex("#ffffff"),  -- Your preferred button background
		DialogButtonBorder = Color3.fromHex("#20252c"),  -- Your preferred button border
		DialogBorder = Color3.fromHex("#d0d7de"),  -- notifications.border
		DialogInput = Color3.fromHex("#ffffff"), -- notifications.background
		DialogInputLine = Color3.fromHex("#0969da"),-- focusborder


		Text = Color3.fromHex("#1f2328"), -- editor.foreground
		SubText = Color3.fromHex("#656d76"), -- descriptionForeground
		Hover = Color3.fromHex("#eaeef2"), -- list.hoverBackground
		HoverChange = 0.1  -- A subtle hover effect
	},
	["GitHub Light High Contrast"] = {
		Accent = Color3.fromHex("#0349b4"), -- focusBorder

		AcrylicMain = Color3.fromHex("#ffffff"), -- sideBar.background
		AcrylicBorder = Color3.fromHex("#20252c"), -- titleBar.border
		AcrylicGradient = ColorSequence.new(Color3.fromHex("#ffffff"), Color3.fromHex("#ffffff")), -- sideBar.background
		AcrylicNoise = 1,

		TitleBarLine = Color3.fromHex("#20252c"), -- titleBar.border
		Tab = Color3.fromHex("#0e1116"), -- tab.activeForeground

		Element = Color3.fromHex("#ffffff"), -- input.background
		ElementBorder = Color3.fromHex("#20252c"),  -- input.border
		InElementBorder = Color3.fromHex("#0349b4"), -- focusBorder
		ElementTransparency = 0,

		ToggleSlider = Color3.fromHex("#0349b4"), -- focusBorder
		ToggleToggled = Color3.fromHex("#ffffff"), -- input.background

		SliderRail = Color3.fromHex("#0349b4"), -- focusBorder

		DropdownFrame = Color3.fromHex("#ffffff"), -- dropdown.background
		DropdownHolder = Color3.fromHex("#ffffff"), -- dropdown.background
		DropdownBorder = Color3.fromHex("#20252c"), -- dropdown.border
		DropdownOption = Color3.fromHex("#0e1116"),  -- dropdown.foreground

		Keybind = Color3.fromHex("#ffffff"), -- input.background

		Input = Color3.fromHex("#ffffff"), -- input.background
		InputFocused = Color3.fromHex("#ffffff"),  -- input.background
		InputIndicator = Color3.fromHex("#66707b"), -- input.placeholderForeground

		Dialog = Color3.fromHex("#ffffff"), -- Using a light background for dialog
		DialogHolder = Color3.fromHex("#ffffff"), -- Using a light background for dialog holder
		DialogHolderLine = Color3.fromHex("#20252c"), -- Using a subtle line color
		DialogButton = Color3.fromHex("#ffffff"), -- input.background
		DialogButtonBorder = Color3.fromHex("#20252c"), -- dropdown.border
		DialogBorder = Color3.fromHex("#20252c"), -- dropdown.border
		DialogInput = Color3.fromHex("#ffffff"), -- input.background
		DialogInputLine = Color3.fromHex("#0349b4"),-- focusBorder

		Text = Color3.fromHex("#0e1116"), -- editor.foreground
		SubText = Color3.fromHex("#66707b"), -- descriptionForeground (or a slightly lighter shade)
		Hover = Color3.fromHex("#e7ecf0"), -- list.hoverBackground
		HoverChange = 0.1 -- Slightly more pronounced hover effect
	},
	["GitHub Light"] = {
		Accent = Color3.fromHex("2188ff"), -- focusBorder

		AcrylicMain = Color3.fromHex("f6f8fa"), -- sideBar.background
		AcrylicBorder = Color3.fromHex("e1e4e8"), -- titleBar.border
		AcrylicGradient = ColorSequence.new(Color3.fromHex("f6f8fa"), Color3.fromHex("f6f8fa")), -- sideBar.background
		AcrylicNoise = 1,

		TitleBarLine = Color3.fromHex("e1e4e8"), -- titleBar.border
		Tab = Color3.fromHex("2f363d"), -- tab.activeForeground

		Element = Color3.fromHex("fafbfc"), -- input.background
		ElementBorder = Color3.fromHex("e1e4e8"), -- input.border
		InElementBorder = Color3.fromHex("2188ff"), -- focusBorder
		ElementTransparency = 0,

		ToggleSlider = Color3.fromHex("2188ff"), -- focusBorder
		ToggleToggled = Color3.fromHex("fafbfc"), -- input.background

		SliderRail = Color3.fromHex("2188ff"), -- focusBorder

		DropdownFrame = Color3.fromHex("fafbfc"), -- dropdown.background
		DropdownHolder = Color3.fromHex("fafbfc"), -- dropdown.background
		DropdownBorder = Color3.fromHex("e1e4e8"), -- dropdown.border
		DropdownOption = Color3.fromHex("2f363d"), -- dropdown.foreground

		Keybind = Color3.fromHex("fafbfc"), -- input.background

		Input = Color3.fromHex("fafbfc"), -- input.background
		InputFocused = Color3.fromHex("fafbfc"), -- input.background
		InputIndicator = Color3.fromHex("959da5"),  -- input.placeholderForeground

		Dialog = Color3.fromHex("fafbfc"), --  Using a light background for dialog
		DialogHolder = Color3.fromHex("fafbfc"), -- Using a light background for dialog holder
		DialogHolderLine = Color3.fromHex("e1e4e8"), --  Using a subtle line color
		DialogButton = Color3.fromHex("#fafbfc"),  -- Your preferred button background
		DialogButtonBorder = Color3.fromHex("#20252c"),  -- Your preferred button border
		DialogBorder = Color3.fromHex("e1e4e8"), -- dropdown.border
		DialogInput = Color3.fromHex("fafbfc"),  -- input.background
		DialogInputLine = Color3.fromHex("2188ff"), -- focusBorder

		Text = Color3.fromHex("24292e"), -- editor.foreground
		SubText = Color3.fromHex("6a737d"), -- descriptionForeground
		Hover = Color3.fromHex("ebf0f4"), -- list.hoverBackground
		HoverChange = 0.1 -- Slightly more pronounced hover effect
	},
	["Kimbie Dark"] = {
		Accent = Color3.fromHex("#a57a4c"), -- focusBorder

		AcrylicMain = Color3.fromHex("#221a0f"), -- editor.background
		AcrylicBorder = Color3.fromHex("#5e452b"), -- editor.lineHighlightBackground
		AcrylicGradient = ColorSequence.new(Color3.fromHex("#221a0f"), Color3.fromHex("#221a0f")),
		AcrylicNoise = 1,

		TitleBarLine = Color3.fromHex("#51412c"), -- input.background
		Tab = Color3.fromHex("#d3af86"), -- editor.foreground

		Element = Color3.fromHex("#51412c"), -- input.background
		ElementBorder = Color3.fromHex("#5e452b"), -- peekView.border
		InElementBorder = Color3.fromHex("#a57a4c"), -- focusBorder
		ElementTransparency = 0,

		ToggleSlider = Color3.fromHex("#a57a4c"), -- focusBorder
		ToggleToggled = Color3.fromHex("#51412c"), -- input.background

		SliderRail = Color3.fromHex("#a57a4c"), -- focusBorder

		DropdownFrame = Color3.fromHex("#51412c"), -- dropdown.background
		DropdownHolder = Color3.fromHex("#51412c"), -- dropdown.background
		DropdownBorder = Color3.fromHex("#5e452b"), -- peekView.border
		DropdownOption = Color3.fromHex("#d3af86"), -- editor.foreground

		Keybind = Color3.fromHex("#51412c"), -- input.background

		Input = Color3.fromHex("#51412c"), -- input.background
		InputFocused = Color3.fromHex("#51412c"), -- input.background
		InputIndicator = Color3.fromHex("#a57a4c"), -- editorWhitespace.foreground

		Dialog = Color3.fromHex("#362712"), -- menu.background
		DialogHolder = Color3.fromHex("#221a14"), -- peekViewEditor.background
		DialogHolderLine = Color3.fromHex("#5e452b"), -- peekView.border
		DialogButton = Color3.fromHex("#6e583b"), -- button.background
		DialogButtonBorder = Color3.fromHex("#5e452b"), -- peekView.border
		DialogBorder = Color3.fromHex("#5e452b"), -- peekView.border
		DialogInput = Color3.fromHex("#51412c"), -- input.background
		DialogInputLine = Color3.fromHex("#a57a4c"), -- focusBorder

		Text = Color3.fromHex("#d3af86"), -- editor.foreground
		SubText = Color3.fromHex("#a57a4c"), -- comments color
		Hover = Color3.fromHex("#7c5021"), -- list.activeSelectionBackground
		HoverChange = 0.1
	},
	["Light"] = {
		Accent = Color3.fromRGB(0, 103, 192),

		AcrylicMain = Color3.fromRGB(200, 200, 200),
		AcrylicBorder = Color3.fromRGB(120, 120, 120),
		AcrylicGradient = ColorSequence.new(Color3.fromRGB(255, 255, 255), Color3.fromRGB(255, 255, 255)),
		AcrylicNoise = 0.96,

		TitleBarLine = Color3.fromRGB(160, 160, 160),
		Tab = Color3.fromRGB(90, 90, 90),

		Element = Color3.fromRGB(255, 255, 255),
		ElementBorder = Color3.fromRGB(180, 180, 180),
		InElementBorder = Color3.fromRGB(150, 150, 150),
		ElementTransparency = 0.65,

		ToggleSlider = Color3.fromRGB(40, 40, 40),
		ToggleToggled = Color3.fromRGB(255, 255, 255),

		SliderRail = Color3.fromRGB(40, 40, 40),

		DropdownFrame = Color3.fromRGB(200, 200, 200),
		DropdownHolder = Color3.fromRGB(240, 240, 240),
		DropdownBorder = Color3.fromRGB(200, 200, 200),
		DropdownOption = Color3.fromRGB(150, 150, 150),

		Keybind = Color3.fromRGB(120, 120, 120),

		Input = Color3.fromRGB(200, 200, 200),
		InputFocused = Color3.fromRGB(100, 100, 100),
		InputIndicator = Color3.fromRGB(80, 80, 80),

		Dialog = Color3.fromRGB(255, 255, 255),
		DialogHolder = Color3.fromRGB(240, 240, 240),
		DialogHolderLine = Color3.fromRGB(228, 228, 228),
		DialogButton = Color3.fromRGB(255, 255, 255),
		DialogButtonBorder = Color3.fromRGB(190, 190, 190),
		DialogBorder = Color3.fromRGB(140, 140, 140),
		DialogInput = Color3.fromRGB(250, 250, 250),
		DialogInputLine = Color3.fromRGB(160, 160, 160),

		Text = Color3.fromRGB(41, 41, 41),
		SubText = Color3.fromRGB(40, 40, 40),
		Hover = Color3.fromRGB(50, 50, 50),
		HoverChange = 0.16
	},
	["Monokai Classic"] = {
		Accent = Color3.fromHex("#75715E"), -- focusBorder

		AcrylicMain = Color3.fromHex("#272822"), -- editor.background
		AcrylicBorder = Color3.fromHex("#1e1f1c"), -- titleBar.activeBackground
		AcrylicGradient = ColorSequence.new(Color3.fromHex("#272822"), Color3.fromHex("#272822")),
		AcrylicNoise = 1,

		TitleBarLine = Color3.fromHex("#1e1f1c"), -- titleBar.activeBackground
		Tab = Color3.fromHex("#f8f8f2"), -- editor.foreground

		Element = Color3.fromHex("#414339"), -- dropdown.background
		ElementBorder = Color3.fromHex("#75715E"), -- button.background
		InElementBorder = Color3.fromHex("#75715E"), -- focusBorder
		ElementTransparency = 0,

		ToggleSlider = Color3.fromHex("#75715E"), -- button.background
		ToggleToggled = Color3.fromHex("#272822"), -- editor.background

		SliderRail = Color3.fromHex("#75715E"), -- button.background

		DropdownFrame = Color3.fromHex("#414339"), -- dropdown.background
		DropdownHolder = Color3.fromHex("#1e1f1c"), -- dropdown.listBackground
		DropdownBorder = Color3.fromHex("#75715E"), -- button.background
		DropdownOption = Color3.fromHex("#f8f8f2"), -- list.highlightForeground

		Keybind = Color3.fromHex("#414339"), -- dropdown.background

		Input = Color3.fromHex("#414339"), -- input.background
		InputFocused = Color3.fromHex("#414339"), -- input.background
		InputIndicator = Color3.fromHex("#90908a"), -- editorLineNumber.foreground

		Dialog = Color3.fromHex("#1e1f1c"), -- editorWidget.background
		DialogHolder = Color3.fromHex("#1e1f1c"), -- menu.background
		DialogHolderLine = Color3.fromHex("#414339"), -- panel.border
		DialogButton = Color3.fromHex("#414339"), -- dropdown.background
		DialogButtonBorder = Color3.fromHex("#75715E"), -- button.background
		DialogBorder = Color3.fromHex("#75715E"), -- editorHoverWidget.border
		DialogInput = Color3.fromHex("#414339"), -- input.background
		DialogInputLine = Color3.fromHex("#75715E"), -- focusBorder

		Text = Color3.fromHex("#f8f8f2"), -- editor.foreground
		SubText = Color3.fromHex("#88846f"), -- Comment color
		Hover = Color3.fromHex("#3e3d32"), -- list.hoverBackground
		HoverChange = 0.1
	},
	["Monokai Dimmed"] = {
		Accent = Color3.fromHex("#3655b5"), -- focusBorder

		AcrylicMain = Color3.fromHex("#1e1e1e"), -- editor.background
		AcrylicBorder = Color3.fromHex("#303030"), -- tab.border
		AcrylicGradient = ColorSequence.new(Color3.fromHex("#1e1e1e"), Color3.fromHex("#1e1e1e")),
		AcrylicNoise = 1,

		TitleBarLine = Color3.fromHex("#303030"), -- tab.border
		Tab = Color3.fromHex("#d8d8d8"), -- tab.inactiveForeground

		Element = Color3.fromHex("#525252"), -- dropdown.background
		ElementBorder = Color3.fromHex("#505050"), -- titleBar.activeBackground
		InElementBorder = Color3.fromHex("#3655b5"), -- focusBorder
		ElementTransparency = 0,

		ToggleSlider = Color3.fromHex("#3655b5"), -- focusBorder
		ToggleToggled = Color3.fromHex("#525252"), -- dropdown.background

		SliderRail = Color3.fromHex("#3655b5"), -- focusBorder

		DropdownFrame = Color3.fromHex("#525252"), -- dropdown.background
		DropdownHolder = Color3.fromHex("#525252"), -- dropdown.background
		DropdownBorder = Color3.fromHex("#505050"), -- titleBar.activeBackground
		DropdownOption = Color3.fromHex("#c5c8c6"), -- editor.foreground

		Keybind = Color3.fromHex("#525252"), -- dropdown.background

		Input = Color3.fromHex("#525252"), -- dropdown.background
		InputFocused = Color3.fromHex("#525252"), -- dropdown.background
		InputIndicator = Color3.fromHex("#949494"), -- editorLineNumber.activeForeground

		Dialog = Color3.fromHex("#272727"), -- menu.background
		DialogHolder = Color3.fromHex("#272727"), -- menu.background
		DialogHolderLine = Color3.fromHex("#505050"), -- titleBar.activeBackground
		DialogButton = Color3.fromHex("#565656"), -- button.background
		DialogButtonBorder = Color3.fromHex("#505050"), -- titleBar.activeBackground
		DialogBorder = Color3.fromHex("#505050"), -- titleBar.activeBackground
		DialogInput = Color3.fromHex("#525252"), -- dropdown.background
		DialogInputLine = Color3.fromHex("#3655b5"), -- focusBorder

		Text = Color3.fromHex("#c5c8c6"), -- editor.foreground
		SubText = Color3.fromHex("#9A9B99"), -- comment color from tokenColors
		Hover = Color3.fromHex("#444444"), -- list.hoverBackground
		HoverChange = 0.1
	},
	["Monokai Vibrant"] = {
		Accent = Color3.fromHex("#528bff"), -- activityBarBadge.background

		AcrylicMain = Color3.fromHex("#16171D"), -- editor.background
		AcrylicBorder = Color3.fromHex("#181A1F"), -- editorGroup.border
		AcrylicGradient = ColorSequence.new(Color3.fromHex("#16171D"), Color3.fromHex("#16171D")),
		AcrylicNoise = 1,

		TitleBarLine = Color3.fromHex("#181A1F"), -- editorGroup.border
		Tab = Color3.fromHex("#f8f8f0"), -- editor.foreground

		Element = Color3.fromHex("#1d1f23"), -- dropdown.background
		ElementBorder = Color3.fromHex("#181A11"), -- dropdown.border
		InElementBorder = Color3.fromHex("#528bff"), -- activityBarBadge.background
		ElementTransparency = 0,

		ToggleSlider = Color3.fromHex("#528bff"), -- activityBarBadge.background
		ToggleToggled = Color3.fromHex("#16171D"), -- editor.background

		SliderRail = Color3.fromHex("#528bff"), -- activityBarBadge.background

		DropdownFrame = Color3.fromHex("#1d1f23"), -- dropdown.background
		DropdownHolder = Color3.fromHex("#21252B"), -- editorGroupHeader.tabsBackground
		DropdownBorder = Color3.fromHex("#181A11"), -- dropdown.border
		DropdownOption = Color3.fromHex("#d7dae0"), -- activityBar.foreground

		Keybind = Color3.fromHex("#1d1f23"), -- input.background

		Input = Color3.fromHex("#1d1f23"), -- input.background
		InputFocused = Color3.fromHex("#1d1f23"), -- input.background
		InputIndicator = Color3.fromHex("#495162"), -- editorLineNumber.foreground

		Dialog = Color3.fromHex("#21252B"), -- editorWidget.background
		DialogHolder = Color3.fromHex("#21252B"), -- notifications.background
		DialogHolderLine = Color3.fromHex("#181A1F"), -- editorGroup.border
		DialogButton = Color3.fromHex("#1d1f23"), -- input.background
		DialogButtonBorder = Color3.fromHex("#181A11"), -- dropdown.border
		DialogBorder = Color3.fromHex("#181A1F"), -- editorHoverWidget.border
		DialogInput = Color3.fromHex("#1d1f23"), -- input.background
		DialogInputLine = Color3.fromHex("#528bff"), -- activityBarBadge.background

		Text = Color3.fromHex("#f8f8f0"), -- editor.foreground
		SubText = Color3.fromHex("#5c6370"), -- Comment color
		Hover = Color3.fromHex("#292d35"), -- list.hoverBackground
		HoverChange = 0.1
	},
	["Monokai"] = {
		Accent = Color3.fromHex("#F92672"), -- Using the keyword color as accent

		AcrylicMain = Color3.fromHex("#272822"), -- editor.background
		AcrylicBorder = Color3.fromHex("#414339"), -- dropdown.background
		AcrylicGradient = ColorSequence.new(Color3.fromHex("#272822"), Color3.fromHex("#1e1f1c")), -- editor.background to editorGroupHeader.tabsBackground
		AcrylicNoise = 1,

		TitleBarLine = Color3.fromHex("#414339"), -- dropdown.background
		Tab = Color3.fromHex("#f8f8f2"), -- editor.foreground

		Element = Color3.fromHex("#414339"), -- dropdown.background
		ElementBorder = Color3.fromHex("#75715E"), -- button.background
		InElementBorder = Color3.fromHex("#F92672"), -- keyword color
		ElementTransparency = 0,

		ToggleSlider = Color3.fromHex("#F92672"), -- keyword color
		ToggleToggled = Color3.fromHex("#414339"), -- dropdown.background

		SliderRail = Color3.fromHex("#75715E"), -- button.background

		DropdownFrame = Color3.fromHex("#414339"), -- dropdown.background
		DropdownHolder = Color3.fromHex("#1e1f1c"), -- dropdown.listBackground
		DropdownBorder = Color3.fromHex("#75715E"), -- button.background
		DropdownOption = Color3.fromHex("#f8f8f2"), -- editor.foreground

		Keybind = Color3.fromHex("#414339"), -- dropdown.background

		Input = Color3.fromHex("#414339"), -- input.background
		InputFocused = Color3.fromHex("#414339"), -- input.background
		InputIndicator = Color3.fromHex("#90908a"), -- editorLineNumber.foreground

		Dialog = Color3.fromHex("#1e1f1c"), -- menu.background
		DialogHolder = Color3.fromHex("#1e1f1c"), -- menu.background
		DialogHolderLine = Color3.fromHex("#414339"), -- dropdown.background
		DialogButton = Color3.fromHex("#414339"), -- dropdown.background
		DialogButtonBorder = Color3.fromHex("#75715E"), -- button.background
		DialogBorder = Color3.fromHex("#75715E"), -- button.background
		DialogInput = Color3.fromHex("#414339"), -- input.background
		DialogInputLine = Color3.fromHex("#F92672"), -- keyword color

		Text = Color3.fromHex("#f8f8f2"), -- editor.foreground
		SubText = Color3.fromHex("#88846f"), -- comment color
		Hover = Color3.fromHex("#3e3d32"), -- list.hoverBackground
		HoverChange = 0.1
	},
	["Quiet Light"] = {
		Accent = Color3.fromHex("#9769dc"), -- focusBorder

		AcrylicMain = Color3.fromHex("#F5F5F5"), -- editor.background
		AcrylicBorder = Color3.fromHex("#c4b7d7"), -- titleBar.activeBackground
		AcrylicGradient = ColorSequence.new(Color3.fromHex("#F5F5F5"), Color3.fromHex("#F5F5F5")),
		AcrylicNoise = 1,

		TitleBarLine = Color3.fromHex("#c4b7d7"), -- titleBar.activeBackground
		Tab = Color3.fromHex("#705697"), -- activityBar.foreground

		Element = Color3.fromHex("#F2F2F2"), -- sideBar.background
		ElementBorder = Color3.fromHex("#adafb7"), -- inputOption.activeBorder
		InElementBorder = Color3.fromHex("#9769dc"), -- focusBorder
		ElementTransparency = 0,

		ToggleSlider = Color3.fromHex("#705697"), -- activityBarBadge.background
		ToggleToggled = Color3.fromHex("#F5F5F5"), -- editor.background

		SliderRail = Color3.fromHex("#705697"), -- activityBarBadge.background

		DropdownFrame = Color3.fromHex("#F5F5F5"), -- dropdown.background
		DropdownHolder = Color3.fromHex("#F5F5F5"), -- dropdown.background
		DropdownBorder = Color3.fromHex("#adafb7"), -- inputOption.activeBorder
		DropdownOption = Color3.fromHex("#333333"), -- Default text color

		Keybind = Color3.fromHex("#F5F5F5"), -- editor.background

		Input = Color3.fromHex("#F5F5F5"), -- editor.background
		InputFocused = Color3.fromHex("#F5F5F5"), -- editor.background
		InputIndicator = Color3.fromHex("#AAAAAA"), -- editorWhitespace.foreground

		Dialog = Color3.fromHex("#F2F8FC"), -- peekViewEditor.background
		DialogHolder = Color3.fromHex("#F2F8FC"), -- peekViewResult.background
		DialogHolderLine = Color3.fromHex("#705697"), -- peekView.border
		DialogButton = Color3.fromHex("#F5F5F5"), -- editor.background
		DialogButtonBorder = Color3.fromHex("#adafb7"), -- inputOption.activeBorder
		DialogBorder = Color3.fromHex("#705697"), -- peekView.border
		DialogInput = Color3.fromHex("#F5F5F5"), -- editor.background
		DialogInputLine = Color3.fromHex("#9769dc"), -- focusBorder

		Text = Color3.fromHex("#333333"), -- Default foreground
		SubText = Color3.fromHex("#6D705B"), -- editorLineNumber.foreground
		Hover = Color3.fromHex("#e0e0e0"), -- list.hoverBackground
		HoverChange = 0.1
	},
	["Rose"] = {
		Accent = Color3.fromRGB(180, 55, 90),

		AcrylicMain = Color3.fromRGB(40, 40, 40),
		AcrylicBorder = Color3.fromRGB(130, 90, 110),
		AcrylicGradient = ColorSequence.new(Color3.fromRGB(190, 60, 135), Color3.fromRGB(165, 50, 70)),
		AcrylicNoise = 0.92,

		TitleBarLine = Color3.fromRGB(140, 85, 105),
		Tab = Color3.fromRGB(180, 140, 160),

		Element = Color3.fromRGB(200, 120, 170),
		ElementBorder = Color3.fromRGB(110, 70, 85),
		InElementBorder = Color3.fromRGB(120, 90, 90),
		ElementTransparency = 0.86,

		ToggleSlider = Color3.fromRGB(200, 120, 170),
		ToggleToggled = Color3.fromRGB(0, 0, 0),

		SliderRail = Color3.fromRGB(200, 120, 170),

		DropdownFrame = Color3.fromRGB(200, 160, 180),
		DropdownHolder = Color3.fromRGB(120, 50, 75),
		DropdownBorder = Color3.fromRGB(90, 40, 55),
		DropdownOption = Color3.fromRGB(200, 120, 170),

		Keybind = Color3.fromRGB(200, 120, 170),

		Input = Color3.fromRGB(200, 120, 170),
		InputFocused = Color3.fromRGB(20, 10, 30),
		InputIndicator = Color3.fromRGB(170, 150, 190),

		Dialog = Color3.fromRGB(120, 50, 75),
		DialogHolder = Color3.fromRGB(95, 40, 60),
		DialogHolderLine = Color3.fromRGB(90, 35, 55),
		DialogButton = Color3.fromRGB(120, 50, 75),
		DialogButtonBorder = Color3.fromRGB(155, 90, 115),
		DialogBorder = Color3.fromRGB(100, 70, 90),
		DialogInput = Color3.fromRGB(135, 55, 80),
		DialogInputLine = Color3.fromRGB(190, 160, 180),

		Text = Color3.fromRGB(240, 240, 240),
		SubText = Color3.fromRGB(170, 170, 170),
		Hover = Color3.fromRGB(200, 120, 170),
		HoverChange = 0.04
	},
	["Solarized Dark"] = {
		Accent = Color3.fromHex("#2AA198"), -- String color as accent

		AcrylicMain = Color3.fromHex("#002B36"), -- editor.background
		AcrylicBorder = Color3.fromHex("#073642"), -- editor.lineHighlightBackground
		AcrylicGradient = ColorSequence.new(Color3.fromHex("#002B36"), Color3.fromHex("#002B36")),
		AcrylicNoise = 1,

		TitleBarLine = Color3.fromHex("#2AA198"), -- focusBorder
		Tab = Color3.fromHex("#839496"), -- editor.foreground

		Element = Color3.fromHex("#003847"), -- input.background
		ElementBorder = Color3.fromHex("#2AA198"), -- focusBorder
		InElementBorder = Color3.fromHex("#2AA198"), -- String color
		ElementTransparency = 0,

		ToggleSlider = Color3.fromHex("#2AA198"), -- String color
		ToggleToggled = Color3.fromHex("#002B36"), -- editor.background

		SliderRail = Color3.fromHex("#2AA198"), -- String color

		DropdownFrame = Color3.fromHex("#00212B"), -- dropdown.background
		DropdownHolder = Color3.fromHex("#00212B"), -- dropdown.background
		DropdownBorder = Color3.fromHex("#2AA198"), -- dropdown.border
		DropdownOption = Color3.fromHex("#839496"), -- foreground

		Keybind = Color3.fromHex("#003847"), -- input.background

		Input = Color3.fromHex("#003847"), -- input.background
		InputFocused = Color3.fromHex("#003847"), -- input.background
		InputIndicator = Color3.fromHex("#93A1A1"), -- input.placeholderForeground

		Dialog = Color3.fromHex("#00212B"), -- editorWidget.background
		DialogHolder = Color3.fromHex("#002B36"), -- editor.background
		DialogHolderLine = Color3.fromHex("#073642"), -- editor.lineHighlightBackground
		DialogButton = Color3.fromHex("#003847"), -- input.background
		DialogButtonBorder = Color3.fromHex("#2AA198"), -- focusBorder
		DialogBorder = Color3.fromHex("#2AA198"), -- focusBorder
		DialogInput = Color3.fromHex("#003847"), -- input.background
		DialogInputLine = Color3.fromHex("#2AA198"), -- String color

		Text = Color3.fromHex("#839496"), -- editor.foreground
		SubText = Color3.fromHex("#586E75"), -- Comment color
		Hover = Color3.fromHex("#004454"), -- list.hoverBackground
		HoverChange = 0.1
	},
	["Solarized Light"] = {
		Accent = Color3.fromHex("#b58900"), -- Using the extension button color as accent

		AcrylicMain = Color3.fromHex("#FDF6E3"), -- editor.background
		AcrylicBorder = Color3.fromHex("#DDD6C1"), -- editorGroup.border
		AcrylicGradient = ColorSequence.new(Color3.fromHex("#FDF6E3"), Color3.fromHex("#FDF6E3")),
		AcrylicNoise = 1,

		TitleBarLine = Color3.fromHex("#DDD6C1"), -- editorGroup.border
		Tab = Color3.fromHex("#657B83"), -- editor.foreground

		Element = Color3.fromHex("#EEE8D5"), -- dropdown.background
		ElementBorder = Color3.fromHex("#D3AF86"), -- dropdown.border
		InElementBorder = Color3.fromHex("#b49471"), -- focusBorder
		ElementTransparency = 0,

		ToggleSlider = Color3.fromHex("#b58900"), -- extensionButton.prominentBackground
		ToggleToggled = Color3.fromHex("#FDF6E3"), -- editor.background

		SliderRail = Color3.fromHex("#b58900"), -- extensionButton.prominentBackground

		DropdownFrame = Color3.fromHex("#EEE8D5"), -- dropdown.background
		DropdownHolder = Color3.fromHex("#EEE8D5"), -- dropdown.background
		DropdownBorder = Color3.fromHex("#D3AF86"), -- dropdown.border
		DropdownOption = Color3.fromHex("#657B83"), -- editor.foreground

		Keybind = Color3.fromHex("#DDD6C1"), -- input.background

		Input = Color3.fromHex("#DDD6C1"), -- input.background
		InputFocused = Color3.fromHex("#DDD6C1"), -- input.background
		InputIndicator = Color3.fromHex("#586E75"), -- input.placeholderForeground

		Dialog = Color3.fromHex("#EEE8D5"), -- dropdown.background
		DialogHolder = Color3.fromHex("#EEE8D5"), -- sideBar.background
		DialogHolderLine = Color3.fromHex("#DDD6C1"), -- editorGroup.border
		DialogButton = Color3.fromHex("#AC9D57"), -- button.background
		DialogButtonBorder = Color3.fromHex("#D3AF86"), -- dropdown.border
		DialogBorder = Color3.fromHex("#DDD6C1"), -- editorGroup.border
		DialogInput = Color3.fromHex("#DDD6C1"), -- input.background
		DialogInputLine = Color3.fromHex("#b58900"), -- extensionButton.prominentBackground

		Text = Color3.fromHex("#657B83"), -- editor.foreground
		SubText = Color3.fromHex("#93A1A1"), -- Comment color from tokenColors
		Hover = Color3.fromHex("#DFCA88"), -- list.activeSelectionBackground
		HoverChange = 0.1
	},
	["Tomorrow Night Blue"] = {
		Accent = Color3.fromHex("#bbdaff"), -- focusBorder

		AcrylicMain = Color3.fromHex("#002451"), -- editor.background
		AcrylicBorder = Color3.fromHex("#404f7d"), -- editorGroup.border
		AcrylicGradient = ColorSequence.new(Color3.fromHex("#002451"), Color3.fromHex("#002451")),
		AcrylicNoise = 1,

		TitleBarLine = Color3.fromHex("#404f7d"), -- editorGroup.border
		Tab = Color3.fromHex("#ffffff"), -- editor.foreground

		Element = Color3.fromHex("#001733"), -- input.background
		ElementBorder = Color3.fromHex("#404f7d"), -- editorGroup.border
		InElementBorder = Color3.fromHex("#bbdaff"), -- focusBorder
		ElementTransparency = 0,

		ToggleSlider = Color3.fromHex("#bbdaff"), -- focusBorder
		ToggleToggled = Color3.fromHex("#001733"), -- input.background

		SliderRail = Color3.fromHex("#bbdaff"), -- focusBorder

		DropdownFrame = Color3.fromHex("#001733"), -- dropdown.background
		DropdownHolder = Color3.fromHex("#001733"), -- dropdown.background
		DropdownBorder = Color3.fromHex("#404f7d"), -- editorGroup.border
		DropdownOption = Color3.fromHex("#ffffff"), -- editor.foreground

		Keybind = Color3.fromHex("#001733"), -- input.background

		Input = Color3.fromHex("#001733"), -- input.background
		InputFocused = Color3.fromHex("#001733"), -- input.background
		InputIndicator = Color3.fromHex("#404f7d"), -- editorWhitespace.foreground

		Dialog = Color3.fromHex("#001c40"), -- editorWidget.background
		DialogHolder = Color3.fromHex("#001c40"), -- editorWidget.background
		DialogHolderLine = Color3.fromHex("#404f7d"), -- editorGroup.border
		DialogButton = Color3.fromHex("#001733"), -- input.background
		DialogButtonBorder = Color3.fromHex("#404f7d"), -- editorGroup.border
		DialogBorder = Color3.fromHex("#ffffff"), -- editorHoverWidget.border
		DialogInput = Color3.fromHex("#001733"), -- input.background
		DialogInputLine = Color3.fromHex("#bbdaff"), -- focusBorder

		Text = Color3.fromHex("#ffffff"), -- editor.foreground
		SubText = Color3.fromHex("#7285B7"), -- Comment color from tokenColors
		Hover = Color3.fromHex("#ffffff"), -- list.hoverBackground
		HoverChange = 0.1
	},
	["Typewriter"] = {
		Accent = Color3.fromRGB(97, 161, 107),

		AcrylicMain = Color3.fromRGB(252, 245, 228),
		AcrylicBorder = Color3.fromRGB(189, 189, 189),
		AcrylicGradient = ColorSequence.new(Color3.fromRGB(252, 245, 228), Color3.fromRGB(228, 220, 200)),
		AcrylicNoise = 1,

		TitleBarLine = Color3.fromRGB(189, 189, 189),
		Tab = Color3.fromRGB(109, 180, 120),

		Element = Color3.fromRGB(255, 255, 255),
		ElementBorder = Color3.fromRGB(200, 200, 200),
		InElementBorder = Color3.fromRGB(191, 191, 193),
		ElementTransparency = 1,

		ToggleSlider = Color3.fromRGB(97, 161, 107),
		ToggleToggled = Color3.fromRGB(255, 255, 255),

		SliderRail = Color3.fromRGB(230, 230, 230),

		DropdownFrame = Color3.fromRGB(217, 218, 220),
		DropdownHolder = Color3.fromRGB(226, 220, 205),
		DropdownBorder = Color3.fromRGB(185, 182, 172),
		DropdownOption = Color3.fromRGB(27, 129, 229),

		Keybind = Color3.fromRGB(233, 227, 211),

		Input = Color3.fromRGB(255, 255, 255),
		InputFocused = Color3.fromRGB(20, 10, 30),
		InputIndicator = Color3.fromRGB(170, 150, 190),

		Dialog = Color3.fromRGB(252, 245, 228),
		DialogHolder = Color3.fromRGB(228, 220, 200),
		DialogHolderLine = Color3.fromRGB(189, 189, 189),
		DialogButton = Color3.fromRGB(242, 243, 245),
		DialogButtonBorder = Color3.fromRGB(213, 213, 215),
		DialogBorder = Color3.fromRGB(189, 189, 189),
		DialogInput = Color3.fromRGB(252, 245, 228),
		DialogInputLine = Color3.fromRGB(190, 160, 180),

		Text = Color3.fromRGB(104, 104, 104),
		SubText = Color3.fromRGB(170, 170, 170),
		Hover = Color3.fromRGB(149, 149, 149),
		HoverChange = 0.04
	},
	["United GNOME"] = {
		Accent = Color3.fromHex("#48b258"),

		AcrylicMain = Color3.fromHex("#1e1e1e"),
		AcrylicBorder = Color3.fromHex("#444444"),
		AcrylicGradient = ColorSequence.new(Color3.fromHex("#1e1e1e"), Color3.fromHex("#1e1e1e")),
		AcrylicNoise = 0.92,

		TitleBarLine = Color3.fromHex("#444444"),
		Tab = Color3.fromHex("#dddddd"),

		Element = Color3.fromHex("#242424"),
		ElementBorder = Color3.fromHex("#404040"),
		InElementBorder = Color3.fromHex("#48b258"),
		ElementTransparency = 0,

		ToggleSlider = Color3.fromHex("#48b258"),
		ToggleToggled = Color3.fromHex("#1e1e1e"),

		SliderRail = Color3.fromHex("#48b258"),

		DropdownFrame = Color3.fromHex("#242424"),
		DropdownHolder = Color3.fromHex("#242424"),
		DropdownBorder = Color3.fromHex("#404040"),
		DropdownOption = Color3.fromHex("#dddddd"),

		Keybind = Color3.fromHex("#242424"),

		Input = Color3.fromHex("#242424"),
		InputFocused = Color3.fromHex("#242424"),
		InputIndicator = Color3.fromHex("#808080"),

		Dialog = Color3.fromHex("#242424"),
		DialogHolder = Color3.fromHex("#1e1e1e"),
		DialogHolderLine = Color3.fromHex("#404040"),
		DialogButton = Color3.fromHex("#242424"),
		DialogButtonBorder = Color3.fromHex("#404040"),
		DialogBorder = Color3.fromHex("#444444"),
		DialogInput = Color3.fromHex("#242424"),
		DialogInputLine = Color3.fromHex("#48b258"),

		Text = Color3.fromHex("#dddddd"),
		SubText = Color3.fromHex("#808080"),
		Hover = Color3.fromHex("#2A2D2E"),
		HoverChange = 0.05
	},
	["United Ubuntu"] = {
		Accent = Color3.fromHex("#48b258"),

		AcrylicMain = Color3.fromHex("#1e1e1e"),
		AcrylicBorder = Color3.fromHex("#444444"),
		AcrylicGradient = ColorSequence.new(Color3.fromHex("#1e1e1e"), Color3.fromHex("#1e1e1e")),
		AcrylicNoise = 0.92,

		TitleBarLine = Color3.fromHex("#444444"),
		Tab = Color3.fromHex("#dddddd"),

		Element = Color3.fromHex("#242424"),
		ElementBorder = Color3.fromHex("#404040"),
		InElementBorder = Color3.fromHex("#48b258"),
		ElementTransparency = 0,

		ToggleSlider = Color3.fromHex("#48b258"),
		ToggleToggled = Color3.fromHex("#1e1e1e"),

		SliderRail = Color3.fromHex("#48b258"),

		DropdownFrame = Color3.fromHex("#242424"),
		DropdownHolder = Color3.fromHex("#242424"),
		DropdownBorder = Color3.fromHex("#404040"),
		DropdownOption = Color3.fromHex("#dddddd"),

		Keybind = Color3.fromHex("#242424"),

		Input = Color3.fromHex("#242424"),
		InputFocused = Color3.fromHex("#242424"),
		InputIndicator = Color3.fromHex("#808080"),

		Dialog = Color3.fromHex("#242424"),
		DialogHolder = Color3.fromHex("#1e1e1e"),
		DialogHolderLine = Color3.fromHex("#404040"),
		DialogButton = Color3.fromHex("#242424"),
		DialogButtonBorder = Color3.fromHex("#404040"),
		DialogBorder = Color3.fromHex("#444444"),
		DialogInput = Color3.fromHex("#242424"),
		DialogInputLine = Color3.fromHex("#48b258"),

		Text = Color3.fromHex("#dddddd"),
		SubText = Color3.fromHex("#808080"),
		Hover = Color3.fromHex("#2A2D2E"),
		HoverChange = 0.05
	},
	["Viow Arabian Mix"] = {
		Accent = Color3.fromHex("#7b36e2"),

		AcrylicMain = Color3.fromHex("#110e1a"),
		AcrylicBorder = Color3.fromHex("#444444"),
		AcrylicGradient = ColorSequence.new(Color3.fromHex("#110e1a"), Color3.fromHex("#110e1a")),
		AcrylicNoise = 0.92,

		TitleBarLine = Color3.fromHex("#444444"),
		Tab = Color3.fromHex("#CCCCCC"),

		Element = Color3.fromHex("#2D2D2D"),
		ElementBorder = Color3.fromHex("#404040"),
		InElementBorder = Color3.fromHex("#7b36e2"),
		ElementTransparency = 0.85,

		ToggleSlider = Color3.fromHex("#7b36e2"),
		ToggleToggled = Color3.fromHex("#110e1a"),

		SliderRail = Color3.fromHex("#7b36e2"),

		DropdownFrame = Color3.fromHex("#2D2D2D"),
		DropdownHolder = Color3.fromHex("#252526"),
		DropdownBorder = Color3.fromHex("#404040"),
		DropdownOption = Color3.fromHex("#a497b5"),

		Keybind = Color3.fromHex("#2D2D2D"),

		Input = Color3.fromHex("#3C3C3C"),
		InputFocused = Color3.fromHex("#3C3C3C"),
		InputIndicator = Color3.fromHex("#808080"),

		Dialog = Color3.fromHex("#2a1c3e"),
		DialogHolder = Color3.fromHex("#150E33"),
		DialogHolderLine = Color3.fromHex("#100422"),
		DialogButton = Color3.fromHex("#2D2D2D"),
		DialogButtonBorder = Color3.fromHex("#404040"),
		DialogBorder = Color3.fromHex("#444444"),
		DialogInput = Color3.fromHex("#3C3C3C"),
		DialogInputLine = Color3.fromHex("#7b36e2"),

		Text = Color3.fromHex("#a497b5"),
		SubText = Color3.fromHex("#60576f"),
		Hover = Color3.fromHex("#2A2D2E"),
		HoverChange = 0.05
	},
	["Viow Arabian"] = {
		Accent = Color3.fromHex("#7b36e2"),

		AcrylicMain = Color3.fromHex("#110e1a"),
		AcrylicBorder = Color3.fromHex("#444444"),
		AcrylicGradient = ColorSequence.new(Color3.fromHex("#110e1a"), Color3.fromHex("#110e1a")),
		AcrylicNoise = 0.92,

		TitleBarLine = Color3.fromHex("#444444"),
		Tab = Color3.fromHex("#CCCCCC"),

		Element = Color3.fromHex("#2D2D2D"),
		ElementBorder = Color3.fromHex("#404040"),
		InElementBorder = Color3.fromHex("#7b36e2"),
		ElementTransparency = 0.85,

		ToggleSlider = Color3.fromHex("#7b36e2"),
		ToggleToggled = Color3.fromHex("#110e1a"),

		SliderRail = Color3.fromHex("#7b36e2"),

		DropdownFrame = Color3.fromHex("#2D2D2D"),
		DropdownHolder = Color3.fromHex("#252526"),
		DropdownBorder = Color3.fromHex("#404040"),
		DropdownOption = Color3.fromHex("#a497b5"),

		Keybind = Color3.fromHex("#2D2D2D"),

		Input = Color3.fromHex("#3C3C3C"),
		InputFocused = Color3.fromHex("#3C3C3C"),
		InputIndicator = Color3.fromHex("#808080"),

		Dialog = Color3.fromHex("#2a1c3e"),
		DialogHolder = Color3.fromHex("#110e1a"),
		DialogHolderLine = Color3.fromHex("#100422"),
		DialogButton = Color3.fromHex("#2D2D2D"),
		DialogButtonBorder = Color3.fromHex("#404040"),
		DialogBorder = Color3.fromHex("#444444"),
		DialogInput = Color3.fromHex("#3C3C3C"),
		DialogInputLine = Color3.fromHex("#7b36e2"),

		Text = Color3.fromHex("#a497b5"),
		SubText = Color3.fromHex("#60576f"),
		Hover = Color3.fromHex("#2A2D2E"),
		HoverChange = 0.05
	},
	["Viow Darker"] = {
		Accent = Color3.fromHex("#165fb3"),

		AcrylicMain = Color3.fromHex("#21252b"),
		AcrylicBorder = Color3.fromHex("#383838"),
		AcrylicGradient = ColorSequence.new(Color3.fromHex("#21252b"), Color3.fromHex("#21252b")),
		AcrylicNoise = 0.92,

		TitleBarLine = Color3.fromHex("#383838"),
		Tab = Color3.fromHex("#d3d0c8"),

		Element = Color3.fromHex("#2d333c"),
		ElementBorder = Color3.fromHex("#383838"),
		InElementBorder = Color3.fromHex("#165fb3"),
		ElementTransparency = 0.85,

		ToggleSlider = Color3.fromHex("#165fb3"),
		ToggleToggled = Color3.fromHex("#21252b"),

		SliderRail = Color3.fromHex("#165fb3"),

		DropdownFrame = Color3.fromHex("#2d333c"),
		DropdownHolder = Color3.fromHex("#1e2228"),
		DropdownBorder = Color3.fromHex("#383838"),
		DropdownOption = Color3.fromHex("#d3d0c8"),

		Keybind = Color3.fromHex("#2d333c"),

		Input = Color3.fromHex("#2d333c"),
		InputFocused = Color3.fromHex("#2d333c"),
		InputIndicator = Color3.fromHex("#747369"),

		Dialog = Color3.fromHex("#21252b"),
		DialogHolder = Color3.fromHex("#1E2228"),
		DialogHolderLine = Color3.fromHex("#383838"),
		DialogButton = Color3.fromHex("#2d333c"),
		DialogButtonBorder = Color3.fromHex("#383838"),
		DialogBorder = Color3.fromHex("#383838"),
		DialogInput = Color3.fromHex("#2d333c"),
		DialogInputLine = Color3.fromHex("#165fb3"),

		Text = Color3.fromHex("#d3d0c8"),
		SubText = Color3.fromHex("#747369"),
		Hover = Color3.fromHex("#383838"),
		HoverChange = 0.05
	},
	["Viow Flat"] = {
		Accent = Color3.fromHex("#165fb3"),

		AcrylicMain = Color3.fromHex("#191c28"),
		AcrylicBorder = Color3.fromHex("#191c28"),
		AcrylicGradient = ColorSequence.new(Color3.fromHex("#191c28"), Color3.fromHex("#191c28")),
		AcrylicNoise = 0.92,

		TitleBarLine = Color3.fromHex("#191c28"),
		Tab = Color3.fromHex("#d3d0c8"),

		Element = Color3.fromHex("#191c28"),
		ElementBorder = Color3.fromHex("#191c28"),
		InElementBorder = Color3.fromHex("#165fb3"),
		ElementTransparency = 0,

		ToggleSlider = Color3.fromHex("#165fb3"),
		ToggleToggled = Color3.fromHex("#191c28"),

		SliderRail = Color3.fromHex("#165fb3"),

		DropdownFrame = Color3.fromHex("#191c28"),
		DropdownHolder = Color3.fromHex("#191c28"),
		DropdownBorder = Color3.fromHex("#191c28"),
		DropdownOption = Color3.fromHex("#d3d0c8"),

		Keybind = Color3.fromHex("#191c28"),

		Input = Color3.fromHex("#191c28"),
		InputFocused = Color3.fromHex("#191c28"),
		InputIndicator = Color3.fromHex("#747369"),

		Dialog = Color3.fromHex("#191c28"),
		DialogHolder = Color3.fromHex("#191c28"),
		DialogHolderLine = Color3.fromHex("#191c28"),
		DialogButton = Color3.fromHex("#191c28"),
		DialogButtonBorder = Color3.fromHex("#191c28"),
		DialogBorder = Color3.fromHex("#191c28"),
		DialogInput = Color3.fromHex("#191c28"),
		DialogInputLine = Color3.fromHex("#165fb3"),

		Text = Color3.fromHex("#d3d0c8"),
		SubText = Color3.fromHex("#747369"),
		Hover = Color3.fromHex("#464870"),
		HoverChange = 0.05
	},
	["Viow Light"] = {
		Accent = Color3.fromHex("#0f96ff"),

		AcrylicMain = Color3.fromHex("#ffffff"),
		AcrylicBorder = Color3.fromHex("#d4d4d4"),
		AcrylicGradient = ColorSequence.new(Color3.fromHex("#ffffff"), Color3.fromHex("#ffffff")),
		AcrylicNoise = 1,

		TitleBarLine = Color3.fromHex("#d4d4d4"),
		Tab = Color3.fromHex("#8e8e8e"),

		Element = Color3.fromHex("#f3f3f3"),
		ElementBorder = Color3.fromHex("#cecece"),
		InElementBorder = Color3.fromHex("#0f96ff"),
		ElementTransparency = 0,

		ToggleSlider = Color3.fromHex("#0f96ff"),
		ToggleToggled = Color3.fromHex("#ffffff"),

		SliderRail = Color3.fromHex("#0f96ff"),

		DropdownFrame = Color3.fromHex("#ffffff"),
		DropdownHolder = Color3.fromHex("#ffffff"),
		DropdownBorder = Color3.fromHex("#cecece"),
		DropdownOption = Color3.fromHex("#57606c"),

		Keybind = Color3.fromHex("#ffffff"),

		Input = Color3.fromHex("#ffffff"),
		InputFocused = Color3.fromHex("#ffffff"),
		InputIndicator = Color3.fromHex("#767676"),

		Dialog = Color3.fromHex("#f3f3f3"),
		DialogHolder = Color3.fromHex("#ffffff"),
		DialogHolderLine = Color3.fromHex("#d4d4d4"),
		DialogButton = Color3.fromHex("#f3f3f3"),
		DialogButtonBorder = Color3.fromHex("#cecece"),
		DialogBorder = Color3.fromHex("#d4d4d4"),
		DialogInput = Color3.fromHex("#ffffff"),
		DialogInputLine = Color3.fromHex("#0f96ff"),

		Text = Color3.fromHex("#57606c"),
		SubText = Color3.fromHex("#6f6f6f"),
		Hover = Color3.fromHex("#e8e8e8"),
		HoverChange = 0.1
	},
	["Viow Mars"] = {
		Accent = Color3.fromHex("#e32b00"),

		AcrylicMain = Color3.fromHex("#130c0f"),
		AcrylicBorder = Color3.fromHex("#28191d"),
		AcrylicGradient = ColorSequence.new(Color3.fromHex("#130c0f"), Color3.fromHex("#130c0f")),
		AcrylicNoise = 0.92,

		TitleBarLine = Color3.fromHex("#28191d"),
		Tab = Color3.fromHex("#d3d0c8"),

		Element = Color3.fromHex("#321f27"),
		ElementBorder = Color3.fromHex("#5a0d29"),
		InElementBorder = Color3.fromHex("#e32b00"),
		ElementTransparency = 0.85,

		ToggleSlider = Color3.fromHex("#e32b00"),
		ToggleToggled = Color3.fromHex("#130c0f"),

		SliderRail = Color3.fromHex("#e32b00"),

		DropdownFrame = Color3.fromHex("#321f27"),
		DropdownHolder = Color3.fromHex("#271e22"),
		DropdownBorder = Color3.fromHex("#5a0d29"),
		DropdownOption = Color3.fromHex("#d3d0c8"),

		Keybind = Color3.fromHex("#321f27"),

		Input = Color3.fromHex("#321f27"),
		InputFocused = Color3.fromHex("#321f27"),
		InputIndicator = Color3.fromHex("#747369"),

		Dialog = Color3.fromHex("#462531"),
		DialogHolder = Color3.fromHex("#3a1223"),
		DialogHolderLine = Color3.fromHex("#5c1b33"),
		DialogButton = Color3.fromHex("#321f27"),
		DialogButtonBorder = Color3.fromHex("#5a0d29"),
		DialogBorder = Color3.fromHex("#ff4f15"),
		DialogInput = Color3.fromHex("#321f27"),
		DialogInputLine = Color3.fromHex("#e32b00"),

		Text = Color3.fromHex("#d3d0c8"),
		SubText = Color3.fromHex("#747369"),
		Hover = Color3.fromHex("#5c1b33"),
		HoverChange = 0.05
	},
	["Viow Neon"] = {
		Accent = Color3.fromHex("#1591ff"),

		AcrylicMain = Color3.fromHex("#202432"),
		AcrylicBorder = Color3.fromHex("#191c28"),
		AcrylicGradient = ColorSequence.new(Color3.fromHex("#202432"), Color3.fromHex("#202432")),
		AcrylicNoise = 0.92,

		TitleBarLine = Color3.fromHex("#191c28"),
		Tab = Color3.fromHex("#d3d0c8"),

		Element = Color3.fromHex("#202432"),
		ElementBorder = Color3.fromHex("#0d2c5a"),
		InElementBorder = Color3.fromHex("#1591ff"),
		ElementTransparency = 0.85,

		ToggleSlider = Color3.fromHex("#1591ff"),
		ToggleToggled = Color3.fromHex("#202432"),

		SliderRail = Color3.fromHex("#1591ff"),

		DropdownFrame = Color3.fromHex("#202432"),
		DropdownHolder = Color3.fromHex("#1e2228"),
		DropdownBorder = Color3.fromHex("#0d2c5a"),
		DropdownOption = Color3.fromHex("#d3d0c8"),

		Keybind = Color3.fromHex("#202432"),

		Input = Color3.fromHex("#202432"),
		InputFocused = Color3.fromHex("#202432"),
		InputIndicator = Color3.fromHex("#747369"),

		Dialog = Color3.fromHex("#252f46"),
		DialogHolder = Color3.fromHex("#1c1f2b"),
		DialogHolderLine = Color3.fromHex("#1b375c"),
		DialogButton = Color3.fromHex("#202432"),
		DialogButtonBorder = Color3.fromHex("#0d2c5a"),
		DialogBorder = Color3.fromHex("#1591ff"),
		DialogInput = Color3.fromHex("#202432"),
		DialogInputLine = Color3.fromHex("#1591ff"),

		Text = Color3.fromHex("#d3d0c8"),
		SubText = Color3.fromHex("#747369"),
		Hover = Color3.fromHex("#1b375c"),
		HoverChange = 0.05
	},
	["VS Dark"] = {
		Accent = Color3.fromHex("#007ACC"), -- activityBarBadge.background

		AcrylicMain = Color3.fromHex("#1E1E1E"), -- editor.background
		AcrylicBorder = Color3.fromHex("#303031"), -- widget.border
		AcrylicGradient = ColorSequence.new(Color3.fromHex("#1E1E1E"), Color3.fromHex("#1E1E1E")),
		AcrylicNoise = 1,

		TitleBarLine = Color3.fromHex("#303031"), -- widget.border
		Tab = Color3.fromHex("#ffffff"), -- tab.selectedForeground

		Element = Color3.fromHex("#222222"), -- tab.selectedBackground
		ElementBorder = Color3.fromHex("#6B6B6B"), -- checkbox.border
		InElementBorder = Color3.fromHex("#007ACC"), -- activityBarBadge.background
		ElementTransparency = 0,

		ToggleSlider = Color3.fromHex("#007ACC"), -- activityBarBadge.background
		ToggleToggled = Color3.fromHex("#222222"), -- tab.selectedBackground

		SliderRail = Color3.fromHex("#404040"), -- editorIndentGuide.background1

		DropdownFrame = Color3.fromHex("#252526"), -- menu.background
		DropdownHolder = Color3.fromHex("#252526"), -- menu.background
		DropdownBorder = Color3.fromHex("#454545"), -- menu.border
		DropdownOption = Color3.fromHex("#CCCCCC"), -- menu.foreground

		Keybind = Color3.fromHex("#222222"), -- tab.selectedBackground

		Input = Color3.fromHex("#222222"), -- tab.selectedBackground
		InputFocused = Color3.fromHex("#222222"), -- tab.selectedBackground
		InputIndicator = Color3.fromHex("#A6A6A6"), -- input.placeholderForeground

		Dialog = Color3.fromHex("#252526"), -- menu.background
		DialogHolder = Color3.fromHex("#252526"), -- menu.background
		DialogHolderLine = Color3.fromHex("#454545"), -- menu.separatorBackground
		DialogButton = Color3.fromHex("#222222"), -- tab.selectedBackground
		DialogButtonBorder = Color3.fromHex("#454545"), -- menu.border
		DialogBorder = Color3.fromHex("#454545"), -- menu.border
		DialogInput = Color3.fromHex("#222222"), -- tab.selectedBackground
		DialogInputLine = Color3.fromHex("#007ACC"), -- activityBarBadge.background

		Text = Color3.fromHex("#D4D4D4"), -- editor.foreground
		SubText = Color3.fromHex("#BBBBBB"), -- sideBarTitle.foreground
		Hover = Color3.fromHex("#383B3D"), -- list.dropBackground
		HoverChange = 0.1
	},
	["VS Light"] = {
		Accent = Color3.fromHex("#007ACC"), -- activityBarBadge.background

		AcrylicMain = Color3.fromHex("#FFFFFF"), -- editor.background
		AcrylicBorder = Color3.fromHex("#919191"), -- checkbox.border
		AcrylicGradient = ColorSequence.new(Color3.fromHex("#FFFFFF"), Color3.fromHex("#FFFFFF")),
		AcrylicNoise = 1,

		TitleBarLine = Color3.fromHex("#D4D4D4"), -- menu.border
		Tab = Color3.fromHex("#333333"), -- tab.selectedForeground

		Element = Color3.fromHex("#F3F3F3"), -- editorSuggestWidget.background
		ElementBorder = Color3.fromHex("#CECECE"), -- searchEditor.textInputBorder
		InElementBorder = Color3.fromHex("#007ACC"), -- activityBarBadge.background
		ElementTransparency = 0,

		ToggleSlider = Color3.fromHex("#007ACC"), -- activityBarBadge.background
		ToggleToggled = Color3.fromHex("#FFFFFF"), -- editor.background

		SliderRail = Color3.fromHex("#007ACC"), -- activityBarBadge.background

		DropdownFrame = Color3.fromHex("#FFFFFF"), -- editor.background
		DropdownHolder = Color3.fromHex("#FFFFFF"), -- editor.background
		DropdownBorder = Color3.fromHex("#CECECE"), -- searchEditor.textInputBorder
		DropdownOption = Color3.fromHex("#000000"), -- editor.foreground

		Keybind = Color3.fromHex("#FFFFFF"), -- editor.background

		Input = Color3.fromHex("#FFFFFF"), -- editor.background
		InputFocused = Color3.fromHex("#FFFFFF"), -- editor.background
		InputIndicator = Color3.fromHex("#767676"), -- input.placeholderForeground

		Dialog = Color3.fromHex("#F3F3F3"), -- editorSuggestWidget.background
		DialogHolder = Color3.fromHex("#FFFFFF"), -- editor.background
		DialogHolderLine = Color3.fromHex("#D4D4D4"), -- menu.border
		DialogButton = Color3.fromHex("#F3F3F3"), -- editorSuggestWidget.background
		DialogButtonBorder = Color3.fromHex("#CECECE"), -- searchEditor.textInputBorder
		DialogBorder = Color3.fromHex("#D4D4D4"), -- menu.border
		DialogInput = Color3.fromHex("#FFFFFF"), -- editor.background
		DialogInputLine = Color3.fromHex("#007ACC"), -- activityBarBadge.background

		Text = Color3.fromHex("#000000"), -- editor.foreground
		SubText = Color3.fromHex("#6F6F6F"), -- sideBarTitle.foreground
		Hover = Color3.fromHex("#E8E8E8"), -- list.hoverBackground
		HoverChange = 0.1
	},
	["VSC Dark High Contrast"] = {
		Accent = Color3.fromHex("#569cd6"), -- Based on keyword color

		AcrylicMain = Color3.fromHex("#000000"), -- editor.background
		AcrylicBorder = Color3.fromHex("#FFFFFF"), -- Based on editor.foreground
		AcrylicGradient = ColorSequence.new(Color3.fromHex("#000000"), Color3.fromHex("#000000")),
		AcrylicNoise = 1,

		TitleBarLine = Color3.fromHex("#FFFFFF"),
		Tab = Color3.fromHex("#FFFFFF"),

		Element = Color3.fromHex("#000000"),
		ElementBorder = Color3.fromHex("#FFFFFF"),
		InElementBorder = Color3.fromHex("#569cd6"),
		ElementTransparency = 0,

		ToggleSlider = Color3.fromHex("#569cd6"),
		ToggleToggled = Color3.fromHex("#000000"),

		SliderRail = Color3.fromHex("#569cd6"),

		DropdownFrame = Color3.fromHex("#000000"),
		DropdownHolder = Color3.fromHex("#000000"),
		DropdownBorder = Color3.fromHex("#FFFFFF"),
		DropdownOption = Color3.fromHex("#FFFFFF"),

		Keybind = Color3.fromHex("#000000"),

		Input = Color3.fromHex("#000000"),
		InputFocused = Color3.fromHex("#000000"),
		InputIndicator = Color3.fromHex("#7c7c7c"), -- Based on editorWhitespace.foreground

		Dialog = Color3.fromHex("#000000"),
		DialogHolder = Color3.fromHex("#000000"),
		DialogHolderLine = Color3.fromHex("#FFFFFF"),
		DialogButton = Color3.fromHex("#000000"),
		DialogButtonBorder = Color3.fromHex("#FFFFFF"),
		DialogBorder = Color3.fromHex("#FFFFFF"),
		DialogInput = Color3.fromHex("#000000"),
		DialogInputLine = Color3.fromHex("#569cd6"),

		Text = Color3.fromHex("#FFFFFF"), -- editor.foreground
		SubText = Color3.fromHex("#9D9D9D"), -- descriptionForeground
		Hover = Color3.fromHex("#383a49"), -- Based on actionBar.toggledBackground
		HoverChange = 0.1
	},
	["VSC Dark Modern"] = {
		Accent = Color3.fromHex("#0078D4"), -- focusBorder

		AcrylicMain = Color3.fromHex("#181818"), -- activityBar.background
		AcrylicBorder = Color3.fromHex("#2B2B2B"), -- activityBar.border
		AcrylicGradient = ColorSequence.new(Color3.fromHex("#181818"), Color3.fromHex("#181818")), -- activityBar.background
		AcrylicNoise = 1,

		TitleBarLine = Color3.fromHex("#2B2B2B"), -- titleBar.border
		Tab = Color3.fromHex("#FFFFFF"), -- tab.activeForeground

		Element = Color3.fromHex("#313131"), -- button.secondaryBackground
		ElementBorder = Color3.fromHex("#3C3C3C"), -- button.secondaryHoverBackground
		InElementBorder = Color3.fromHex("#0078D4"), -- focusBorder
		ElementTransparency = 0,

		ToggleSlider = Color3.fromHex("#0078D4"), -- focusBorder
		ToggleToggled = Color3.fromHex("#313131"), -- checkbox.background

		SliderRail = Color3.fromHex("#0078D4"), -- focusBorder

		DropdownFrame = Color3.fromHex("#313131"), -- dropdown.background
		DropdownHolder = Color3.fromHex("#313131"), -- dropdown.background
		DropdownBorder = Color3.fromHex("#3C3C3C"), -- dropdown.border
		DropdownOption = Color3.fromHex("#CCCCCC"), -- dropdown.foreground

		Keybind = Color3.fromHex("#313131"), -- input.background

		Input = Color3.fromHex("#313131"), -- input.background
		InputFocused = Color3.fromHex("#313131"), -- input.background
		InputIndicator = Color3.fromHex("#989898"), -- input.placeholderForeground

		Dialog = Color3.fromHex("#202020"), -- editorWidget.background
		DialogHolder = Color3.fromHex("#1F1F1F"), -- editor.background
		DialogHolderLine = Color3.fromHex("#2B2B2B"), -- panel.border
		DialogButton = Color3.fromHex("#313131"), -- button.secondaryBackground
		DialogButtonBorder = Color3.fromHex("#3C3C3C"), -- button.secondaryHoverBackground
		DialogBorder = Color3.fromHex("#2B2B2B"), -- notifications.border
		DialogInput = Color3.fromHex("#313131"), -- input.background
		DialogInputLine = Color3.fromHex("#0078D4"), -- focusBorder

		Text = Color3.fromHex("#CCCCCC"), -- foreground
		SubText = Color3.fromHex("#9D9D9D"), -- descriptionForeground
		Hover = Color3.fromHex("#3C3C3C"), -- button.secondaryHoverBackground
		HoverChange = 0.1
	},
	["VSC Dark+"] = {
		Accent = Color3.fromHex("#DCDCAA"), -- Based on function declarations color

		AcrylicMain = Color3.fromHex("#1E1E1E"), -- VS Code's default dark background
		AcrylicBorder = Color3.fromHex("#444444"),
		AcrylicGradient = ColorSequence.new(Color3.fromHex("#1E1E1E"), Color3.fromHex("#1E1E1E")),
		AcrylicNoise = 0.92,

		TitleBarLine = Color3.fromHex("#444444"),
		Tab = Color3.fromHex("#CCCCCC"),

		Element = Color3.fromHex("#2D2D2D"),
		ElementBorder = Color3.fromHex("#404040"),
		InElementBorder = Color3.fromHex("#DCDCAA"),
		ElementTransparency = 0.85,

		ToggleSlider = Color3.fromHex("#4EC9B0"), -- Using type declaration color
		ToggleToggled = Color3.fromHex("#1E1E1E"),

		SliderRail = Color3.fromHex("#4EC9B0"),

		DropdownFrame = Color3.fromHex("#2D2D2D"),
		DropdownHolder = Color3.fromHex("#252526"),
		DropdownBorder = Color3.fromHex("#404040"),
		DropdownOption = Color3.fromHex("#9CDCFE"), -- Variable color

		Keybind = Color3.fromHex("#2D2D2D"),

		Input = Color3.fromHex("#3C3C3C"),
		InputFocused = Color3.fromHex("#3C3C3C"),
		InputIndicator = Color3.fromHex("#808080"),

		Dialog = Color3.fromHex("#252526"),
		DialogHolder = Color3.fromHex("#1E1E1E"),
		DialogHolderLine = Color3.fromHex("#404040"),
		DialogButton = Color3.fromHex("#2D2D2D"),
		DialogButtonBorder = Color3.fromHex("#404040"),
		DialogBorder = Color3.fromHex("#444444"),
		DialogInput = Color3.fromHex("#3C3C3C"),
		DialogInputLine = Color3.fromHex("#DCDCAA"),

		Text = Color3.fromHex("#D4D4D4"), -- Default text color
		SubText = Color3.fromHex("#808080"),
		Hover = Color3.fromHex("#2A2D2E"),
		HoverChange = 0.05
	},
	["VSC Light High Contrast"] = {
		Accent = Color3.fromHex("#5e2cbc"), -- Based on function color

		AcrylicMain = Color3.fromHex("#ffffff"), -- Light background
		AcrylicBorder = Color3.fromHex("#292929"), -- Based on embedded foreground
		AcrylicGradient = ColorSequence.new(Color3.fromHex("#ffffff"), Color3.fromHex("#ffffff")),
		AcrylicNoise = 1,

		TitleBarLine = Color3.fromHex("#292929"),
		Tab = Color3.fromHex("#000000"), -- Pure black for high contrast

		Element = Color3.fromHex("#ffffff"),
		ElementBorder = Color3.fromHex("#515151"), -- Comment color
		InElementBorder = Color3.fromHex("#5e2cbc"), -- Function color
		ElementTransparency = 0,

		ToggleSlider = Color3.fromHex("#0F4A85"), -- Storage/keyword color
		ToggleToggled = Color3.fromHex("#ffffff"),

		SliderRail = Color3.fromHex("#0F4A85"),

		DropdownFrame = Color3.fromHex("#ffffff"),
		DropdownHolder = Color3.fromHex("#ffffff"),
		DropdownBorder = Color3.fromHex("#515151"),
		DropdownOption = Color3.fromHex("#001080"), -- Variable color

		Keybind = Color3.fromHex("#ffffff"),

		Input = Color3.fromHex("#ffffff"),
		InputFocused = Color3.fromHex("#ffffff"),
		InputIndicator = Color3.fromHex("#515151"), -- Comment color

		Dialog = Color3.fromHex("#ffffff"),
		DialogHolder = Color3.fromHex("#ffffff"),
		DialogHolderLine = Color3.fromHex("#515151"),
		DialogButton = Color3.fromHex("#ffffff"),
		DialogButtonBorder = Color3.fromHex("#515151"),
		DialogBorder = Color3.fromHex("#292929"),
		DialogInput = Color3.fromHex("#ffffff"),
		DialogInputLine = Color3.fromHex("#5e2cbc"),

		Text = Color3.fromHex("#292929"), -- Based on embedded foreground
		SubText = Color3.fromHex("#515151"), -- Comment color
		Hover = Color3.fromHex("#dddddd"), -- Based on actionBar.toggledBackground
		HoverChange = 0.1
	},
	["VSC Light Modern"] = {
		Accent = Color3.fromHex("#005FB8"), -- focusBorder

		AcrylicMain = Color3.fromHex("#F8F8F8"), -- activityBar.background
		AcrylicBorder = Color3.fromHex("#E5E5E5"), -- activityBar.border
		AcrylicGradient = ColorSequence.new(Color3.fromHex("#F8F8F8"), Color3.fromHex("#F8F8F8")),
		AcrylicNoise = 1,

		TitleBarLine = Color3.fromHex("#E5E5E5"), -- titleBar.border
		Tab = Color3.fromHex("#1F1F1F"), -- activityBar.foreground

		Element = Color3.fromHex("#E5E5E5"), -- button.secondaryBackground
		ElementBorder = Color3.fromHex("#CECECE"), -- button.border
		InElementBorder = Color3.fromHex("#005FB8"), -- focusBorder
		ElementTransparency = 0,

		ToggleSlider = Color3.fromHex("#005FB8"), -- focusBorder
		ToggleToggled = Color3.fromHex("#FFFFFF"), -- editor.background

		SliderRail = Color3.fromHex("#005FB8"), -- focusBorder

		DropdownFrame = Color3.fromHex("#FFFFFF"), -- dropdown.background
		DropdownHolder = Color3.fromHex("#FFFFFF"), -- dropdown.background
		DropdownBorder = Color3.fromHex("#CECECE"), -- dropdown.border
		DropdownOption = Color3.fromHex("#3B3B3B"), -- dropdown.foreground

		Keybind = Color3.fromHex("#FFFFFF"), -- input.background

		Input = Color3.fromHex("#FFFFFF"), -- input.background
		InputFocused = Color3.fromHex("#FFFFFF"), -- input.background
		InputIndicator = Color3.fromHex("#767676"), -- input.placeholderForeground

		Dialog = Color3.fromHex("#F8F8F8"), -- editorWidget.background
		DialogHolder = Color3.fromHex("#FFFFFF"), -- editor.background
		DialogHolderLine = Color3.fromHex("#E5E5E5"), -- panel.border
		DialogButton = Color3.fromHex("#E5E5E5"), -- button.secondaryBackground
		DialogButtonBorder = Color3.fromHex("#CECECE"), -- button.border
		DialogBorder = Color3.fromHex("#E5E5E5"), -- notifications.border
		DialogInput = Color3.fromHex("#FFFFFF"), -- input.background
		DialogInputLine = Color3.fromHex("#005FB8"), -- focusBorder

		Text = Color3.fromHex("#3B3B3B"), -- foreground
		SubText = Color3.fromHex("#616161"), -- activityBar.inactiveForeground
		Hover = Color3.fromHex("#F2F2F2"), -- list.hoverBackground
		HoverChange = 0.1
	},
	["VSC Light+"] = {
		Accent = Color3.fromHex("#795E26"), -- Function declarations color

		AcrylicMain = Color3.fromHex("#FFFFFF"), -- editor.background
		AcrylicBorder = Color3.fromHex("#D4D4D4"), -- menu.border
		AcrylicGradient = ColorSequence.new(Color3.fromHex("#FFFFFF"), Color3.fromHex("#FFFFFF")),
		AcrylicNoise = 1,

		TitleBarLine = Color3.fromHex("#D4D4D4"), -- menu.border
		Tab = Color3.fromHex("#000000"), -- editor.foreground

		Element = Color3.fromHex("#F3F3F3"), -- editorSuggestWidget.background
		ElementBorder = Color3.fromHex("#CECECE"), -- searchEditor.textInputBorder
		InElementBorder = Color3.fromHex("#795E26"), -- Function color as accent
		ElementTransparency = 0,

		ToggleSlider = Color3.fromHex("#795E26"), -- Function color as accent
		ToggleToggled = Color3.fromHex("#FFFFFF"), -- editor.background

		SliderRail = Color3.fromHex("#795E26"), -- Function color as accent

		DropdownFrame = Color3.fromHex("#FFFFFF"), -- editor.background
		DropdownHolder = Color3.fromHex("#FFFFFF"), -- editor.background
		DropdownBorder = Color3.fromHex("#CECECE"), -- searchEditor.textInputBorder
		DropdownOption = Color3.fromHex("#001080"), -- Variable color

		Keybind = Color3.fromHex("#FFFFFF"), -- editor.background

		Input = Color3.fromHex("#FFFFFF"), -- editor.background
		InputFocused = Color3.fromHex("#FFFFFF"), -- editor.background
		InputIndicator = Color3.fromHex("#767676"), -- input.placeholderForeground

		Dialog = Color3.fromHex("#F3F3F3"), -- editorSuggestWidget.background
		DialogHolder = Color3.fromHex("#FFFFFF"), -- editor.background
		DialogHolderLine = Color3.fromHex("#D4D4D4"), -- menu.border
		DialogButton = Color3.fromHex("#F3F3F3"), -- editorSuggestWidget.background
		DialogButtonBorder = Color3.fromHex("#CECECE"), -- searchEditor.textInputBorder
		DialogBorder = Color3.fromHex("#D4D4D4"), -- menu.border
		DialogInput = Color3.fromHex("#FFFFFF"), -- editor.background
		DialogInputLine = Color3.fromHex("#795E26"), -- Function color as accent

		Text = Color3.fromHex("#000000"), -- editor.foreground
		SubText = Color3.fromHex("#6F6F6F"), -- sideBarTitle.foreground
		Hover = Color3.fromHex("#E8E8E8"), -- list.hoverBackground
		HoverChange = 0.1
	},
	["VSC Red"] = {
		Accent = Color3.fromHex("#cc3333"), -- badge.background

		AcrylicMain = Color3.fromHex("#580000"), -- activityBar.background
		AcrylicBorder = Color3.fromHex("#ff6666"), -- focusBorder
		AcrylicGradient = ColorSequence.new(Color3.fromHex("#580000"), Color3.fromHex("#580000")),
		AcrylicNoise = 1,

		TitleBarLine = Color3.fromHex("#772222"), -- titleBar.inactiveBackground
		Tab = Color3.fromHex("#F8F8F8"), -- editor.foreground

		Element = Color3.fromHex("#580000"), -- dropdown.background
		ElementBorder = Color3.fromHex("#ff6666"), -- editorGroup.border
		InElementBorder = Color3.fromHex("#cc0000"), -- inputOption.activeBorder
		ElementTransparency = 0,

		ToggleSlider = Color3.fromHex("#cc3333"), -- badge.background
		ToggleToggled = Color3.fromHex("#300000"), -- editorWidget.background

		SliderRail = Color3.fromHex("#cc3333"), -- badge.background

		DropdownFrame = Color3.fromHex("#580000"), -- dropdown.background
		DropdownHolder = Color3.fromHex("#580000"), -- dropdown.background
		DropdownBorder = Color3.fromHex("#220000"), -- editorSuggestWidget.border
		DropdownOption = Color3.fromHex("#F8F8F8"), -- editor.foreground

		Keybind = Color3.fromHex("#580000"), -- dropdown.background

		Input = Color3.fromHex("#580000"), -- input.background
		InputFocused = Color3.fromHex("#580000"), -- input.background
		InputIndicator = Color3.fromHex("#c10000"), -- editorWhitespace.foreground

		Dialog = Color3.fromHex("#300000"), -- editorWidget.background
		DialogHolder = Color3.fromHex("#300000"), -- editorWidget.background
		DialogHolderLine = Color3.fromHex("#ff0000"), -- peekView.border
		DialogButton = Color3.fromHex("#833333"), -- button.background
		DialogButtonBorder = Color3.fromHex("#662222"), -- list.dropBackground
		DialogBorder = Color3.fromHex("#220000"), -- editorSuggestWidget.border
		DialogInput = Color3.fromHex("#580000"), -- input.background
		DialogInputLine = Color3.fromHex("#cc3333"), -- badge.background

		Text = Color3.fromHex("#F8F8F8"), -- editor.foreground
		SubText = Color3.fromHex("#e7c0c0"), -- comment color from tokenColors
		Hover = Color3.fromHex("#800000"), -- list.hoverBackground
		HoverChange = 0.1
	},
	["Vynixu"] = {
		Accent = Color3.fromRGB(90, 235, 45),

		AcrylicMain = Color3.fromRGB(30, 30, 30),
		AcrylicBorder = Color3.fromRGB(60, 60, 60),
		AcrylicGradient = ColorSequence.new(Color3.fromRGB(25, 25, 25), Color3.fromRGB(15, 15, 15)),
		AcrylicNoise = 0.94,

		TitleBarLine = Color3.fromRGB(65, 65, 65),
		Tab = Color3.fromRGB(100, 100, 100),

		Element = Color3.fromRGB(70, 70, 70),
		ElementBorder = Color3.fromRGB(25, 25, 25),
		InElementBorder = Color3.fromRGB(55, 55, 55),
		ElementTransparency = 0.82,

		DropdownFrame = Color3.fromRGB(120, 120, 120),
		DropdownHolder = Color3.fromRGB(35, 35, 35),
		DropdownBorder = Color3.fromRGB(25, 25, 25),

		Dialog = Color3.fromRGB(35, 35, 35),
		DialogHolder = Color3.fromRGB(25, 25, 25),
		DialogHolderLine = Color3.fromRGB(20, 20, 20),
		DialogButton = Color3.fromRGB(35, 35, 35),
		DialogButtonBorder = Color3.fromRGB(55, 55, 55),
		DialogBorder = Color3.fromRGB(50, 50, 50),
		DialogInput = Color3.fromRGB(45, 45, 45),
		DialogInputLine = Color3.fromRGB(120, 120, 120)
	},
	["Yaru Dark"] = {
		Accent = Color3.fromHex("#e95420"),

		AcrylicMain = Color3.fromHex("#383838"),
		AcrylicBorder = Color3.fromHex("#444444"),
		AcrylicGradient = ColorSequence.new(Color3.fromHex("#383838"), Color3.fromHex("#383838")),
		AcrylicNoise = 1,

		TitleBarLine = Color3.fromHex("#444444"),
		Tab = Color3.fromHex("#FFFFFF"),

		Element = Color3.fromHex("#484848"),
		ElementBorder = Color3.fromHex("#404040"),
		InElementBorder = Color3.fromHex("#e95420"),
		ElementTransparency = 0,

		ToggleSlider = Color3.fromHex("#e95420"),
		ToggleToggled = Color3.fromHex("#2f2f2f"),

		SliderRail = Color3.fromHex("#e95420"),

		DropdownFrame = Color3.fromHex("#484848"),
		DropdownHolder = Color3.fromHex("#484848"),
		DropdownBorder = Color3.fromHex("#404040"),
		DropdownOption = Color3.fromHex("#FFFFFF"),

		Keybind = Color3.fromHex("#484848"),

		Input = Color3.fromHex("#484848"),
		InputFocused = Color3.fromHex("#484848"),
		InputIndicator = Color3.fromHex("#636e7b"),

		Dialog = Color3.fromHex("#434343"),
		DialogHolder = Color3.fromHex("#2f2f2f"),
		DialogHolderLine = Color3.fromHex("#404040"),
		DialogButton = Color3.fromHex("#484848"),
		DialogButtonBorder = Color3.fromHex("#404040"),
		DialogBorder = Color3.fromHex("#444444"),
		DialogInput = Color3.fromHex("#484848"),
		DialogInputLine = Color3.fromHex("#e95420"),

		Text = Color3.fromHex("#FFFFFF"),
		SubText = Color3.fromHex("#808080"),
		Hover = Color3.fromHex("#575757"),
		HoverChange = 0.1
	},
	["Yaru"] = {
		Accent = Color3.fromHex("#e95420"),

		AcrylicMain = Color3.fromHex("#edeef0"),
		AcrylicBorder = Color3.fromHex("#D4D4D4"),
		AcrylicGradient = ColorSequence.new(Color3.fromHex("#edeef0"), Color3.fromHex("#edeef0")),
		AcrylicNoise = 1,

		TitleBarLine = Color3.fromHex("#D4D4D4"),
		Tab = Color3.fromHex("#111111"),

		Element = Color3.fromHex("#FFFFFF"),
		ElementBorder = Color3.fromHex("#CECECE"),
		InElementBorder = Color3.fromHex("#e95420"),
		ElementTransparency = 0,

		ToggleSlider = Color3.fromHex("#e95420"),
		ToggleToggled = Color3.fromHex("#FFFFFF"),

		SliderRail = Color3.fromHex("#e95420"),

		DropdownFrame = Color3.fromHex("#FFFFFF"),
		DropdownHolder = Color3.fromHex("#FFFFFF"),
		DropdownBorder = Color3.fromHex("#CECECE"),
		DropdownOption = Color3.fromHex("#111111"),

		Keybind = Color3.fromHex("#FFFFFF"),

		Input = Color3.fromHex("#FFFFFF"),
		InputFocused = Color3.fromHex("#FFFFFF"),
		InputIndicator = Color3.fromHex("#767676"),

		Dialog = Color3.fromHex("#f6f6f6"),
		DialogHolder = Color3.fromHex("#FFFFFF"),
		DialogHolderLine = Color3.fromHex("#D4D4D4"),
		DialogButton = Color3.fromHex("#f6f6f6"),
		DialogButtonBorder = Color3.fromHex("#CECECE"),
		DialogBorder = Color3.fromHex("#D4D4D4"),
		DialogInput = Color3.fromHex("#FFFFFF"),
		DialogInputLine = Color3.fromHex("#e95420"),

		Text = Color3.fromHex("#111111"),
		SubText = Color3.fromHex("#6F6F6F"),
		Hover = Color3.fromHex("#E8E8E8"),
		HoverChange = 0.1
	},
}

local function isMotor(value)
	local motorType = tostring(value):match("^Motor%((.+)%)$")

	if motorType then
		return true, motorType
	else
		return false
	end
end

local Connection = {} do
	Connection.__index = Connection

	function Connection.new(signal, handler)
		return setmetatable({
			signal = signal,
			connected = true,
			_handler = handler,
		}, Connection)
	end

	function Connection:disconnect()
		if self.connected then
			self.connected = false

			for index, connection in pairs(self.signal._connections) do
				if connection == self then
					table.remove(self.signal._connections, index)
					return
				end
			end
		end
	end
end

local Signal = {} do
	Signal.__index = Signal

	function Signal.new()
		return setmetatable({
			_connections = {},
			_threads = {},
		}, Signal)
	end

	function Signal:Fire(...)
		for _, connection in pairs(self._connections) do
			connection._handler(...)
		end

		for _, thread in pairs(self._threads) do
			coroutine.resume(thread, ...)
		end

		self._threads = {}
	end
	
	function Signal:fire(...)
		for _, connection in pairs(self._connections) do
			connection._handler(...)
		end

		for _, thread in pairs(self._threads) do
			coroutine.resume(thread, ...)
		end

		self._threads = {}
	end
	
	function Signal:Connect(handler)
		local connection = Connection.new(self, handler)
		table.insert(self._connections, connection)
		return connection
	end
	
	function Signal:connect(handler)
		local connection = Connection.new(self, handler)
		table.insert(self._connections, connection)
		return connection
	end

	function Signal:Wait()
		table.insert(self._threads, coroutine.running())
		return coroutine.yield()
	end
	
	function Signal:wait()
		table.insert(self._threads, coroutine.running())
		return coroutine.yield()
	end
end

local Linear = {} do
	Linear.__index = Linear

	function Linear.new(targetValue, options)
		assert(targetValue, "Missing argument #1: targetValue")

		options = options or {}

		return setmetatable({
			_targetValue = targetValue,
			_velocity = options.velocity or 1,
		}, Linear)
	end

	function Linear:step(state, dt)
		local position = state.value
		local velocity = self._velocity -- Linear motion ignores the state's velocity
		local goal = self._targetValue

		local dPos = dt * velocity

		local complete = dPos >= math.abs(goal - position)
		position = position + dPos * (goal > position and 1 or -1)
		if complete then
			position = self._targetValue
			velocity = 0
		end

		return {
			complete = complete,
			value = position,
			velocity = velocity,
		}
	end
end

local Instant = {} do
	Instant.__index = Instant

	function Instant.new(targetValue)
		return setmetatable({
			_targetValue = targetValue,
		}, Instant)
	end

	function Instant:step()
		return {
			complete = true,
			value = self._targetValue,
		}
	end
end

local VELOCITY_THRESHOLD = 0.001
local POSITION_THRESHOLD = 0.001

local VELOCITY_THRESHOLD = 0.001
local POSITION_THRESHOLD = 0.001

local EPS = 0.0001

local Spring = {} do
	Spring.__index = Spring

	function Spring.new(targetValue, options)
		assert(targetValue, "Missing argument #1: targetValue")
		options = options or {}

		return setmetatable({
			_targetValue = targetValue,
			_frequency = options.frequency or 4,
			_dampingRatio = options.dampingRatio or 1,
		}, Spring)
	end

	function Spring:step(state, dt)
		-- Copyright 2018 Parker Stebbins (parker@fractality.io)
		-- github.com/Fraktality/Spring
		-- Distributed under the MIT license

		local d = self._dampingRatio
		local f = self._frequency * 2 * math.pi
		local g = self._targetValue
		local p0 = state.value
		local v0 = state.velocity or 0

		local offset = p0 - g
		local decay = math.exp(-d * f * dt)

		local p1, v1

		if d == 1 then -- Critically damped
			p1 = (offset * (1 + f * dt) + v0 * dt) * decay + g
			v1 = (v0 * (1 - f * dt) - offset * (f * f * dt)) * decay
		elseif d < 1 then -- Underdamped
			local c = math.sqrt(1 - d * d)

			local i = math.cos(f * c * dt)
			local j = math.sin(f * c * dt)

			-- Damping ratios approaching 1 can cause division by small numbers.
			-- To fix that, group terms around z=j/c and find an approximation for z.
			-- Start with the definition of z:
			--    z = sin(dt*f*c)/c
			-- Substitute a=dt*f:
			--    z = sin(a*c)/c
			-- Take the Maclaurin expansion of z with respect to c:
			--    z = a - (a^3*c^2)/6 + (a^5*c^4)/120 + O(c^6)
			--    z ≈ a - (a^3*c^2)/6 + (a^5*c^4)/120
			-- Rewrite in Horner form:
			--    z ≈ a + ((a*a)*(c*c)*(c*c)/20 - c*c)*(a*a*a)/6

			local z
			if c > EPS then
				z = j / c
			else
				local a = dt * f
				z = a + ((a * a) * (c * c) * (c * c) / 20 - c * c) * (a * a * a) / 6
			end

			-- Frequencies approaching 0 present a similar problem.
			-- We want an approximation for y as f approaches 0, where:
			--    y = sin(dt*f*c)/(f*c)
			-- Substitute b=dt*c:
			--    y = sin(b*c)/b
			-- Now reapply the process from z.

			local y
			if f * c > EPS then
				y = j / (f * c)
			else
				local b = f * c
				y = dt + ((dt * dt) * (b * b) * (b * b) / 20 - b * b) * (dt * dt * dt) / 6
			end

			p1 = (offset * (i + d * z) + v0 * y) * decay + g
			v1 = (v0 * (i - z * d) - offset * (z * f)) * decay
		else -- Overdamped
			local c = math.sqrt(d * d - 1)

			local r1 = -f * (d - c)
			local r2 = -f * (d + c)

			local co2 = (v0 - offset * r1) / (2 * f * c)
			local co1 = offset - co2

			local e1 = co1 * math.exp(r1 * dt)
			local e2 = co2 * math.exp(r2 * dt)

			p1 = e1 + e2 + g
			v1 = e1 * r1 + e2 * r2
		end

		local complete = math.abs(v1) < VELOCITY_THRESHOLD and math.abs(p1 - g) < POSITION_THRESHOLD

		return {
			complete = complete,
			value = complete and g or p1,
			velocity = v1,
		}
	end
end

local noop = function() end

local BaseMotor = {} do
	BaseMotor.__index = BaseMotor

	function BaseMotor.new()
		return setmetatable({
			_onStep = Signal.new(),
			_onStart = Signal.new(),
			_onComplete = Signal.new(),
		}, BaseMotor)
	end

	function BaseMotor:onStep(handler)
		return self._onStep:connect(handler)
	end

	function BaseMotor:onStart(handler)
		return self._onStart:connect(handler)
	end

	function BaseMotor:onComplete(handler)
		return self._onComplete:connect(handler)
	end

	function BaseMotor:start()
		if not self._connection then
			self._connection = RunService.RenderStepped:Connect(function(deltaTime)
				self:step(deltaTime)
			end)
		end
	end

	function BaseMotor:stop()
		if self._connection then
			self._connection:Disconnect()
			self._connection = nil
		end
	end

	BaseMotor.destroy = BaseMotor.stop

	BaseMotor.step = noop
	BaseMotor.getValue = noop
	BaseMotor.setGoal = noop

	function BaseMotor:__tostring()
		return "Motor"
	end
end

local SingleMotor = setmetatable({}, BaseMotor)
SingleMotor.__index = SingleMotor

function SingleMotor.new(initialValue, useImplicitConnections)
	assert(initialValue, "Missing argument #1: initialValue")
	assert(typeof(initialValue) == "number", "initialValue must be a number!")

	local self = setmetatable(BaseMotor.new(), SingleMotor)

	if useImplicitConnections ~= nil then
		self._useImplicitConnections = useImplicitConnections
	else
		self._useImplicitConnections = true
	end

	self._goal = nil
	self._state = {
		complete = true,
		value = initialValue,
	}

	return self
end

function SingleMotor:step(deltaTime)
	if self._state.complete then
		return true
	end

	local newState = self._goal:step(self._state, deltaTime)

	self._state = newState
	self._onStep:fire(newState.value)

	if newState.complete then
		if self._useImplicitConnections then
			self:stop()
		end

		self._onComplete:fire()
	end

	return newState.complete
end

function SingleMotor:getValue()
	return self._state.value
end

function SingleMotor:setGoal(goal)
	self._state.complete = false
	self._goal = goal

	self._onStart:fire()

	if self._useImplicitConnections then
		self:start()
	end
end

function SingleMotor:__tostring()
	return "Motor(Single)"
end

local GroupMotor = setmetatable({}, BaseMotor)
GroupMotor.__index = GroupMotor

local function toMotor(value)
	if isMotor(value) then
		return value
	end

	local valueType = typeof(value)

	if valueType == "number" then
		return SingleMotor.new(value, false)
	elseif valueType == "table" then
		return GroupMotor.new(value, false)
	end

	error(("Unable to convert %q to motor; type %s is unsupported"):format(value, valueType), 2)
end

function GroupMotor.new(initialValues, useImplicitConnections)
	assert(initialValues, "Missing argument #1: initialValues")
	assert(typeof(initialValues) == "table", "initialValues must be a table!")
	assert(
		not initialValues.step,
		'initialValues contains disallowed property "step". Did you mean to put a table of values here?'
	)

	local self = setmetatable(BaseMotor.new(), GroupMotor)

	if useImplicitConnections ~= nil then
		self._useImplicitConnections = useImplicitConnections
	else
		self._useImplicitConnections = true
	end

	self._complete = true
	self._motors = {}

	for key, value in pairs(initialValues) do
		self._motors[key] = toMotor(value)
	end

	return self
end

function GroupMotor:step(deltaTime)
	if self._complete then
		return true
	end

	local allMotorsComplete = true

	for _, motor in pairs(self._motors) do
		local complete = motor:step(deltaTime)
		if not complete then
			-- If any of the sub-motors are incomplete, the group motor will not be complete either
			allMotorsComplete = false
		end
	end

	self._onStep:fire(self:getValue())

	if allMotorsComplete then
		if self._useImplicitConnections then
			self:stop()
		end

		self._complete = true
		self._onComplete:fire()
	end

	return allMotorsComplete
end

function GroupMotor:setGoal(goals)
	assert(not goals.step, 'goals contains disallowed property "step". Did you mean to put a table of goals here?')

	self._complete = false
	self._onStart:fire()

	for key, goal in pairs(goals) do
		local motor = assert(self._motors[key], ("Unknown motor for key %s"):format(key))
		motor:setGoal(goal)
	end

	if self._useImplicitConnections then
		self:start()
	end
end

function GroupMotor:getValue()
	local values = {}

	for key, motor in pairs(self._motors) do
		values[key] = motor:getValue()
	end

	return values
end

function GroupMotor:__tostring()
	return "Motor(Group)"
end

local Flipper = {
	SingleMotor = SingleMotor,
	GroupMotor = GroupMotor,

	Instant = Instant,
	Linear = Linear,
	Spring = Spring,

	isMotor = isMotor,
}

local Creator = {
	Registry = {},
	Signals = {},
	TransparencyMotors = {},
	DefaultProperties = {
		ScreenGui = {
			ResetOnSpawn = false,
			ZIndexBehavior = Enum.ZIndexBehavior.Sibling,
		},
		Frame = {
			BackgroundColor3 = Color3.new(1, 1, 1),
			BorderColor3 = Color3.new(0, 0, 0),
			BorderSizePixel = 0,
		},
		ScrollingFrame = {
			BackgroundColor3 = Color3.new(1, 1, 1),
			BorderColor3 = Color3.new(0, 0, 0),
			ScrollBarImageColor3 = Color3.new(0, 0, 0),
		},
		TextLabel = {
			BackgroundColor3 = Color3.new(1, 1, 1),
			BorderColor3 = Color3.new(0, 0, 0),
			Font = Enum.Font.SourceSans,
			Text = "",
			TextColor3 = Color3.new(0, 0, 0),
			BackgroundTransparency = 1,
			TextSize = 14,
			RichText = true,
		},
		TextButton = {
			BackgroundColor3 = Color3.new(1, 1, 1),
			BorderColor3 = Color3.new(0, 0, 0),
			AutoButtonColor = false,
			Font = Enum.Font.SourceSans,
			Text = "",
			TextColor3 = Color3.new(0, 0, 0),
			TextSize = 14,
			RichText = true,
		},
		TextBox = {
			BackgroundColor3 = Color3.new(1, 1, 1),
			BorderColor3 = Color3.new(0, 0, 0),
			ClearTextOnFocus = false,
			Font = Enum.Font.SourceSans,
			Text = "",
			TextColor3 = Color3.new(0, 0, 0),
			TextSize = 14,
			RichText = true,
		},
		ImageLabel = {
			BackgroundTransparency = 1,
			BackgroundColor3 = Color3.new(1, 1, 1),
			BorderColor3 = Color3.new(0, 0, 0),
			BorderSizePixel = 0,
		},
		ImageButton = {
			BackgroundColor3 = Color3.new(1, 1, 1),
			BorderColor3 = Color3.new(0, 0, 0),
			AutoButtonColor = false,
		},
		CanvasGroup = {
			BackgroundColor3 = Color3.new(1, 1, 1),
			BorderColor3 = Color3.new(0, 0, 0),
			BorderSizePixel = 0,
		}
	},
	Theme = {
		Updating = false,
		Updated = Signal.new()
	}
}

local Library = {
	Version = "1.0.5",

	OpenFrames = {},
	Options = {},
	Themes = Themes.Names,

	OnUnload = Signal.new(),
	PostUnload = Signal.new(),
	ThemeChanged = Signal.new(),
	CreatedWindow = nil,
	WindowFrame = nil,
	UIContainer = nil,
	Utilities = {
		Themes = Themes,
		Shared = SharedTable,
		Creator = Creator,
		Icons = loadstring(game:HttpGet("https://raw.githubusercontent.com/xQuartyx/Fluent-Renewed/main/Src/Modules/Icons.luau"))()
	},
	Connections = Creator.Signals,
	Unloaded = false,
	Loaded = true,

	Theme = "Dark",
	DialogOpen = false,
	UseAcrylic = false,
	Acrylic = false,
	Transparency = true,
	MinimizeKey = Enum.KeyCode.LeftControl,

	GUI = nil
}

local function ApplyCustomProps(Object, Props: { [string]: any }?)
	if typeof(Props) == "table" and Props.ThemeTag then
		Creator.AddThemeObject(Object, Props.ThemeTag)
	end
end

function Creator.AddSignal(Signal: RBXScriptSignal, Function)
	Creator.Signals[#Creator.Signals+1] = Signal:Connect(Function)
end

function Creator.Disconnect()
	for Idx = #Creator.Signals, 1, -1 do
		local Connection = table.remove(Creator.Signals, Idx)

		if Connection then
			Connection:Disconnect()
		end
	end
end

function Creator.GetThemeProperty(Property)
	if Themes[Library.Theme][Property] then
		return Themes[Library.Theme][Property]
	end

	return Themes["Dark"][Property]
end

function Creator.UpdateTheme(RegistryIndex: Instance?)
	if Creator.Theme.Updating then
		Creator.Theme.Updated:Wait()
	end

	Creator.Theme.Updating = true

	local Count = 0

	if typeof(RegistryIndex) == "Instance" and Creator.Registry[RegistryIndex] then
		for Property, ColorIdx in next, Creator.Registry[RegistryIndex].Properties do
			Count += 1

			if Count % 135 == 0 then
				task.wait()
			end

			RegistryIndex[Property] = Creator.GetThemeProperty(ColorIdx)
		end
	else
		for _, Object in next, Creator.Registry do
			Count += 1

			if Count % 135 == 0 then
				task.wait()
			end

			for Property, ColorIdx in next, Object.Properties do
				Count += 1

				if Count % 135 == 0 then
					task.wait()
				end

				Object.Object[Property] = Creator.GetThemeProperty(ColorIdx)
			end
		end
	end	

	for Idx: number, Motor in next, Creator.TransparencyMotors do
		if Idx % 135 == 0 then
			task.wait()
		end

		Motor:setGoal(Flipper.Instant.new(Creator.GetThemeProperty("ElementTransparency")))
	end

	Creator.Theme.Updating = false
	Creator.Theme.Updated:Fire()
end

function Creator.AddThemeObject(Object: Instance, Properties:{ [string]: any })
	local Idx = #Creator.Registry + 1
	local Data = {
		Object = Object,
		Properties = Properties,
		Idx = Idx,
	}

	Creator.Registry[Object] = Data
	Creator.UpdateTheme(Object)

	return Object
end

function Creator.OverrideTag(Object, Properties)
	Creator.Registry[Object].Properties = Properties
	Creator.UpdateTheme(Object)
end

function Creator.New(Name, Properties: { [string]: any }?, Children: { [number]: Instance }?): Instance
	local Object = Instance.new(Name)

	-- Default properties
	for Name, Value in next, Creator.DefaultProperties[Name] or {} do
		Object[Name] = Value
	end

	-- Properties
	for Name, Value in next, Properties or {} do
		if Name ~= "ThemeTag" then
			Object[Name] = Value
		end
	end

	-- Children
	for _, Child in next, Children or {} do
		Child.Parent = Object
	end

	ApplyCustomProps(Object, Properties)

	return Object
end

function Creator.SpringMotor(Initial: any, Instance: Object, Prop: string, IgnoreDialogCheck: boolean?, ResetOnThemeChange: boolean?)
	IgnoreDialogCheck = IgnoreDialogCheck or false
	ResetOnThemeChange = ResetOnThemeChange or false
	local Motor = Flipper.SingleMotor.new(Initial)
	Motor:onStep(function(value)
		Instance[Prop] = value
	end)

	if ResetOnThemeChange then
		Creator.TransparencyMotors[#Creator.TransparencyMotors + 1] = Motor
	end

	local function SetValue(Value, Ignore: boolean?)
		Ignore = Ignore or false
		if not IgnoreDialogCheck then
			if not Ignore then
				if Prop == "BackgroundTransparency" and Library.DialogOpen then
					return
				end
			end
		end

		Motor:setGoal(Flipper.Spring.new(Value, { frequency = 8 }))
	end

	return Motor, SetValue
end

local New = Creator.New

local function map(value, inMin, inMax, outMin, outMax)
	return (value - inMin) * (outMax - outMin) / (inMax - inMin) + outMin
end

local function viewportPointToWorld(location, distance)
	local unitRay = game:GetService("Workspace").CurrentCamera:ScreenPointToRay(location.X, location.Y)
	return unitRay.Origin + unitRay.Direction * distance
end

local function getOffset()
	local viewportSizeY = game:GetService("Workspace").CurrentCamera.ViewportSize.Y
	return map(viewportSizeY, 0, 2560, 8, 56)
end

local function createAcrylic()
	local Part = New("Part", {
		Name = "Body",
		Color = Color3.new(0, 0, 0),
		Material = Enum.Material.Glass,
		Size = Vector3.new(1, 1, 0),
		Anchored = true,
		CanCollide = false,
		Locked = true,
		CastShadow = false,
		Transparency = 0.98,
	}, {
		New("SpecialMesh", {
			MeshType = Enum.MeshType.Brick,
			Offset = Vector3.new(0, 0, -0.000001),
		})
	})

	return Part
end

local BlurFolder = Instance.new("Folder", game:GetService("Workspace").CurrentCamera)

local function createAcrylicBlur(distance)
	local cleanups = {}

	distance = distance or 0.001
	local positions = {
		topLeft = Vector2.new(),
		topRight = Vector2.new(),
		bottomRight = Vector2.new(),
	}
	local model = createAcrylic()
	local mesh = model:FindFirstChildWhichIsA("SpecialMesh")

	model.Parent = BlurFolder

	local function updatePositions(size, position)
		positions.topLeft = position
		positions.topRight = position + Vector2.new(size.X, 0)
		positions.bottomRight = position + size
	end

	local function render()
		local camera = game:GetService("Workspace").CurrentCamera
		local cameraTransform = if camera then camera.CFrame else CFrame.identity

		local topLeft = positions.topLeft
		local topRight = positions.topRight
		local bottomRight = positions.bottomRight

		local topLeft3D = viewportPointToWorld(topLeft, distance)
		local topRight3D = viewportPointToWorld(topRight, distance)
		local bottomRight3D = viewportPointToWorld(bottomRight, distance)

		local width = (topRight3D - topLeft3D).Magnitude
		local height = (topRight3D - bottomRight3D).Magnitude

		model.CFrame =
			CFrame.fromMatrix((topLeft3D + bottomRight3D) / 2, cameraTransform.XVector, cameraTransform.YVector, cameraTransform.ZVector)

		if mesh then
			mesh.Scale = Vector3.new(width, height, 0)
		end
	end

	local function onChange(rbx)
		local offset = getOffset()
		local size = rbx.AbsoluteSize - Vector2.new(offset, offset)
		local position = rbx.AbsolutePosition + Vector2.new(offset / 2, offset / 2)

		updatePositions(size, position)
		task.spawn(render)
	end

	local function renderOnChange()
		local camera = game:GetService("Workspace").CurrentCamera
		if not camera then
			return
		end

		cleanups[#cleanups + 1] = camera:GetPropertyChangedSignal("CFrame"):Connect(render)
		cleanups[#cleanups + 1] = camera:GetPropertyChangedSignal("ViewportSize"):Connect(render)
		cleanups[#cleanups + 1] = camera:GetPropertyChangedSignal("FieldOfView"):Connect(render)
		task.spawn(render)
	end

	model.Destroying:Connect(function()
		for _, item in cleanups do
			pcall(function()
				item:Disconnect()
			end)
		end
	end)

	renderOnChange()

	return onChange, model
end

function AcrylicBlur(distance)
	local Blur = {}
	local onChange, model = createAcrylicBlur(distance)

	local comp = Creator.New("Frame", {
		BackgroundTransparency = 1,
		Size = UDim2.fromScale(1, 1),
	})

	Creator.AddSignal(comp:GetPropertyChangedSignal("AbsolutePosition"), function()
		onChange(comp)
	end)

	Creator.AddSignal(comp:GetPropertyChangedSignal("AbsoluteSize"), function()
		onChange(comp)
	end)

	Blur.AddParent = function(Parent)
		Creator.AddSignal(Parent:GetPropertyChangedSignal("Visible"), function()
			Blur.SetVisibility(Parent.Visible)
		end)
	end

	Blur.SetVisibility = function(Value)
		model.Transparency = Value and 0.98 or 1
	end

	Blur.Frame = comp
	Blur.Model = model

	return Blur
end

local Acrylic = {
	AcrylicBlur = AcrylicBlur,
	CreateAcrylic = createAcrylicBlur,
	AcrylicPaint = function(props)
		local AcrylicPaint = {}

		AcrylicPaint.Frame = Creator.New("Frame", {
			Size = UDim2.fromScale(1, 1),
			BackgroundTransparency = 0.9,
			BackgroundColor3 = Color3.fromRGB(255, 255, 255),
			BorderSizePixel = 0,
		}, {
			Creator.New("ImageLabel", {
				Image = "rbxassetid://8992230677",
				ScaleType = "Slice",
				SliceCenter = Rect.new(Vector2.new(99, 99), Vector2.new(99, 99)),
				AnchorPoint = Vector2.new(0.5, 0.5),
				Size = UDim2.new(1, 120, 1, 116),
				Position = UDim2.new(0.5, 0, 0.5, 0),
				BackgroundTransparency = 1,
				ImageColor3 = Color3.fromRGB(0, 0, 0),
				ImageTransparency = 0.7,
			}),

			Creator.New("UICorner", {
				CornerRadius = UDim.new(0, 8),
			}),

			Creator.New("Frame", {
				BackgroundTransparency = 0.45,
				Size = UDim2.fromScale(1, 1),
				Name = "Background",
				ThemeTag = {
					BackgroundColor3 = "AcrylicMain",
				},
			}, {
				Creator.New("UICorner", {
					CornerRadius = UDim.new(0, 8),
				}),
			}),

			Creator.New("Frame", {
				BackgroundColor3 = Color3.fromRGB(255, 255, 255),
				BackgroundTransparency = 0.4,
				Size = UDim2.fromScale(1, 1),
			}, {
				Creator.New("UICorner", {
					CornerRadius = UDim.new(0, 8),
				}),

				Creator.New("UIGradient", {
					Rotation = 90,
					ThemeTag = {
						Color = "AcrylicGradient",
					},
				}),
			}),

			Creator.New("ImageLabel", {
				Image = "rbxassetid://9968344105",
				ImageTransparency = 0.98,
				ScaleType = Enum.ScaleType.Tile,
				TileSize = UDim2.new(0, 128, 0, 128),
				Size = UDim2.fromScale(1, 1),
				BackgroundTransparency = 1,
			}, {
				Creator.New("UICorner", {
					CornerRadius = UDim.new(0, 8),
				}),
			}),

			Creator.New("ImageLabel", {
				Image = "rbxassetid://9968344227",
				ImageTransparency = 0.9,
				ScaleType = Enum.ScaleType.Tile,
				TileSize = UDim2.new(0, 128, 0, 128),
				Size = UDim2.fromScale(1, 1),
				BackgroundTransparency = 1,
				ThemeTag = {
					ImageTransparency = "AcrylicNoise",
				},
			}, {
				Creator.New("UICorner", {
					CornerRadius = UDim.new(0, 8),
				}),
			}),

			Creator.New("Frame", {
				BackgroundTransparency = 1,
				Size = UDim2.fromScale(1, 1),
				ZIndex = 2,
			}, {
				Creator.New("UICorner", {
					CornerRadius = UDim.new(0, 8),
				}),
				Creator.New("UIStroke", {
					Transparency = 0.5,
					Thickness = 1,
					ThemeTag = {
						Color = "AcrylicBorder",
					},
				}),
			}),
		})

		local Blur

		if Library.UseAcrylic then
			Blur = AcrylicBlur()
			Blur.Frame.Parent = AcrylicPaint.Frame
			AcrylicPaint.Model = Blur.Model
			AcrylicPaint.AddParent = Blur.AddParent
			AcrylicPaint.SetVisibility = Blur.SetVisibility
		end

		return AcrylicPaint
	end,
}

function Acrylic.init()
	local baseEffect = Instance.new("DepthOfFieldEffect")
	baseEffect.FarIntensity = 0
	baseEffect.InFocusRadius = 0.1
	baseEffect.NearIntensity = 1

	local depthOfFieldDefaults = {}

	function Acrylic.Enable()
		for _, effect in next, depthOfFieldDefaults do
			effect.Enabled = false
		end
		baseEffect.Parent = game:GetService("Lighting")
	end

	function Acrylic.Disable()
		for _, effect in next, depthOfFieldDefaults do
			effect.Enabled = effect.enabled
		end
		baseEffect.Parent = nil
	end

	local function registerDefaults()
		local function register(object)
			if object:IsA("DepthOfFieldEffect") then
				depthOfFieldDefaults[object] = { enabled = object.Enabled }
			end
		end

		for _, child in next, game:GetService("Lighting"):GetChildren() do
			register(child)
		end

		if game:GetService("Workspace").CurrentCamera then
			for _, child in next, game:GetService("Workspace").CurrentCamera:GetChildren() do
				register(child)
			end
		end
	end

	registerDefaults()
	Acrylic.Enable()
end

local Components = {}

Components.Assets = { 
	Close = "rbxassetid://9886659671",
	Min = "rbxassetid://9886659276",
	Max = "rbxassetid://9886659406",
	Restore = "rbxassetid://9886659001",
}

function Components.Element(Title, Desc, Parent, Hover, Config)
	local Element = {
		CreatedAt = tick()
	}

	Config = typeof(Config) == "table" and Config or {}

	Element.TitleLabel = New("TextLabel", {
		FontFace = Font.new("rbxasset://fonts/families/GothamSSm.json", Enum.FontWeight.Medium, Enum.FontStyle.Normal),
		Text = Title,
		TextColor3 = Color3.fromRGB(240, 240, 240),
		TextSize = 13,
		TextXAlignment = Config.TitleAlignment or Enum.TextXAlignment.Left,
		Size = UDim2.new(1, 0, 0, 14),
		BackgroundColor3 = Color3.fromRGB(255, 255, 255),
		BackgroundTransparency = 1,
		ThemeTag = {
			TextColor3 = "Text",
		},
	}) :: TextLabel

	Element.DescLabel = New("TextLabel", {
		FontFace = Font.new("rbxasset://fonts/families/GothamSSm.json"),
		Text = Desc,
		TextColor3 = Color3.fromRGB(200, 200, 200),
		TextSize = 12,
		TextWrapped = true,
		TextXAlignment = Config.DescriptionAlignment or Enum.TextXAlignment.Left,
		BackgroundColor3 = Color3.fromRGB(255, 255, 255),
		AutomaticSize = Enum.AutomaticSize.Y,
		BackgroundTransparency = 1,
		Size = UDim2.new(1, 0, 0, 14),
		ThemeTag = {
			TextColor3 = "SubText",
		},
	}) :: TextLabel

	Element.LabelHolder = New("Frame", {
		AutomaticSize = Enum.AutomaticSize.Y,
		BackgroundColor3 = Color3.fromRGB(255, 255, 255),
		BackgroundTransparency = 1,
		Position = UDim2.fromOffset(10, 0),
		Size = UDim2.new(1, -28, 0, 0),
	}, {
		New("UIListLayout", {
			SortOrder = Enum.SortOrder.LayoutOrder,
			VerticalAlignment = Enum.VerticalAlignment.Center,
		}),
		New("UIPadding", {
			PaddingBottom = UDim.new(0, 13),
			PaddingTop = UDim.new(0, 13),
		}),
		Element.TitleLabel,
		Element.DescLabel,
	}) :: Frame

	Element.Border = New("UIStroke", {
		Transparency = 0.5,
		ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
		Color = Color3.fromRGB(0, 0, 0),
		ThemeTag = {
			Color = "ElementBorder",
		},
	}) :: UIStroke

	Element.Frame = New("TextButton", {
		Size = UDim2.new(1, 0, 0, 0),
		BackgroundTransparency = 0.89,
		BackgroundColor3 = Color3.fromRGB(130, 130, 130),
		Parent = Parent,
		AutomaticSize = Enum.AutomaticSize.Y,
		Text = "",
		LayoutOrder = 7,
		ThemeTag = {
			BackgroundColor3 = "Element",
			BackgroundTransparency = "ElementTransparency",
		},
	}, {
		New("UICorner", {
			CornerRadius = UDim.new(0, 4),
		}),
		Element.Border,
		Element.LabelHolder,
	}) :: TextButton

	function Element:SetTitle(Set)
		Element.TitleLabel.Text = Set
	end

	function Element:SetDesc(Set)
		if Set == nil then
			Set = ""
		end
		if Set == "" then
			Element.DescLabel.Visible = false
		else
			Element.DescLabel.Visible = true
		end
		Element.DescLabel.Text = Set
	end

	function Element:Destroy()
		Element.Frame:Destroy()
	end

	Element:SetTitle(Title)
	Element:SetDesc(Desc)

	if Hover then
		local Themes = Library.Themes
		local Motor, SetTransparency = Creator.SpringMotor(
			Creator.GetThemeProperty("ElementTransparency"),
			Element.Frame,
			"BackgroundTransparency",
			false,
			true
		)

		Creator.AddSignal(Element.Frame.MouseEnter, function()
			SetTransparency(Creator.GetThemeProperty("ElementTransparency") - Creator.GetThemeProperty("HoverChange"))
		end)
		Creator.AddSignal(Element.Frame.MouseLeave, function()
			SetTransparency(Creator.GetThemeProperty("ElementTransparency"))
		end)
		Creator.AddSignal(Element.Frame.MouseButton1Down, function()
			SetTransparency(Creator.GetThemeProperty("ElementTransparency") + Creator.GetThemeProperty("HoverChange"))
		end)
		Creator.AddSignal(Element.Frame.MouseButton1Up, function()
			SetTransparency(Creator.GetThemeProperty("ElementTransparency") - Creator.GetThemeProperty("HoverChange"))
		end)
	end

	return setmetatable(Element, {
		__newindex =  function(self, index, newvalue)
			if index == "Title" then
				Element:SetTitle(newvalue)
			elseif index == "Description" or index == "Desc" then
				Element:SetDesc(newvalue)
			end
			return rawset(self, index, newvalue)
		end
	})
end

function Components.Button(Theme, Parent, DialogCheck)
	local Button = {}

	DialogCheck = DialogCheck or false

	Button.Title = New("TextLabel", {
		FontFace = Font.new("rbxasset://fonts/families/GothamSSm.json"),
		TextColor3 = Color3.fromRGB(200, 200, 200),
		TextSize = 14,
		TextWrapped = true,
		TextXAlignment = Enum.TextXAlignment.Center,
		TextYAlignment = Enum.TextYAlignment.Center,
		BackgroundColor3 = Color3.fromRGB(255, 255, 255),
		AutomaticSize = Enum.AutomaticSize.Y,
		BackgroundTransparency = 1,
		Size = UDim2.fromScale(1, 1),
		ThemeTag = {
			TextColor3 = "Text",
		},
	})

	Button.HoverFrame = New("Frame", {
		Size = UDim2.fromScale(1, 1),
		BackgroundTransparency = 1,
		ThemeTag = {
			BackgroundColor3 = "Hover",
		},
	}, {
		New("UICorner", {
			CornerRadius = UDim.new(0, 4),
		}),
	})

	Button.Frame = New("TextButton", {
		Size = UDim2.new(0, 0, 0, 32),
		Parent = Parent,
		ThemeTag = {
			BackgroundColor3 = "DialogButton",
		},
	}, {
		New("UICorner", {
			CornerRadius = UDim.new(0, 4),
		}),
		New("UIStroke", {
			ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
			Transparency = 0.65,
			ThemeTag = {
				Color = "DialogButtonBorder",
			},
		}),
		Button.HoverFrame,
		Button.Title,
	})

	local Motor, SetTransparency = Creator.SpringMotor(1, Button.HoverFrame, "BackgroundTransparency", DialogCheck)
	Creator.AddSignal(Button.Frame.MouseEnter, function()
		SetTransparency(0.97)
	end)
	Creator.AddSignal(Button.Frame.MouseLeave, function()
		SetTransparency(1)
	end)
	Creator.AddSignal(Button.Frame.MouseButton1Down, function()
		SetTransparency(1)
	end)
	Creator.AddSignal(Button.Frame.MouseButton1Up, function()
		SetTransparency(0.97)
	end)

	return Button
end

function Components.Textbox(Parent, Acrylic)
	local Textbox = {}

	Acrylic = Acrylic or false

	Textbox.Input = New("TextBox", {
		FontFace = Font.new("rbxasset://fonts/families/GothamSSm.json"),
		TextColor3 = Color3.fromRGB(200, 200, 200),
		TextSize = 14,
		TextXAlignment = Enum.TextXAlignment.Left,
		TextYAlignment = Enum.TextYAlignment.Center,
		BackgroundColor3 = Color3.fromRGB(255, 255, 255),
		AutomaticSize = Enum.AutomaticSize.Y,
		BackgroundTransparency = 1,
		Size = UDim2.fromScale(1, 1),
		Position = UDim2.fromOffset(10, 0),
		ThemeTag = {
			TextColor3 = "Text",
			PlaceholderColor3 = "SubText",
		},
	})

	Textbox.Container = New("Frame", {
		BackgroundTransparency = 1,
		ClipsDescendants = true,
		Position = UDim2.new(0, 6, 0, 0),
		Size = UDim2.new(1, -12, 1, 0),
	}, {
		Textbox.Input,
	})

	Textbox.Indicator = New("Frame", {
		Size = UDim2.new(1, -4, 0, 1),
		Position = UDim2.new(0, 2, 1, 0),
		AnchorPoint = Vector2.new(0, 1),
		BackgroundTransparency = Acrylic and 0.5 or 0,
		ThemeTag = {
			BackgroundColor3 = Acrylic and "InputIndicator" or "DialogInputLine",
		},
	})

	Textbox.Frame = New("Frame", {
		Size = UDim2.new(0, 0, 0, 30),
		BackgroundTransparency = Acrylic and 0.9 or 0,
		Parent = Parent,
		ThemeTag = {
			BackgroundColor3 = Acrylic and "Input" or "DialogInput",
		},
	}, {
		New("UICorner", {
			CornerRadius = UDim.new(0, 4),
		}),
		New("UIStroke", {
			ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
			Transparency = Acrylic and 0.5 or 0.65,
			ThemeTag = {
				Color = Acrylic and "InElementBorder" or "DialogButtonBorder",
			},
		}),
		Textbox.Indicator,
		Textbox.Container,
	})

	local function Update()
		local PADDING = 2
		local Reveal = Textbox.Container.AbsoluteSize.X

		if not Textbox.Input:IsFocused() or Textbox.Input.TextBounds.X <= Reveal - 2 * PADDING then
			Textbox.Input.Position = UDim2.new(0, PADDING, 0, 0)
		else
			local Cursor = Textbox.Input.CursorPosition
			if Cursor ~= -1 then
				local subtext = string.sub(Textbox.Input.Text, 1, Cursor - 1)
				local width = TextService:GetTextSize(
					subtext,
					Textbox.Input.TextSize,
					Textbox.Input.Font,
					Vector2.new(math.huge, math.huge)
				).X

				local CurrentCursorPos = Textbox.Input.Position.X.Offset + width
				if CurrentCursorPos < PADDING then
					Textbox.Input.Position = UDim2.fromOffset(PADDING - width, 0)
				elseif CurrentCursorPos > Reveal - PADDING - 1 then
					Textbox.Input.Position = UDim2.fromOffset(Reveal - width - PADDING - 1, 0)
				end
			end
		end
	end

	task.spawn(Update)

	Creator.AddSignal(Textbox.Input:GetPropertyChangedSignal("Text"), Update)
	Creator.AddSignal(Textbox.Input:GetPropertyChangedSignal("CursorPosition"), Update)

	Creator.AddSignal(Textbox.Input.Focused, function()
		Update()
		Textbox.Indicator.Size = UDim2.new(1, -2, 0, 2)
		Textbox.Indicator.Position = UDim2.new(0, 1, 1, 0)
		Textbox.Indicator.BackgroundTransparency = 0
		Creator.OverrideTag(Textbox.Frame, { BackgroundColor3 = Acrylic and "InputFocused" or "DialogHolder" })
		Creator.OverrideTag(Textbox.Indicator, { BackgroundColor3 = "Accent" })
	end)

	Creator.AddSignal(Textbox.Input.FocusLost, function()
		Update()
		Textbox.Indicator.Size = UDim2.new(1, -4, 0, 1)
		Textbox.Indicator.Position = UDim2.new(0, 2, 1, 0)
		Textbox.Indicator.BackgroundTransparency = 0.5
		Creator.OverrideTag(Textbox.Frame, { BackgroundColor3 = Acrylic and "Input" or "DialogInput" })
		Creator.OverrideTag(Textbox.Indicator, { BackgroundColor3 = Acrylic and "InputIndicator" or "DialogInputLine" })
	end)

	return Textbox
end

function Components.TitleBar(Config)
	local TitleBar = {}

	local Library = Library
	
	local function BarButton(Icon, Pos, Parent, Debounce, Callback)
		local Button = {
			Callback = Callback or function() end,
			OnDebounce = false
		}

		Button.Frame = New("TextButton", {
			Size = UDim2.new(0, 34, 1, -8),
			AnchorPoint = Vector2.new(1, 0),
			BackgroundTransparency = 1,
			Parent = Parent,
			Position = Pos,
			Text = "",
			ThemeTag = {
				BackgroundColor3 = "Text",
			},
		}, {
			New("UICorner", {
				CornerRadius = UDim.new(0, 7),
			}),
			New("ImageLabel", {
				Image = Icon,
				Size = UDim2.fromOffset(16, 16),
				Position = UDim2.fromScale(0.5, 0.5),
				AnchorPoint = Vector2.new(0.5, 0.5),
				BackgroundTransparency = 1,
				Name = "Icon",
				ThemeTag = {
					ImageColor3 = "Text",
				},
			}),
		})

		local Motor, SetTransparency = Creator.SpringMotor(1, Button.Frame, "BackgroundTransparency")

		Creator.AddSignal(Button.Frame.MouseEnter, function()
			SetTransparency(0.94)
		end)

		Creator.AddSignal(Button.Frame.MouseLeave, function()
			SetTransparency(1, true)
		end)

		Creator.AddSignal(Button.Frame.MouseButton1Down, function()
			SetTransparency(0.96)
		end)

		Creator.AddSignal(Button.Frame.MouseButton1Up, function()
			SetTransparency(0.94)
		end)

		Creator.AddSignal(Button.Frame.MouseButton1Click, function(...)
			if not Button.OnDebounce then
				Button.OnDebounce = true
				task.delay(Debounce, rawset, Button, "OnDebounce", false)
				Button.Callback(...)
			end
		end)

		return Button
	end

	TitleBar.Frame = New("Frame", {
		Size = UDim2.new(1, 0, 0, 42),
		BackgroundTransparency = 1,
		Parent = Config.Parent
	}, {
		New("Frame", {
			BackgroundTransparency = 0.5,
			Size = UDim2.new(1, 0, 0, 1),
			Position = UDim2.new(0, 0, 1, 0),
			ThemeTag = {
				BackgroundColor3 = "TitleBarLine",
			}
		})
	})

	TitleBar.TitleHolder = New("Frame", {
		Size = UDim2.new(1, -16, 1, 0),
		Parent = TitleBar.Frame,
		Position = UDim2.new(0, 16, 0, 0),
		BackgroundTransparency = 1,
	}, {
		New("UIListLayout", {
			Padding = UDim.new(0, 5),
			FillDirection = Enum.FillDirection.Horizontal,
			SortOrder = Enum.SortOrder.LayoutOrder,
		})
	})

	TitleBar.Title = New("TextLabel", {
		RichText = true,
		Text = Config.Title,
		Parent = TitleBar.TitleHolder,
		FontFace = Font.new(
			"rbxasset://fonts/families/GothamSSm.json",
			Enum.FontWeight.Regular,
			Enum.FontStyle.Normal
		),
		TextSize = 12,
		TextXAlignment = "Left",
		TextYAlignment = "Center",
		Size = UDim2.fromScale(0, 1),
		AutomaticSize = Enum.AutomaticSize.X,
		BackgroundTransparency = 1,
		ThemeTag = {
			TextColor3 = "Text",
		}
	})

	TitleBar.SubTitle = New("TextLabel", {
		RichText = true,
		Text = Config.SubTitle,
		Parent = TitleBar.TitleHolder,
		TextTransparency = 0.4,
		FontFace = Font.new(
			"rbxasset://fonts/families/GothamSSm.json",
			Enum.FontWeight.Regular,
			Enum.FontStyle.Normal
		),
		TextSize = 12,
		TextXAlignment = "Left",
		TextYAlignment = "Center",
		Size = UDim2.fromScale(0, 1),
		AutomaticSize = Enum.AutomaticSize.X,
		BackgroundTransparency = 1,
		ThemeTag = {
			TextColor3 = "Text",
		}
	})

	TitleBar.CloseButton = BarButton(Library.Utilities:GetIcon("Close"), UDim2.new(1, -4, 0, 4), TitleBar.Frame, 0, function()
		Library.CreatedWindow:Dialog{
			Title = "Close",
			Content = "Are you sure you want to unload the interface?",
			Buttons = {
				{
					Title = "Yes",
					Callback = Library.Destroy,
				},
				{
					Title = "No",
				}
			}
		}
	end)

	TitleBar.MaxButton = BarButton(Library.Utilities:GetIcon("Max"), UDim2.new(1, -40, 0, 4), TitleBar.Frame, 0, function()
		Config.Window.Maximize(not Config.Window.Maximized)
	end)

	TitleBar.MinButton = BarButton(Library.Utilities:GetIcon("Min"), UDim2.new(1, -80, 0, 4), TitleBar.Frame, 0, function()
		Config.Window:Minimize()
	end)

	-- Searchbox would take alot of time
	--[[ 
	TitleBar.SearchBox = New("TextBox", {
		AnchorPoint = Vector2.new(1, .5),
		Parent = TitleBar.Frame,
		Size = UDim2.fromScale(0, .65),
		Position = UDim2.new(1, -160, .5, 0),
		BackgroundTransparency = 1,
		ClearTextOnFocus = true,
		ThemeTag = {
			TextColor3 = "Text"
		}
	}, {
		New("UICorner", {
			CornerRadius = UDim.new(.5, 0)
		}),
		New("UIStroke", {
			ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
			Thickness = 0,
			Transparency = 1,
			ThemeTag = {
				Color = "AcrylicBorder"
			}
		})
	})

	--local SizeMotor, SetSize = Creator.SpringMotor(UDim2.fromScale(0, .65), TitleBar.SearchBox, "Size") -- No Motors for Sizes? 😢
	--local ThicknessMotor, SetThickness = Creator.SpringMotor(1, TitleBar.SearchBox.UIStroke, "Thickness")
	--local TransparencyMotor, SetTransparency = Creator.SpringMotor(1, TitleBar.SearchBox.UIStroke, "Transparency") -- never mind motors are like way to fast, idk how they work

	local SearchButtonIcon = Library.Utilities:GetIcon("search")
	local SearchButton = BarButton(SearchButtonIcon.Image, UDim2.new(1, -120, 0, 4), TitleBar.Frame, 2/3, function()
		if TitleBar.IsSearchbarOpen then
			TitleBar.SearchBox:TweenSize(UDim2.fromScale(0, .65), Enum.EasingDirection.Out, Enum.EasingStyle.Quad, .5, true)
			TweenService:Create(TitleBar.SearchBox.UIStroke, TweenInfo.new(2/3), {Transparency = 1, Thickness = 0}):Play()

			TitleBar.IsSearchbarOpen = false
		else
			TitleBar.SearchBox:TweenSize(
				UDim2.new(0, TitleBar.Frame.AbsoluteSize.X 
					- (
						TitleBar.Title.TextBounds.X 
						+ TitleBar.SubTitle.TextBounds.X 
						+ 195
				),
			.65, 0), Enum.EasingDirection.Out, Enum.EasingStyle.Quad, .5, true)
			TweenService:Create(TitleBar.SearchBox.UIStroke, TweenInfo.new(2/3), {Transparency = 0, Thickness = 1.5}):Play()

			TitleBar.SearchBox:CaptureFocus()
			TitleBar.IsSearchbarOpen = true
		end
	end)

	SearchButton.Frame.Icon.ImageRectSize = SearchButtonIcon.ImageRectSize
	SearchButton.Frame.Icon.ImageRectOffset = SearchButtonIcon.ImageRectOffset

	TitleBar.SearchButton = SearchButton

	AddSignal(TitleBar.Frame:GetPropertyChangedSignal("AbsoluteSize"), function()
		if TitleBar.IsSearchbarOpen then
			TitleBar.SearchBox:TweenSize(
				UDim2.new(0, TitleBar.Frame.AbsoluteSize.X 
					- (
						TitleBar.Title.TextBounds.X 
						+ TitleBar.SubTitle.TextBounds.X 
						+ 195
				),
			.65, 0), Enum.EasingDirection.Out, Enum.EasingStyle.Quad, 0, true)
		end
	end)
	]]

	return TitleBar
end

function Components.Section(Title, Parent)
	local Section = {}

	Section.Layout = New("UIListLayout", {
		Padding = UDim.new(0, 5),
	})

	Section.Container = New("Frame", {
		Size = UDim2.new(1, 0, 0, 26),
		Position = UDim2.fromOffset(0, 24),
		BackgroundTransparency = 1,
	}, {
		Section.Layout,
	})

	Section.Root = New("Frame", {
		BackgroundTransparency = 1,
		Size = UDim2.new(1, 0, 0, 26),
		LayoutOrder = 7,
		Parent = Parent,
	}, {
		New("TextLabel", {
			RichText = true,
			Text = Title,
			TextTransparency = 0,
			FontFace = Font.new("rbxassetid://12187365364", Enum.FontWeight.SemiBold, Enum.FontStyle.Normal),
			TextSize = 18,
			TextXAlignment = "Left",
			TextYAlignment = "Center",
			Size = UDim2.new(1, -16, 0, 18),
			Position = UDim2.fromOffset(0, 2),
			ThemeTag = {
				TextColor3 = "Text",
			},
		}),
		Section.Container,
	})

	Creator.AddSignal(Section.Layout:GetPropertyChangedSignal("AbsoluteContentSize"), function()
		if Section.Container.Size ~= UDim2.new(1, 0, 0, Section.Layout.AbsoluteContentSize.Y) or Section.Root.Size ~= UDim2.new(1, 0, 0, Section.Layout.AbsoluteContentSize.Y + 25) then
			Section.Container.Size = UDim2.new(1, 0, 0, Section.Layout.AbsoluteContentSize.Y)
			Section.Root.Size = UDim2.new(1, 0, 0, Section.Layout.AbsoluteContentSize.Y + 25)
		end
	end)

	return Section
end

local Dialog = {
	Window = nil,
} do

	function Dialog:Init(Window)
		Dialog.Window = Window
		return Dialog
	end

	function Dialog:Create()
		local NewDialog, Library = {
			Buttons = 0,
			Closing = Signal.new(),
			Closed = Signal.new()
		}, Library

		NewDialog.TintFrame = New("TextButton", {
			Text = "",
			Size = UDim2.fromScale(1, 1),
			BackgroundColor3 = Color3.fromRGB(0, 0, 0),
			BackgroundTransparency = 1,
			Parent = Dialog.Window.Root,
		}, {
			New("UICorner", {
				CornerRadius = UDim.new(0, 8),
			}),
		})

		local TintMotor, TintTransparency = Creator.SpringMotor(1, NewDialog.TintFrame, "BackgroundTransparency", true)

		NewDialog.ButtonHolder = New("Frame", {
			Size = UDim2.new(1, -40, 1, -40),
			AnchorPoint = Vector2.new(0.5, 0.5),
			Position = UDim2.fromScale(0.5, 0.5),
			BackgroundTransparency = 1,
		}, {
			New("UIListLayout", {
				Padding = UDim.new(0, 10),
				FillDirection = Enum.FillDirection.Horizontal,
				HorizontalAlignment = Enum.HorizontalAlignment.Center,
				SortOrder = Enum.SortOrder.LayoutOrder,
			}),
		})

		NewDialog.ButtonHolderFrame = New("Frame", {
			Size = UDim2.new(1, 0, 0, 70),
			Position = UDim2.new(0, 0, 1, -70),
			ThemeTag = {
				BackgroundColor3 = "DialogHolder",
			},
		}, {
			New("Frame", {
				Size = UDim2.new(1, 0, 0, 1),
				ThemeTag = {
					BackgroundColor3 = "DialogHolderLine",
				},
			}),
			NewDialog.ButtonHolder,
		})

		NewDialog.Title = New("TextLabel", {
			FontFace = Font.new(
				"rbxasset://fonts/families/GothamSSm.json",
				Enum.FontWeight.SemiBold,
				Enum.FontStyle.Normal
			),
			Text = "Dialog",
			TextColor3 = Color3.fromRGB(240, 240, 240),
			TextSize = 22,
			TextXAlignment = Enum.TextXAlignment.Left,
			Size = UDim2.new(1, 0, 0, 22),
			Position = UDim2.fromOffset(20, 25),
			BackgroundColor3 = Color3.fromRGB(255, 255, 255),
			BackgroundTransparency = 1,
			ThemeTag = {
				TextColor3 = "Text",
			},
		})

		NewDialog.Scale = New("UIScale", {
			Scale = 1,
		})

		local ScaleMotor, Scale = Creator.SpringMotor(1.1, NewDialog.Scale, "Scale")

		NewDialog.Root = New("CanvasGroup", {
			Size = UDim2.fromOffset(300, 165),
			AnchorPoint = Vector2.new(0.5, 0.5),
			Position = UDim2.fromScale(0.5, 0.5),
			GroupTransparency = 1,
			Parent = NewDialog.TintFrame,
			ThemeTag = {
				BackgroundColor3 = "Dialog",
			},
		}, {
			New("UICorner", {
				CornerRadius = UDim.new(0, 8),
			}),
			New("UIStroke", {
				Transparency = 0.5,
				ThemeTag = {
					Color = "DialogBorder",
				},
			}),
			NewDialog.Scale,
			NewDialog.Title,
			NewDialog.ButtonHolderFrame,
		})

		local RootMotor, RootTransparency = Creator.SpringMotor(1, NewDialog.Root, "GroupTransparency")

		function NewDialog:Open()
			Library.DialogOpen = true
			NewDialog.Scale.Scale = 1.1
			TintTransparency(0.75)
			RootTransparency(0)
			Scale(1)
		end

		function NewDialog:Close()
			NewDialog.Closing:Fire()
			Library.DialogOpen = false
			TintTransparency(1)
			RootTransparency(1)
			Scale(1.1)
			NewDialog.Root.UIStroke:Destroy()
			task.wait(0.15)
			NewDialog.TintFrame:Destroy()
			NewDialog.Closed:Fire()
		end

		function NewDialog:Button(Title, Callback)
			NewDialog.Buttons = NewDialog.Buttons + 1
			Title = Title or "Button"
			Callback = Callback or function() end

			local Button = Components.Button("", NewDialog.ButtonHolder, true)
			Button.Title.Text = Title

			for _, Btn in next, NewDialog.ButtonHolder:GetChildren() do
				if Btn:IsA("TextButton") then
					Btn.Size = UDim2.new(1 / NewDialog.Buttons, -((NewDialog.Buttons - 1) * 10 / NewDialog.Buttons), 0, 32)
				end
			end

			Creator.AddSignal(Button.Frame.MouseButton1Click, function()
				Library:SafeCallback(Callback)
				pcall(function()
					NewDialog:Close()
				end)
			end)

			return Button
		end

		return NewDialog
	end
end

Components.Dialog = Dialog

local Notification = {} do
	function Notification:Init(GUI)
		Notification.Holder = New("Frame", {
			Position = UDim2.new(1, -30, 1, -30),
			Size = UDim2.new(0, 310, 1, -30),
			AnchorPoint = Vector2.new(1, 1),
			BackgroundTransparency = 1,
			Parent = GUI,
		}, {
			New("UIListLayout", {
				HorizontalAlignment = Enum.HorizontalAlignment.Center,
				SortOrder = Enum.SortOrder.LayoutOrder,
				VerticalAlignment = Enum.VerticalAlignment.Bottom,
				Padding = UDim.new(0, 20),
			}),
		})
	end

	function Notification:New(Config)
		local NewNotification = {
			Closed = false,
		}

		Config.Title = Config.Title or "Title"
		Config.Content = Config.Content or "Content"
		Config.SubContent = Config.SubContent or ""
		Config.Duration = Config.Duration or nil
		Config.Buttons = Config.Buttons or {}

		NewNotification.AcrylicPaint = Acrylic.AcrylicPaint()

		NewNotification.Title = New("TextLabel", {
			Position = UDim2.new(0, 14, 0, 17),
			Text = Config.Title,
			RichText = true,
			TextColor3 = Color3.fromRGB(255, 255, 255),
			TextTransparency = 0,
			FontFace = Font.new("rbxasset://fonts/families/GothamSSm.json"),
			TextSize = 13,
			TextXAlignment = "Left",
			TextYAlignment = "Center",
			Size = UDim2.new(1, -12, 0, 12),
			TextWrapped = true,
			BackgroundTransparency = 1,
			ThemeTag = {
				TextColor3 = "Text",
			},
		})

		NewNotification.ContentLabel = New("TextLabel", {
			FontFace = Font.new("rbxasset://fonts/families/GothamSSm.json"),
			Text = Config.Content,
			TextColor3 = Color3.fromRGB(240, 240, 240),
			TextSize = 14,
			TextXAlignment = Enum.TextXAlignment.Left,
			AutomaticSize = Enum.AutomaticSize.Y,
			Size = UDim2.new(1, 0, 0, 14),
			BackgroundTransparency = 1,
			TextWrapped = true,
			ThemeTag = {
				TextColor3 = "Text",
			},
		})

		NewNotification.SubContentLabel = New("TextLabel", {
			FontFace = Font.new("rbxasset://fonts/families/GothamSSm.json"),
			Text = Config.SubContent,
			TextColor3 = Color3.fromRGB(240, 240, 240),
			TextSize = 14,
			TextXAlignment = Enum.TextXAlignment.Left,
			AutomaticSize = Enum.AutomaticSize.Y,
			Size = UDim2.new(1, 0, 0, 14),
			BackgroundColor3 = Color3.fromRGB(255, 255, 255),
			BackgroundTransparency = 1,
			TextWrapped = true,
			ThemeTag = {
				TextColor3 = "SubText",
			},
		})

		NewNotification.LabelHolder = New("Frame", {
			AutomaticSize = Enum.AutomaticSize.Y,
			BackgroundColor3 = Color3.fromRGB(255, 255, 255),
			BackgroundTransparency = 1,
			Position = UDim2.fromOffset(14, 40),
			Size = UDim2.new(1, -28, 0, 0),
		}, {
			New("UIListLayout", {
				SortOrder = Enum.SortOrder.LayoutOrder,
				VerticalAlignment = Enum.VerticalAlignment.Center,
				Padding = UDim.new(0, 3),
			}),
			NewNotification.ContentLabel,
			NewNotification.SubContentLabel,
		})

		NewNotification.CloseButton = New("TextButton", {
			Text = "",
			Position = UDim2.new(1, -14, 0, 13),
			Size = UDim2.fromOffset(20, 20),
			AnchorPoint = Vector2.new(1, 0),
			BackgroundTransparency = 1,
		}, {
			New("ImageLabel", {
				Image = Components.Assets.Close,
				Size = UDim2.fromOffset(16, 16),
				Position = UDim2.fromScale(0.5, 0.5),
				AnchorPoint = Vector2.new(0.5, 0.5),
				BackgroundTransparency = 1,
				ThemeTag = {
					ImageColor3 = "Text",
				},
			}),
		})

		NewNotification.Root = New("Frame", {
			BackgroundTransparency = 1,
			Size = UDim2.new(1, 0, 1, 0),
			Position = UDim2.fromScale(1, 0),
		}, {
			NewNotification.AcrylicPaint.Frame,
			NewNotification.Title,
			NewNotification.CloseButton,
			NewNotification.LabelHolder,
		})

		if Config.Content == "" then
			NewNotification.ContentLabel.Visible = false
		end

		if Config.SubContent == "" then
			NewNotification.SubContentLabel.Visible = false
		end

		NewNotification.Holder = New("Frame", {
			BackgroundTransparency = 1,
			Size = UDim2.new(1, 0, 0, 200),
			Parent = Notification.Holder,
		}, {
			NewNotification.Root,
		})

		local RootMotor = Flipper.GroupMotor.new({
			Scale = 1,
			Offset = 60,
		})

		RootMotor:onStep(function(Values)
			NewNotification.Root.Position = UDim2.new(Values.Scale, Values.Offset, 0, 0)
		end)

		Creator.AddSignal(NewNotification.CloseButton.MouseButton1Click, function()
			NewNotification:Close()
		end)

		function NewNotification:Open()
			local ContentSize = NewNotification.LabelHolder.AbsoluteSize.Y
			NewNotification.Holder.Size = UDim2.new(1, 0, 0, 58 + ContentSize)

			RootMotor:setGoal({
				Scale = Flipper.Spring.new(0, { frequency = 5 }),
				Offset = Flipper.Spring.new(0, { frequency = 5 }),
			})
		end

		function NewNotification:Close()
			if not NewNotification.Closed then
				NewNotification.Closed = true
				task.spawn(function()
					RootMotor:setGoal({
						Scale = Flipper.Spring.new(1, { frequency = 5 }),
						Offset = Flipper.Spring.new(60, { frequency = 5 }),
					})
					task.wait(0.4)
					if Library.UseAcrylic then
						NewNotification.AcrylicPaint.Model:Destroy()
					end
					NewNotification.Holder:Destroy()
				end)
			end
		end

		NewNotification:Open()
		if Config.Duration then
			task.delay(Config.Duration, function()
				NewNotification:Close()
			end)
		end
		return NewNotification
	end
end

Components.Notification = Notification

local TabModule = {
	Window = nil,
	Tabs = {},
	Containers = {},
	SelectedTab = 0,
	TabCount = 0,
} do
	function TabModule:Init(Window)
		TabModule.Window = Window
		return TabModule
	end

	function TabModule:GetCurrentTabPos()
		local TabHolderPos = TabModule.Window.TabHolder.AbsolutePosition.Y
		local TabPos = TabModule.Tabs[TabModule.SelectedTab].Frame.AbsolutePosition.Y

		return TabPos - TabHolderPos
	end

	function TabModule:New(Title, Icon, Parent)
		local Library = Library
		local Window = TabModule.Window
		local Elements = Library.Elements

		TabModule.TabCount = TabModule.TabCount + 1
		local TabIndex = TabModule.TabCount

		local Tab = {
			Selected = false,
			Name = Title,
			Type = "Tab",
		}

		Icon = Library.Utilities:GetIcon(Icon)

		Tab.Frame = New("TextButton", {
			Size = UDim2.new(1, 0, 0, 34),
			BackgroundTransparency = 1,
			Parent = Parent,
			ThemeTag = {
				BackgroundColor3 = "Tab",
			},
		}, {
			New("UICorner", {
				CornerRadius = UDim.new(0, 6),
			}),
			New("TextLabel", {
				AnchorPoint = Vector2.new(0, 0.5),
				Position = Icon ~= nil and UDim2.new(0, 30, 0.5, 0) or UDim2.new(0, 12, 0.5, 0),
				Text = Title,
				RichText = true,
				TextColor3 = Color3.fromRGB(255, 255, 255),
				TextTransparency = 0,
				FontFace = Font.new(
					"rbxasset://fonts/families/GothamSSm.json",
					Enum.FontWeight.Regular,
					Enum.FontStyle.Normal
				),
				TextSize = 12,
				TextXAlignment = "Left",
				TextYAlignment = "Center",
				Size = UDim2.new(1, -12, 1, 0),
				BackgroundTransparency = 1,
				ThemeTag = {
					TextColor3 = "Text",
				},
			}),
			New("ImageLabel", {
				AnchorPoint = Vector2.new(0, 0.5),
				Size = UDim2.fromOffset(16, 16),
				Position = UDim2.new(0, 8, 0.5, 0),
				BackgroundTransparency = 1,
				ImageRectOffset = Icon and Icon.ImageRectOffset or Vector2.zero,
				ImageRectSize = Icon and Icon.ImageRectSize or Vector2.zero,
				Image = Icon and Icon.Image or nil,
				ThemeTag = {
					ImageColor3 = "Text",
				},
			}),
		})

		local ContainerLayout = New("UIListLayout", {
			Padding = UDim.new(0, 5),
			SortOrder = Enum.SortOrder.LayoutOrder,
		})

		Tab.ContainerFrame = New("ScrollingFrame", {
			Size = UDim2.fromScale(1, 1),
			BackgroundTransparency = 1,
			Parent = Window.ContainerHolder,
			Visible = false,
			BottomImage = "rbxassetid://6889812791",
			MidImage = "rbxassetid://6889812721",
			TopImage = "rbxassetid://6276641225",
			ScrollBarImageColor3 = Color3.fromRGB(255, 255, 255),
			ScrollBarImageTransparency = 0.95,
			ScrollBarThickness = 3,
			BorderSizePixel = 0,
			CanvasSize = UDim2.fromScale(0, 0),
			ScrollingDirection = Enum.ScrollingDirection.Y,
		}, {
			ContainerLayout,
			New("UIPadding", {
				PaddingRight = UDim.new(0, 10),
				PaddingLeft = UDim.new(0, 1),
				PaddingTop = UDim.new(0, 1),
				PaddingBottom = UDim.new(0, 1),
			}),
		})

		Creator.AddSignal(ContainerLayout:GetPropertyChangedSignal("AbsoluteContentSize"), function()
			if Tab.ContainerFrame.CanvasSize ~= UDim2.fromOffset(0, ContainerLayout.AbsoluteContentSize.Y + 2) then
				Tab.ContainerFrame.CanvasSize = UDim2.fromOffset(0, ContainerLayout.AbsoluteContentSize.Y + 2)
			end
		end)

		Tab.Motor, Tab.SetTransparency = Creator.SpringMotor(1, Tab.Frame, "BackgroundTransparency")

		Creator.AddSignal(Tab.Frame.MouseEnter, function()
			Tab.SetTransparency(Tab.Selected and 0.85 or 0.89)
		end)
		Creator.AddSignal(Tab.Frame.MouseLeave, function()
			Tab.SetTransparency(Tab.Selected and 0.89 or 1)
		end)
		Creator.AddSignal(Tab.Frame.MouseButton1Down, function()
			Tab.SetTransparency(0.92)
		end)
		Creator.AddSignal(Tab.Frame.MouseButton1Up, function()
			Tab.SetTransparency(Tab.Selected and 0.85 or 0.89)
		end)
		Creator.AddSignal(Tab.Frame.MouseButton1Click, function()
			TabModule:SelectTab(TabIndex)
		end)

		TabModule.Containers[TabIndex] = Tab.ContainerFrame
		TabModule.Tabs[TabIndex] = Tab

		Tab.Container = Tab.ContainerFrame
		Tab.ScrollFrame = Tab.Container

		function Tab:Section(SectionTitle)
			local Section = { 
				Type = "Section" 
			}

			local SectionFrame = Components.Section(SectionTitle, Tab.Container)
			Section.Container = SectionFrame.Container
			Section.ScrollFrame = Tab.Container

			setmetatable(Section, Elements)
			return Section
		end

		Tab.CreateSection = Tab.Section
		Tab.AddSection = Tab.Section

		setmetatable(Tab, Elements)
		return Tab
	end

	function TabModule:SelectTab(Tab)
		local Window = TabModule.Window

		TabModule.SelectedTab = Tab

		for _, TabObject in next, TabModule.Tabs do
			TabObject.SetTransparency(1)
			TabObject.Selected = false
		end

		TabModule.Tabs[Tab].SetTransparency(0.89)
		TabModule.Tabs[Tab].Selected = true

		Window.TabDisplay.Text = TabModule.Tabs[Tab].Name
		Window.SelectorPosMotor:setGoal(Flipper.Spring.new(TabModule:GetCurrentTabPos(), { frequency = 6 }))

		task.spawn(function()
			Window.ContainerHolder.Parent = Window.ContainerAnim

			Window.ContainerPosMotor:setGoal(Flipper.Spring.new(15, { frequency = 10 }))
			Window.ContainerBackMotor:setGoal(Flipper.Spring.new(1, { frequency = 10 }))

			task.wait(0.12)

			for _, Container in next, TabModule.Containers do
				Container.Visible = false
			end

			TabModule.Containers[Tab].Visible = true
			Window.ContainerPosMotor:setGoal(Flipper.Spring.new(0, { frequency = 5 }))
			Window.ContainerBackMotor:setGoal(Flipper.Spring.new(0, { frequency = 8 }))

			task.wait(0.12)

			Window.ContainerHolder.Parent = Window.ContainerCanvas
		end)
	end
end

Components.Tab = TabModule

function Components.Window(Config)
	assert(typeof(Config.Mobile) == "table", "Config key 'Mobile' must be a table!")
	assert(typeof(Config.Mobile.GetIcon) == "function", "Mobile Config key 'GetIcon' must be a function!")
	assert(typeof(Config.Mobile.Size) == "UDim2", "Mobile Config key 'Size' must be a UDim2!")

	local Window = {
		Minimized = false,
		OnMinimized = Signal.new(),
		PostMinimized = Signal.new(),
		Maximized = false,
		OnMaximized = Signal.new(),
		PostMaximized = Signal.new(),
		Size = Config.Size,
		MinSize = Config.MinSize,
		CurrentPos = 0,
		TabWidth = 0,
		Position = UDim2.fromOffset(
			Camera.ViewportSize.X / 2 - Config.Size.X.Offset / 2,
			Camera.ViewportSize.Y / 2 - Config.Size.Y.Offset / 2
		),
	}

	local Dragging, DragInput, MousePos, StartPos = false, nil, nil, nil
	local Resizing, ResizePos = false, nil
	local MinimizeNotif = false
	local IsDraggingHideButton, DragInputHideButton, DragStart, DragStartPos = false, nil, nil, nil

	Window.AcrylicPaint = Acrylic.AcrylicPaint()
	Window.TabWidth = Config.TabWidth

	local Selector = New("Frame", {
		Size = UDim2.fromOffset(4, 0),
		BackgroundColor3 = Color3.fromRGB(76, 194, 255),
		Position = UDim2.fromOffset(0, 17),
		AnchorPoint = Vector2.new(0, 0.5),
		ThemeTag = {
			BackgroundColor3 = "Accent",
		},
	}, {
		New("UICorner", {
			CornerRadius = UDim.new(0, 2),
		}),
	})

	local ResizeStartFrame = New("Frame", {
		Size = UDim2.fromOffset(20, 20),
		BackgroundTransparency = 1,
		Position = UDim2.new(1, -20, 1, -20),
	})

	Window.TabHolder = New("ScrollingFrame", {
		Size = UDim2.fromScale(1, 1),
		BackgroundTransparency = 1,
		ScrollBarImageTransparency = 1,
		ScrollBarThickness = 0,
		BorderSizePixel = 0,
		CanvasSize = UDim2.fromScale(0, 0),
		ScrollingDirection = Enum.ScrollingDirection.Y,
	}, {
		New("UIListLayout", {
			Padding = UDim.new(0, 4),
		}),
	})

	local TabFrame = New("Frame", {
		Size = UDim2.new(0, Window.TabWidth, 1, -66),
		Position = UDim2.new(0, 12, 0, 54),
		BackgroundTransparency = 1,
		ClipsDescendants = true,
	}, {
		Window.TabHolder,
		Selector,
	})

	Window.TabDisplay = New("TextLabel", {
		RichText = true,
		Text = "Tab",
		TextTransparency = 0,
		FontFace = Font.new("rbxassetid://12187365364", Enum.FontWeight.SemiBold, Enum.FontStyle.Normal),
		TextSize = 28,
		TextXAlignment = "Left",
		TextYAlignment = "Center",
		Size = UDim2.new(1, -16, 0, 28),
		Position = UDim2.fromOffset(Window.TabWidth + 26, 56),
		BackgroundTransparency = 1,
		ThemeTag = {
			TextColor3 = "Text",
		},
	})

	Window.ContainerHolder = New("Frame", {
		Size = UDim2.fromScale(1, 1),
		BackgroundTransparency = 1,
	})

	Window.ContainerAnim = New("CanvasGroup", {
		Size = UDim2.fromScale(1, 1),
		BackgroundTransparency = 1,
	})

	Window.ContainerCanvas = New("Frame", {
		Size = UDim2.new(1, -Window.TabWidth - 32, 1, -102),
		Position = UDim2.fromOffset(Window.TabWidth + 26, 90),
		BackgroundTransparency = 1,
	}, {
		Window.ContainerAnim,
		Window.ContainerHolder
	})

	Window.Root = New("Frame", {
		BackgroundTransparency = 1,
		Size = Window.Size,
		Position = Window.Position,
		Parent = Config.Parent,
	}, {
		Window.AcrylicPaint.Frame,
		Window.TabDisplay,
		Window.ContainerCanvas,
		TabFrame,
		ResizeStartFrame,
	})

	Window.HideButton = New("ImageButton", {
		Visible = Library.Utilities:GetOS() == "Mobile",
		Size = Config.Mobile.Size,
		BackgroundTransparency = 1,
		Position = UDim2.new(1, -Config.Mobile.Size.X.Offset - 25, 0.5, -Config.Mobile.Size.Y.Offset / 2),
		Parent = Config.Parent,
		Image = Config.Mobile.GetIcon(false).Image,
		ImageRectOffset = Config.Mobile.GetIcon(false).ImageRectOffset,
		ImageRectSize = Config.Mobile.GetIcon(false).ImageRectSize
	})

	Window.TitleBar = Components.TitleBar({
		Title = Config.Title,
		SubTitle = Config.SubTitle,
		Parent = Window.Root,
		Window = Window,
	})

	if Library.UseAcrylic then
		Window.AcrylicPaint.AddParent(Window.Root)
	end

	local SizeMotor = Flipper.GroupMotor.new({
		X = Window.Size.X.Offset,
		Y = Window.Size.Y.Offset,
	})

	local PosMotor = Flipper.GroupMotor.new({
		X = Window.Position.X.Offset,
		Y = Window.Position.Y.Offset,
	})

	Window.SelectorPosMotor = Flipper.SingleMotor.new(17)
	Window.SelectorSizeMotor = Flipper.SingleMotor.new(0)
	Window.ContainerBackMotor = Flipper.SingleMotor.new(0)
	Window.ContainerPosMotor = Flipper.SingleMotor.new(94)

	SizeMotor:onStep(function(values)
		Window.Root.Size = UDim2.new(0, values.X, 0, values.Y)
	end)

	PosMotor:onStep(function(values)
		Window.Root.Position = UDim2.new(0, values.X, 0, values.Y)
	end)

	local LastValue = 0
	local LastTime = 0
	Window.SelectorPosMotor:onStep(function(Value)
		Selector.Position = UDim2.new(0, 0, 0, Value + 17)
		local Now = tick()
		local DeltaTime = Now - LastTime

		if LastValue ~= nil then
			Window.SelectorSizeMotor:setGoal(Flipper.Spring.new((math.abs(Value - LastValue) / (DeltaTime * 60)) + 16))
			LastValue = Value
		end
		LastTime = Now
	end)

	Window.SelectorSizeMotor:onStep(function(Value)
		Selector.Size = UDim2.new(0, 4, 0, Value)
	end)

	Window.ContainerBackMotor:onStep(function(Value)
		Window.ContainerAnim.GroupTransparency = Value
	end)

	Window.ContainerPosMotor:onStep(function(Value)
		Window.ContainerAnim.Position = UDim2.fromOffset(0, Value)
	end)

	local OldSizeX
	local OldSizeY
	Window.Maximize = function(Value, NoPos, Instant)
		Window.OnMaximized:Fire(tick())

		Window.Maximized = Value
		Window.TitleBar.MaxButton.Frame.Icon.Image = Value and Components.Assets.Restore or Components.Assets.Max

		if Value then
			OldSizeX = Window.Size.X.Offset
			OldSizeY = Window.Size.Y.Offset
		end
		local SizeX = Value and Camera.ViewportSize.X or OldSizeX
		local SizeY = Value and Camera.ViewportSize.Y or OldSizeY
		SizeMotor:setGoal({
			X = Flipper[Instant and "Instant" or "Spring"].new(SizeX, { frequency = 6 }),
			Y = Flipper[Instant and "Instant" or "Spring"].new(SizeY, { frequency = 6 }),
		})
		Window.Size = UDim2.fromOffset(SizeX, SizeY)

		if not NoPos then
			PosMotor:setGoal({
				X = Flipper.Spring.new(Value and 0 or Window.Position.X.Offset, { frequency = 6 }),
				Y = Flipper.Spring.new(Value and 0 or Window.Position.Y.Offset, { frequency = 6 }),
			})
		end

		Window.PostMaximized:Fire(tick())
	end

	Creator.AddSignal(Window.TitleBar.Frame.InputBegan, function(Input)
		if
			Input.UserInputType == Enum.UserInputType.MouseButton1
			or Input.UserInputType == Enum.UserInputType.Touch
		then
			Dragging = true
			MousePos = Input.Position
			StartPos = Window.Root.Position

			if Window.Maximized then
				StartPos = UDim2.fromOffset(
					Mouse.X - (Mouse.X * ((OldSizeX - 100) / Window.Root.AbsoluteSize.X)),
					Mouse.Y - (Mouse.Y * (OldSizeY / Window.Root.AbsoluteSize.Y))
				)
			end

			Input.Changed:Connect(function()
				if Input.UserInputState == Enum.UserInputState.End then
					Dragging = false
				end
			end)
		end
	end)

	Creator.AddSignal(Window.TitleBar.Frame.InputChanged, function(Input)
		if
			Input.UserInputType == Enum.UserInputType.MouseMovement
			or Input.UserInputType == Enum.UserInputType.Touch
		then
			DragInput = Input
		end
	end)

	Creator.AddSignal(ResizeStartFrame.InputBegan, function(Input)
		if
			Input.UserInputType == Enum.UserInputType.MouseButton1
			or Input.UserInputType == Enum.UserInputType.Touch
		then
			Resizing = true
			ResizePos = Input.Position
		end
	end)

	Creator.AddSignal(UserInputService.InputChanged, function(Input)
		if Input == DragInput and Dragging then
			local Delta = Input.Position - MousePos
			Window.Position = UDim2.fromOffset(StartPos.X.Offset + Delta.X, StartPos.Y.Offset + Delta.Y)
			PosMotor:setGoal({
				X = Flipper.Instant.new(Window.Position.X.Offset),
				Y = Flipper.Instant.new(Window.Position.Y.Offset),
			})

			if Window.Maximized then
				Window.Maximize(false, true, true)
			end
		end

		if
			(Input.UserInputType == Enum.UserInputType.MouseMovement or Input.UserInputType == Enum.UserInputType.Touch)
			and Resizing
		then
			local Delta = Input.Position - ResizePos
			local StartSize = Window.Size

			local TargetSize = Vector3.new(StartSize.X.Offset, StartSize.Y.Offset, 0) + Vector3.new(1, 1, 0) * Delta
			local TargetSizeClamped =
				Vector2.new(math.clamp(TargetSize.X, 470, 2048), math.clamp(TargetSize.Y, 380, 2048))

			SizeMotor:setGoal({
				X = Flipper.Instant.new(TargetSizeClamped.X),
				Y = Flipper.Instant.new(TargetSizeClamped.Y),
			})
		end
	end)

	Creator.AddSignal(UserInputService.InputEnded, function(Input)
		if Resizing == true or Input.UserInputType == Enum.UserInputType.Touch then
			Resizing = false
			Window.Size = UDim2.fromOffset(SizeMotor:getValue().X, SizeMotor:getValue().Y)
		end
	end)

	Creator.AddSignal(Window.TabHolder.UIListLayout:GetPropertyChangedSignal("AbsoluteContentSize"), function()
		if Window.TabHolder.CanvasSize ~= UDim2.fromOffset(0, Window.TabHolder.UIListLayout.AbsoluteContentSize.Y) then
			Window.TabHolder.CanvasSize = UDim2.fromOffset(0, Window.TabHolder.UIListLayout.AbsoluteContentSize.Y)
		end
	end)

	function Window:Minimize()
		Window.Minimized = not Window.Minimized
		Window.Root.Visible = not Window.Minimized

		Window.OnMinimized:Fire(tick(), Window.Root.Visible)

		if not MinimizeNotif then
			local Key = Library.MinimizeKeybind and Library.MinimizeKeybind.Value or typeof(Library.MinimizeKey) == "string" and Library.MinimizeKey or Library.MinimizeKey.Name

			MinimizeNotif = true

			Library:Notify({
				Title = "Interface",
				Content = `Press {Library.Utilities:Prettify(Key)} to toggle the interface.`,
				Duration = 6
			})
		end
		if Library.Utilities:GetOS() == "Mobile" then
			local Icon = Config.Mobile.GetIcon(Window.Minimized)
			Window.HideButton.Image = Icon.Image
			Window.HideButton.ImageRectOffset = Icon.ImageRectOffset
			Window.HideButton.ImageRectSize = Icon.ImageRectSiz
		end
		Window.PostMinimized:Fire(tick(), Window.Root.Visible)
	end

	Creator.AddSignal(UserInputService.InputBegan, function(Input)
		if
			type(Library.MinimizeKeybind) == "table"
			and Library.MinimizeKeybind.Type == "Keybind"
			and not UserInputService:GetFocusedTextBox()
		then
			if Input.KeyCode.Name == Library.MinimizeKeybind.Value or Input.KeyCode.Name == Library.MinimizeKeybind.Value.Name then
				Window:Minimize()
			end
		elseif (Input.KeyCode == Library.MinimizeKey or Input.KeyCode.Name == Library.MinimizeKey) and not UserInputService:GetFocusedTextBox() then
			Window:Minimize()
		end
	end)

	Creator.AddSignal(Window.HideButton.InputBegan, function(Input)
		if
			Input.UserInputType == Enum.UserInputType.MouseButton1
			or Input.UserInputType == Enum.UserInputType.Touch
		then
			IsDraggingHideButton = true
			DragStart = Input.Position
			DragStartPos = Window.HideButton.Position

			Input.Changed:Connect(function()
				if Input.UserInputState == Enum.UserInputState.End then
					IsDraggingHideButton = false
				end
			end)
		end
	end)

	Creator.AddSignal(Window.HideButton.InputChanged, function(Input)
		if
			Input.UserInputType == Enum.UserInputType.MouseMovement
			or Input.UserInputType == Enum.UserInputType.Touch
		then
			DragInputHideButton = Input
		end
	end)

	Creator.AddSignal(UserInputService.InputChanged, function(Input)
		if Input == DragInputHideButton and IsDraggingHideButton then
			local delta = Input.Position - DragStart
			Window.HideButton.Position = UDim2.new(DragStartPos.X.Scale, DragStartPos.X.Offset + delta.X, DragStartPos.Y.Scale, DragStartPos.Y.Offset + delta.Y)
		end
	end)

	if Library.Utilities:GetOS() == "Mobile" then
		Creator.AddSignal(Window.HideButton.TouchTap, function()
			Window.Minimized = not Window.Minimized
			Window.Root.Visible = not Window.Minimized
			local Icon = Config.Mobile.GetIcon(Window.Minimized)
			Window.HideButton.Image = Icon.Image
			Window.HideButton.ImageRectOffset = Icon.ImageRectOffset
			Window.HideButton.ImageRectSize = Icon.ImageRectSize
		end)
	else
		Creator.AddSignal(Window.HideButton.MouseButton1Click, function()
			Window.Minimized = not Window.Minimized
			Window.Root.Visible = not Window.Minimized
		end)	
	end

	function Window:Destroy()
		if Library.UseAcrylic then
			Window.AcrylicPaint.Model:Destroy()
		end
		Window.Root:Destroy()
	end

	local DialogModule = Components.Dialog:Init(Window)
	function Window:Dialog(Config)
		local Dialog = DialogModule:Create()
		Dialog.Title.Text = Config.Title

		local Content = New("TextLabel", {
			FontFace = Font.new("rbxasset://fonts/families/GothamSSm.json"),
			Text = Config.Content,
			TextColor3 = Color3.fromRGB(240, 240, 240),
			TextSize = 14,
			TextXAlignment = Enum.TextXAlignment.Left,
			TextYAlignment = Enum.TextYAlignment.Top,
			Size = UDim2.new(1, -40, 1, 0),
			Position = UDim2.fromOffset(20, 60),
			BackgroundTransparency = 1,
			Parent = Dialog.Root,
			ClipsDescendants = false,
			ThemeTag = {
				TextColor3 = "Text",
			},
		})

		New("UISizeConstraint", {
			MinSize = Vector2.new(300, 165),
			MaxSize = Vector2.new(620, math.huge),
			Parent = Dialog.Root,
		})

		Dialog.Root.Size = UDim2.fromOffset(Content.TextBounds.X + 40, 165)
		if Content.TextBounds.X + 40 > Window.Size.X.Offset - 120 then
			Dialog.Root.Size = UDim2.fromOffset(Window.Size.X.Offset - 120, 165)
			Content.TextWrapped = true
			Dialog.Root.Size = UDim2.fromOffset(Window.Size.X.Offset - 120, Content.TextBounds.Y + 150)
		end

		for _, Button in next, Config.Buttons do
			Dialog:Button(Button.Title, Button.Callback)
		end

		Dialog:Open()

		if Config.Yield then
			Dialog.Closed:Wait()
		end

		return Dialog
	end

	local TabModule = Components.Tab:Init(Window)

	function Window:Tab(TabConfig)
		return TabModule:New(TabConfig.Title, TabConfig.Icon, Window.TabHolder)
	end

	function Window:AddTab(TabConfig)
		return Window:Tab(TabConfig)
	end

	function Window:CreateTab(TabConfig)
		return Window:Tab(TabConfig)
	end

	function Window:SelectTab(Tab)
		TabModule:SelectTab(Tab)
	end

	Creator.AddSignal(Window.TabHolder:GetPropertyChangedSignal("CanvasPosition"), function()
		LastValue = TabModule:GetCurrentTabPos() + 16
		LastTime = 0
		Window.SelectorPosMotor:setGoal(Flipper.Instant.new(TabModule:GetCurrentTabPos()))
	end)

	return Window
end

local SharedTable = shared or _G or (getgenv and getgenv()) or getfenv(1)

local BaseContainer = New("ScreenGui", {
	Name = "Fluent Renewed Base GUI"
})

BaseContainer.Parent = (function() -- https://github.com/Pepsied-5229/Pepsi-UI-Library/blob/main/Pepsi-UI-Library.lua#L503
	local success, result = pcall(function()
		return (gethui or get_hidden_ui)()
	end)

	if success and result then
		return result
	end

	success, result = pcall(function()
		local CoreGui = game:GetService("CoreGui")

		CoreGui:GetFullName()

		return CoreGui
	end)

	if success and result then
		return result
	end

	success, result = pcall(function()
		local StarterGui = game:GetService("StarterGui")

		StarterGui:GetFullName()

		return StarterGui
	end)

	if success and result then
		return result
	end

	return error("Seriously bad engine. Can't find a place to store the GUI. Robust code can't help this much incompetence.", 0)
end)()

SharedTable.Fluent = Library

Notification:Init(BaseContainer)

Library.UIContainer = BaseContainer.Parent
Library.GUI = BaseContainer

function Library:SafeCallback(Function, ...)
	task.spawn(function(...)
		local Success, Event = pcall(Function, ...)

		if not Success then
			local _, i = Event:find(":%d+: ")

			task.defer(error, Event)

			Library:Notify({
				Title = "Interface",
				Content = "Callback error",
				SubContent = if typeof(i) == "number" then Event:sub(i + 1) else Event,
				Duration = 5,
			})
		end
	end, ...)
end

function Library.Utilities:Resize(X: number, Y: number): (number, number)
	local x, y, CurrentSize = X / 1920, Y / 1080, Camera.ViewportSize
	return CurrentSize.X * x, CurrentSize.Y * y
end

function Library.Utilities:Truncate(number: number, decimals: number, round: boolean): number
	local shift = 10 ^ (typeof(decimals) == "number" and math.max(decimals, 0) or 0)

	if round then
		return math.round(number * shift) // 1 / shift
	else
		return number * shift // 1 / shift
	end
end

function Library.Utilities:Round(Number: number, Factor: number): number
	return Library.Utilities:Truncate(Number, Factor, true)
end

function Library.Utilities:GetIcon(Name: string): { Image: string, ImageRectSize: Vector2, ImageRectOffset: Vector2 }
	return Name ~= "SetIcon" and Library.Utilities.Icons[Name] or nil
end

function Library.Utilities:Prettify(ToPrettify: EnumItem & string & number): string | number

	if typeof(ToPrettify) == "EnumItem" then
		return ({ToPrettify.Name:gsub("(%l)(%u)", "%1 %2")})[1]
	elseif typeof(ToPrettify) == "string" then
		return ({ToPrettify:gsub("(%l)(%u)", "%1 %2")})[1]
	elseif typeof(ToPrettify) == "number" then
		return Library.Utilities:Round(ToPrettify, 2)
	else
		return tostring(ToPrettify)
	end
end

function Library.Utilities:Clone<Original>(ToClone: {[any]: any} & (...any) -> (...any) & Object & Original): (Original, boolean)
	return Clone(ToClone)
end

function Library.Utilities:GetOS()
	local OSName = "Unknown"

	if GuiService:IsTenFootInterface() then
		local L2Button_Name = UserInputService:GetStringForKeyCode(Enum.KeyCode.ButtonL2)

		OSName = if L2Button_Name == "ButtonLT" then "Xbox" elseif L2Button_Name == "ButtonL2" then "PlayStation" else "Console"
	elseif GuiService.IsWindows then
		OSName = "Windows"
	elseif version():find("^0.") == 1 then
		OSName = "macOS"
	elseif version():find("^2.") == 1 then
		OSName = UserInputService.VREnabled and "MetaHorizon" or "Mobile"
	end

	return OSName
end

local ElementsTable = {}

local Button = {} do
	Button.__index = Button
	Button.__type = "Button"

	function Button:New(Config)
		assert(Config.Title, "Button - Missing Title")
		Config.Callback = Config.Callback or function() end

		local ButtonFrame = Components.Element(Config.Title, Config.Description, self.Container, true)

		local ButtonIco = New("ImageLabel", {
			Size = UDim2.fromOffset(16, 16),
			AnchorPoint = Vector2.new(1, 0.5),
			Position = UDim2.new(1, -10, 0.5, 0),
			BackgroundTransparency = 1,
			Parent = ButtonFrame.Frame,
			ThemeTag = {
				ImageColor3 = "Text",
			}
		}) :: ImageLabel

		self.Library.Utilities.Icons:SetIcon(ButtonIco, "chevron-right")

		Creator.AddSignal(ButtonFrame.Frame.MouseButton1Click, function()
			if typeof(Config.Callback) == "function" then
				self.Library:SafeCallback(Config.Callback, Config.Value)
			end
		end)

		ButtonFrame.Instance = ButtonFrame

		return ButtonFrame
	end
end

ElementsTable.Button = Button

local Toggle = {} do
	Toggle.__index = Toggle
	Toggle.__type = "Toggle"

	function Toggle:New(Idx, Config)
		local Library = self.Library
		assert(Config.Title, "Toggle - Missing Title")

		local Toggle = {
			Value = Config.Default or Config.Value or false,
			Callback = Config.Callback or function(Value) end,
			Type = "Toggle",
		}

		local ToggleFrame = Components.Element(Config.Title, Config.Description, self.Container, true)
		ToggleFrame.DescLabel.Size = UDim2.new(1, -54, 0, 14)

		Toggle.SetTitle = ToggleFrame.SetTitle
		Toggle.SetDesc = ToggleFrame.SetDesc

		local ToggleCircle = New("ImageLabel", {
			AnchorPoint = Vector2.new(0, 0.5),
			Size = UDim2.fromOffset(14, 14),
			Position = UDim2.new(0, 2, 0.5, 0),
			Image = "http://www.roblox.com/asset/?id=12266946128",
			ImageTransparency = 0.5,
			ThemeTag = {
				ImageColor3 = "ToggleSlider",
			},
		}) :: ImageLabel

		local ToggleBorder = New("UIStroke", {
			Transparency = 0.5,
			ThemeTag = {
				Color = "ToggleSlider",
			},
		})

		local ToggleSlider = New("Frame", {
			Size = UDim2.fromOffset(36, 18),
			AnchorPoint = Vector2.new(1, 0.5),
			Position = UDim2.new(1, -10, 0.5, 0),
			Parent = ToggleFrame.Frame,
			BackgroundTransparency = 1,
			ThemeTag = {
				BackgroundColor3 = "Accent",
			},
		}, {
			New("UICorner", {
				CornerRadius = UDim.new(0, 9),
			}),
			ToggleBorder,
			ToggleCircle,
		}) :: Frame

		function Toggle:OnChanged(Func)
			Toggle.Changed = Func
			Library:SafeCallback(Func, Toggle.Value, Toggle.Value)
		end

		function Toggle:SetValue(Value)
			Value = not not Value

			rawset(Toggle, "Value", Value)

			Creator.OverrideTag(ToggleBorder, { Color = Toggle.Value and "Accent" or "ToggleSlider" })
			Creator.OverrideTag(ToggleCircle, { ImageColor3 = Toggle.Value and "ToggleToggled" or "ToggleSlider" })

			ToggleCircle:TweenPosition(
				UDim2.new(0, Toggle.Value and 19 or 2, 0.5, 0),
				Enum.EasingDirection.Out,
				Enum.EasingStyle.Quint,
				.25,
				true
			)

			TweenService:Create(
				ToggleSlider,
				TweenInfo.new(0.25, Enum.EasingStyle.Quint, Enum.EasingDirection.Out),
				{ BackgroundTransparency = Toggle.Value and 0 or 1 }
			):Play()

			ToggleCircle.ImageTransparency = Toggle.Value and 0 or 0.5

			if typeof(Toggle.Callback) == "function" then
				Library:SafeCallback(Toggle.Callback, Toggle.Value)
			end
			if typeof(Toggle.Changed) == "function" then
				Library:SafeCallback(Toggle.Changed, Toggle.Value)
			end
		end

		function Toggle:Destroy()
			ToggleFrame:Destroy()
			Library.Options[Idx] = nil
		end

		Creator.AddSignal(ToggleFrame.Frame.MouseButton1Click, function()
			Toggle:SetValue(not Toggle.Value)
		end)

		Toggle.Keybind = setmetatable({}, { -- TODO: Rewrite this piece of shit
			__call = function(_, self, Idx, Config)
				local Keybind = {
					Value = Config.Default or Config.Value or Enum.KeyCode.Unknown,
					Toggled = false,
					Mode = Config.Mode or "Toggle",
					Type = "Keybind",
					Callback = Config.Callback or function(Value) end,
					ChangedCallback = Config.ChangedCallback or function(New) end,
					Instance = nil
				}

				local Picking = false

				local KeybindDisplayLabel = New("TextLabel", {
					FontFace = Font.new("rbxasset://fonts/families/GothamSSm.json", Enum.FontWeight.Regular, Enum.FontStyle.Normal),
					Text = Library.Utilities:Prettify(Keybind.Value),
					TextColor3 = Color3.fromRGB(240, 240, 240),
					TextSize = 13,
					TextXAlignment = Enum.TextXAlignment.Center,
					Size = UDim2.new(0, 0, 0, 14),
					Position = UDim2.new(0, 0, 0.5, 0),
					AnchorPoint = Vector2.new(0, 0.5),
					BackgroundColor3 = Color3.fromRGB(255, 255, 255),
					AutomaticSize = Enum.AutomaticSize.X,
					BackgroundTransparency = 1,
					ThemeTag = {
						TextColor3 = "Text",
					},
				})

				local KeybindDisplayFrame: TextButton = New("TextButton", {
					Size = UDim2.fromOffset(0, 30),
					Position = UDim2.new(1, -10, 0.5, 0),
					AnchorPoint = Vector2.new(1, 0.5),
					BackgroundTransparency = 0.9,
					Parent = ToggleFrame.Frame,
					AutomaticSize = Enum.AutomaticSize.X,
					ThemeTag = {
						BackgroundColor3 = "Keybind",
					},
				}, {
					New("UICorner", {
						CornerRadius = UDim.new(0, 5),
					}),
					New("UIPadding", {
						PaddingLeft = UDim.new(0, 8),
						PaddingRight = UDim.new(0, 8),
					}),
					New("UIStroke", {
						Transparency = 0.5,
						ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
						ThemeTag = {
							Color = "InElementBorder",
						},
					}),
					KeybindDisplayLabel
				})

				Keybind.Instance = setmetatable({
					CreatedAt = tick()
				}, {
					__index = function(self, idx)
						if rawget(self, idx) then
							return rawget(self, idx)
						else
							return KeybindDisplayFrame[idx]
						end
					end
				})

				local function UpdateTogglePosition()
					ToggleSlider.Position = UDim2.new(1, KeybindDisplayFrame.Position.X.Offset - KeybindDisplayFrame.AbsoluteSize.X - 10, 0.5, 0)
				end

				function Keybind:GetState()
					if UserInputService:GetFocusedTextBox() and self.Mode ~= "Always" then
						return false
					end

					if self.Mode == "Always" then
						return true
					elseif self.Mode == "Hold" then
						if self.Value == "None" then
							return false
						end

						local Key = self.Value

						if Key == "LeftMousebutton" or Key == "RightMousebutton" then
							return Key == "LeftMousebutton" and UserInputService:IsMouseButtonPressed(Enum.UserInputType.MouseButton1)
								or Key == "RightMousebutton"
								and UserInputService:IsMouseButtonPressed(Enum.UserInputType.MouseButton2)
						else
							return UserInputService:IsKeyDown(Enum.KeyCode[self.Value])
						end
					else
						return self.Toggled
					end
				end

				function Keybind:SetValue(Key, Mode)
					Key = Key or self.Value
					Mode = Mode or self.Mode

					self.Value = Key
					self.Mode = Mode

					KeybindDisplayLabel.Text = Library.Utilities:Prettify(self.Value)
				end

				function Keybind:OnClick(Callback)
					self.Clicked = Callback
				end

				function Keybind:OnChanged(Callback)
					self.Changed = Callback
					Library:SafeCallback(Callback, self.Value, self.Value)
				end

				function Keybind:DoClick()
					Toggle:SetValue(not Toggle.Value)

					if typeof(self.Callback) == "function" then
						Library:SafeCallback(self.Callback, self.Value)
					end
					if typeof(self.Clicked) == "function" then
						Library:SafeCallback(self.Clicked, self.Value)
					end
				end

				function Keybind:Destroy()
					KeybindDisplayFrame.Size = UDim2.new()
					KeybindDisplayFrame.Position = UDim2.new()
					KeybindDisplayFrame:Destroy()
					Library.Options[Idx] = nil
				end

				Creator.AddSignal(KeybindDisplayFrame.InputBegan, function(Input)
					if
						Input.UserInputType == Enum.UserInputType.MouseButton1
						or Input.UserInputType == Enum.UserInputType.Touch
					then
						Picking = true
						KeybindDisplayLabel.Text = "..."

						wait(0.2)

						UserInputService.InputBegan:Once(function(Input)
							local Key

							if Input.UserInputType == Enum.UserInputType.Keyboard then
								Key = Input.KeyCode.Name
							elseif Input.UserInputType == Enum.UserInputType.MouseButton1 then
								Key = "LeftMousebutton"
							elseif Input.UserInputType == Enum.UserInputType.MouseButton2 then
								Key = "RightMousebutton"
							end

							UserInputService.InputEnded:Once(function(Input)
								if (Input.KeyCode.Name == Key
									or Key == "LeftMousebutton" and Input.UserInputType == Enum.UserInputType.MouseButton1
									or Key == "RightMousebutton" and Input.UserInputType == Enum.UserInputType.MouseButton2)
									and not Library.Unloaded
								then
									Picking = false

									Keybind:SetValue(Key)

									Library:SafeCallback(self.ChangedCallback, Input.KeyCode or Input.UserInputType)
									Library:SafeCallback(self.Changed, Input.KeyCode or Input.UserInputType)
								end
							end)
						end)
					end
				end)

				Creator.AddSignal(UserInputService.InputBegan, function(Input)
					if not Picking and not UserInputService:GetFocusedTextBox() then
						if Keybind.Mode == "Toggle" then
							local Key = Keybind.Value

							if Key == "LeftMousebutton" or Key == "RightMousebutton" then
								if
									Key == "LeftMousebutton" and Input.UserInputType == Enum.UserInputType.MouseButton1
									or Key == "RightMousebutton" and Input.UserInputType == Enum.UserInputType.MouseButton2
								then
									Keybind.Toggled = not Keybind.Toggled
									Keybind:DoClick()
								end
							elseif Input.UserInputType == Enum.UserInputType.Keyboard then
								if Input.KeyCode.Name == Key or Input.KeyCode == Key then
									Keybind.Toggled = not Keybind.Toggled
									Keybind:DoClick()
								end
							end
						end
					end
				end)

				Creator.AddSignal(KeybindDisplayFrame:GetPropertyChangedSignal("AbsoluteSize"), UpdateTogglePosition)

				Library.Options[Idx] = Keybind

				Toggle.Keybind = Keybind

				return setmetatable(Toggle.Keybind, {
					__newindex =  function(self, index, newvalue)
						if index == "Value" then
							task.spawn(Keybind.SetValue, Keybind, newvalue)
						end
						rawset(self, index, newvalue)
					end
				})
			end
		})

		Toggle:SetValue(Toggle.Value)

		Library.Options[Idx] = Toggle

		Toggle.Instance = ToggleFrame

		return setmetatable(Toggle, {
			__newindex =  function(self, index, newvalue)
				if index == "Value" then
					task.spawn(Toggle.SetValue, Toggle, newvalue)
				end
				rawset(self, index, newvalue)
			end
		})
	end
end

ElementsTable.Toggle = Toggle

local Paragraph = {} do
	Paragraph.__index = Paragraph
	Paragraph.__type = "Paragraph"

	function Paragraph:New(Idx, Config)
		local Library = self.Library
		assert(Config.Title, "Paragraph - Missing Title")
		Config.Content = Config.Content or ""

		local Paragraph = {
			Value = Config.Content,
			Callback = Config.Callback or function(Value: string) end,
			Type = "Paragraph",
		}

		local ParagraphFrame = Components.Element(Config.Title, Paragraph.Value, self.Container, false, {
			TitleAlignment = Config.TitleAlignment == "Middle" and "Center" or Config.TitleAlignment,
			DescriptionAlignment = Config.ContentAlignment == "Middle" and "Center" or Config.ContentAlignment
		})

		ParagraphFrame.Frame.BackgroundTransparency = 0.92
		ParagraphFrame.Border.Transparency = 0.6


		function Paragraph:OnChanged(Func)
			Paragraph.Changed = Func
			Library:SafeCallback(Func, Paragraph.Value, Paragraph.Value)
		end

		function Paragraph:SetContent(Value)
			Value = Value or ""
			rawset(Paragraph, "Value", Value)

			ParagraphFrame:SetDesc(Value)

			ParagraphFrame.Frame.BackgroundTransparency = 0.92
			ParagraphFrame.Border.Transparency = 0.6

			if typeof(Paragraph.Callback) == "function" then
				Library:SafeCallback(Paragraph.Callback, Paragraph.Value)
			end
			if typeof(Paragraph.Changed) == "function" then
				Library:SafeCallback(Paragraph.Changed, Paragraph.Value)
			end
		end

		function Paragraph:SetValue(Value)
			Paragraph:SetContent(Value)
		end

		function Paragraph:Destroy()
			ParagraphFrame:Destroy()
			Library.Options[Idx] = nil
		end

		Paragraph:SetValue(Paragraph.Value)

		Library.Options[Idx] = Paragraph

		Paragraph.Instance = ParagraphFrame

		return setmetatable(Paragraph, {
			__newindex =  function(self, index, newvalue)
				if index == "Value" then
					task.spawn(Paragraph.SetValue, Paragraph, newvalue)
				end
				rawset(self, index, newvalue)
			end
		})

	end
end

ElementsTable.Paragraph = Paragraph

local Dropdown = {} do
	Dropdown.__index = Dropdown
	Dropdown.__type = "Dropdown"

	function Dropdown:New(Idx, Config)
		local Library = self.Library

		local Dropdown = {
			Values = (function()
				local Idxes = {}

				for i,v in next, Config.Values or {} do
					Idxes[#Idxes + 1] = v
				end

				return Idxes
			end)(),
			Value = Config.Default or Config.Value,
			Multi = Config.Multi or false,
			AutoDeselect = Config.AutoDeselect or false,
			Displayer = Config.Displayer or function(Value)
				return typeof(Value) ~= "number" and tostring(Library.Utilities:Prettify(Value)) or Value
			end,
			Buttons = {},
			Opened = false,
			Type = "Dropdown",
			Callback = Config.Callback or function() end,
			Changed = Config.Changed or function() end
		}

		local DropdownFrame = Components.Element(Config.Title, Config.Description, self.Container, false)
		DropdownFrame.DescLabel.Size = UDim2.new(1, -170, 0, 14)

		Dropdown.SetTitle = DropdownFrame.SetTitle
		Dropdown.SetDesc = DropdownFrame.SetDesc

		local DropdownDisplay = New("TextLabel", {
			FontFace = Font.new("rbxasset://fonts/families/GothamSSm.json", Enum.FontWeight.Regular, Enum.FontStyle.Normal),
			Text = "Value",
			TextColor3 = Color3.fromRGB(240, 240, 240),
			TextSize = 13,
			TextXAlignment = Enum.TextXAlignment.Left,
			Size = UDim2.new(1, -30, 0, 14),
			Position = UDim2.new(0, 8, 0.5, 0),
			AnchorPoint = Vector2.new(0, 0.5),
			BackgroundColor3 = Color3.fromRGB(255, 255, 255),
			BackgroundTransparency = 1,
			TextTruncate = Enum.TextTruncate.AtEnd,
			ThemeTag = {
				TextColor3 = "Text",
			},
		})

		local DropdownIco = New("ImageLabel", {
			Image = "rbxassetid://10709790948",
			Size = UDim2.fromOffset(16, 16),
			AnchorPoint = Vector2.new(1, 0.5),
			Position = UDim2.new(1, -8, 0.5, 0),
			BackgroundTransparency = 1,
			ThemeTag = {
				ImageColor3 = "SubText",
			}
		})

		local DropdownInner = New("TextButton", {
			Size = UDim2.fromOffset(160, 30),
			Position = UDim2.new(1, -10, 0.5, 0),
			AnchorPoint = Vector2.new(1, 0.5),
			BackgroundTransparency = 0.9,
			Parent = DropdownFrame.Frame,
			ThemeTag = {
				BackgroundColor3 = "DropdownFrame"
			}
		}, {
			New("UICorner", {
				CornerRadius = UDim.new(0, 5),
			}),
			New("UIStroke", {
				Transparency = 0.5,
				ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
				ThemeTag = {
					Color = "InElementBorder",
				},
			}),
			DropdownIco,
			DropdownDisplay,
		})

		local DropdownListLayout = New("UIListLayout", {
			Padding = UDim.new(0, 3),
		})

		local DropdownScrollFrame = New("ScrollingFrame", {
			Size = UDim2.new(1, -5, 1, -10),
			Position = UDim2.fromOffset(5, 5),
			BackgroundTransparency = 1,
			BottomImage = "rbxassetid://6889812791",
			MidImage = "rbxassetid://6889812721",
			TopImage = "rbxassetid://6276641225",
			ScrollBarImageColor3 = Color3.fromRGB(255, 255, 255),
			ScrollBarImageTransparency = 0.95,
			ScrollBarThickness = 4,
			BorderSizePixel = 0,
			CanvasSize = UDim2.fromScale(0, 0),
		}, {
			DropdownListLayout,
		})

		local DropdownHolderFrame = New("Frame", {
			Size = UDim2.fromScale(1, 0.6),
			ThemeTag = {
				BackgroundColor3 = "DropdownHolder",
			},
		}, {
			DropdownScrollFrame,
			New("UICorner", {
				CornerRadius = UDim.new(0, 7),
			}),
			New("UIStroke", {
				ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
				ThemeTag = {
					Color = "DropdownBorder",
				},
			}),
			New("ImageLabel", {
				BackgroundTransparency = 1,
				Image = "http://www.roblox.com/asset/?id=5554236805",
				ScaleType = Enum.ScaleType.Slice,
				SliceCenter = Rect.new(23, 23, 277, 277),
				Size = UDim2.fromScale(1, 1) + UDim2.fromOffset(30, 30),
				Position = UDim2.fromOffset(-15, -15),
				ImageColor3 = Color3.fromRGB(0, 0, 0),
				ImageTransparency = 0.1,
			}),
		}) :: Frame

		local ButtonSelector_BuildList = New("Frame", {
			Size = UDim2.fromOffset(4, 14),
			BackgroundColor3 = Color3.fromRGB(76, 194, 255),
			Position = UDim2.fromOffset(-1, 16),
			AnchorPoint = Vector2.new(0, 0.5),
			ThemeTag = {
				BackgroundColor3 = "Accent",
			}
		}, {
			New("UICorner", {
				CornerRadius = UDim.new(0, 2),
			}),
		}) :: Frame

		local ButtonLabel_BuildList = New("TextLabel", {
			FontFace = Font.new("rbxasset://fonts/families/GothamSSm.json"),
			TextColor3 = Color3.fromRGB(200, 200, 200),
			TextSize = 13,
			TextXAlignment = Enum.TextXAlignment.Left,
			BackgroundColor3 = Color3.fromRGB(255, 255, 255),
			AutomaticSize = Enum.AutomaticSize.Y,
			BackgroundTransparency = 1,
			Size = UDim2.fromScale(1, 1),
			Position = UDim2.fromOffset(10, 0),
			Name = "ButtonLabel",
			ThemeTag = {
				TextColor3 = "Text"
			}
		}) :: TextLabel

		local Button_BuildList = New("TextButton", {
			Size = UDim2.new(1, -5, 0, 32),
			BackgroundTransparency = 1,
			ZIndex = 23,
			Text = "",
			ThemeTag = {
				BackgroundColor3 = "DropdownOption"
			}
		}, {
			ButtonSelector_BuildList,
			ButtonLabel_BuildList,
			New("UICorner", {
				CornerRadius = UDim.new(0, 6),
			})
		}) :: TextButton

		local DropdownHolderCanvas = New("Frame", {
			BackgroundTransparency = 1,
			Size = UDim2.fromOffset(170, 300),
			Parent = self.Library.GUI,
			Visible = false,
		}, {
			DropdownHolderFrame,
			New("UISizeConstraint", {
				MinSize = Vector2.new(170, 0),
			}),
		})

		Library.OpenFrames[#Library.OpenFrames + 1] = DropdownHolderCanvas

		local function RecalculateListPosition()
			local Add = 0
			if Camera.ViewportSize.Y - DropdownInner.AbsolutePosition.Y < DropdownHolderCanvas.AbsoluteSize.Y - 5 then
				Add = DropdownHolderCanvas.AbsoluteSize.Y
				- 5
				- (Camera.ViewportSize.Y - DropdownInner.AbsolutePosition.Y)
					+ 40
			end
			DropdownHolderCanvas.Position =
				UDim2.fromOffset(DropdownInner.AbsolutePosition.X - 1, DropdownInner.AbsolutePosition.Y - 5 - Add)
		end

		local ListSizeX = 0
		local function RecalculateListSize()
			if #Dropdown.Values > 10 then
				DropdownHolderCanvas.Size = UDim2.fromOffset(ListSizeX, 392)
			else
				DropdownHolderCanvas.Size = UDim2.fromOffset(ListSizeX, DropdownListLayout.AbsoluteContentSize.Y + 10)
			end
		end

		local function RecalculateCanvasSize()
			DropdownScrollFrame.CanvasSize = UDim2.fromOffset(0, DropdownListLayout.AbsoluteContentSize.Y)
		end

		RecalculateListPosition()
		RecalculateListSize()

		Creator.AddSignal(DropdownInner:GetPropertyChangedSignal("AbsolutePosition"), RecalculateListPosition)

		local ScrollFrame = self.ScrollFrame
		function Dropdown:Open()
			Dropdown.Opened = true
			ScrollFrame.ScrollingEnabled = false
			DropdownHolderCanvas.Visible = true
			DropdownHolderFrame:TweenSize(
				UDim2.fromScale(1, 1),
				Enum.EasingDirection.Out,
				Enum.EasingStyle.Quart,
				.2
			)
		end

		function Dropdown:Close()
			Dropdown.Opened = false
			ScrollFrame.ScrollingEnabled = true
			DropdownHolderFrame.Size = UDim2.fromScale(1, 0.6)
			DropdownHolderCanvas.Visible = false
		end

		Creator.AddSignal(DropdownInner.MouseButton1Click, function()
			Dropdown:Open()
		end)

		Creator.AddSignal(UserInputService.InputBegan, function(Input)
			if
				Input.UserInputType == Enum.UserInputType.MouseButton1
				or Input.UserInputType == Enum.UserInputType.Touch
			then
				local AbsPos, AbsSize = DropdownHolderFrame.AbsolutePosition, DropdownHolderFrame.AbsoluteSize
				if
					Mouse.X < AbsPos.X
					or Mouse.X > AbsPos.X + AbsSize.X
					or Mouse.Y < (AbsPos.Y - 20 - 1)
					or Mouse.Y > AbsPos.Y + AbsSize.Y
				then
					Dropdown:Close()
				end
			end
		end)

		function Dropdown:Display()
			local Values = Dropdown.Values
			local Str = ""

			if Config.Multi then
				for Idx, Value in next, Values do
					if Dropdown.Value[Value] then
						Str = `{Str}{Dropdown.Displayer(Value)}, `
					end
				end
				Str = Str:sub(1, #Str - 2)
			else
				Str = Dropdown.Value and Dropdown.Displayer(Dropdown.Value) or ""
			end

			DropdownDisplay.Text = (Str == "" and "--" or Str)
		end

		function Dropdown:GetActiveValues()
			if Config.Multi then
				local Values = {}

				for Value, Bool in next, Dropdown.Value do
					Values[#Values + 1] = Value
				end

				return Values
			else
				return Dropdown.Value and 1 or 0
			end
		end

		function Dropdown:BuildDropdownList()
			local Values = Dropdown.Values
			local Buttons = {}

			for _, Element in next, DropdownScrollFrame:GetChildren() do
				if not Element:IsA("UIListLayout") then
					Element:Destroy()
				end
			end

			local Count = 0

			for Idx, Value in next, Values do
				local Table = {}
				local Selected

				Count += 1

				local Button = Button_BuildList:Clone()
				local ButtonSelector, ButtonLabel = Button.Frame, Button.ButtonLabel

				-- AddThemeObject causes some small stuttering, the reason for that is because of 'Creator.UpdateTheme'
				-- which is called every single time a dropdown is (re)built.
				-- I have no idea how to optimize this so suggestions are welcome.

				Creator.AddThemeObject(Button, {
					BackgroundColor3 = "DropdownOption"
				})

				Creator.AddThemeObject(ButtonSelector, {
					BackgroundColor3 = "Accent",
				})

				Creator.AddThemeObject(ButtonLabel, {
					TextColor3 = "Text"
				})

				if Config.Multi then
					Selected = Dropdown.Value[Value]
				else
					Selected = Dropdown.Value == Value
				end

				local BackMotor, SetBackTransparency = Creator.SpringMotor(1, Button, "BackgroundTransparency")
				local SelMotor, SetSelTransparency = Creator.SpringMotor(1, ButtonSelector, "BackgroundTransparency")
				local SelectorSizeMotor = Flipper.SingleMotor.new(6)

				SelectorSizeMotor:onStep(function(value)
					ButtonSelector.Size = UDim2.new(0, 4, 0, value)
				end)

				Creator.AddSignal(Button.MouseEnter, function()
					SetBackTransparency(Selected and 0.85 or 0.89)
				end)

				Creator.AddSignal(Button.MouseLeave, function()
					SetBackTransparency(Selected and 0.89 or 1)
				end)

				Creator.AddSignal(Button.MouseButton1Down, function()
					SetBackTransparency(0.92)
				end)

				Creator.AddSignal(Button.MouseButton1Up, function()
					SetBackTransparency(Selected and 0.85 or 0.89)
				end)

				function Table:UpdateButton()
					if Config.Multi then
						Selected = Dropdown.Value[Value]
						if Selected then
							SetBackTransparency(0.89)
						end
					else
						Selected = Dropdown.Value == Value
						SetBackTransparency(Selected and 0.89 or 1)
					end

					SelectorSizeMotor:setGoal(Flipper.Spring.new(Selected and 14 or 6, { frequency = 6 }))
					SetSelTransparency(Selected and 0 or 1)
				end

				ButtonLabel.InputBegan:Connect(function(Input)
					if
						Input.UserInputType == Enum.UserInputType.MouseButton1
						or Input.UserInputType == Enum.UserInputType.Touch
					then
						local Try = not Selected

						if Dropdown:GetActiveValues() == 1 and not Try and not Config.AllowNull then
						else
							if Config.Multi then
								Selected = Try
								Dropdown.Value[Value] = Selected and true or nil
							else
								Selected = Try
								Dropdown.Value = Selected and Value or nil

								for _, OtherButton in next, Buttons do
									OtherButton:UpdateButton()
								end
							end

							Table:UpdateButton()
							Dropdown:Display()

							if typeof(Dropdown.Callback) == "function" then
								Library:SafeCallback(Dropdown.Callback, Dropdown.Value)
							end
							if typeof(Dropdown.Changed) == "function" then
								Library:SafeCallback(Dropdown.Changed, Dropdown.Value)
							end
						end
					end
				end)

				ButtonLabel.Text = Dropdown.Displayer(Value)
				Button.Parent = DropdownScrollFrame

				Table:UpdateButton()
				Dropdown:Display()

				Buttons[Button] = Table

				if Count % 30 == 0 then
					task.wait()
				end
			end

			ListSizeX = 0

			for Button, Table in next, Buttons do
				if Button.ButtonLabel then
					if Button.ButtonLabel.TextBounds.X > ListSizeX then
						ListSizeX = Button.ButtonLabel.TextBounds.X
					end
				end
			end

			ListSizeX = ListSizeX + 30

			RecalculateCanvasSize()
			RecalculateListSize()
		end

		function Dropdown:SetValues(NewValues)
			if NewValues then
				rawset(Dropdown, "Values", NewValues)
			end

			Dropdown:BuildDropdownList()
		end

		function Dropdown:OnChanged(Func)
			Dropdown.Changed = Func
			Library:SafeCallback(Func, Dropdown.Value, Dropdown.Value)
		end

		function Dropdown:SetValue(Val)
			if Dropdown.Multi then
				local nTable = {}

				for Value, Bool in next, Val do
					if table.find(Dropdown.Values, Value) then
						nTable[Value] = true
					end
				end

				rawset(Dropdown, "Value", nTable)
			else
				if not Val then
					rawset(Dropdown, "Value", nil)
				elseif table.find(Dropdown.Values, Val) then
					rawset(Dropdown, "Value", Val)
				end
			end

			Dropdown:BuildDropdownList()

			if typeof(Dropdown.Callback) == "function" then
				Library:SafeCallback(Dropdown.Callback, Dropdown.Value)
			end
			if typeof(Dropdown.Changed) == "function" then
				Library:SafeCallback(Dropdown.Changed, Dropdown.Value)
			end
		end

		function Dropdown:Destroy()
			DropdownFrame:Destroy()
			Library.Options[Idx] = nil
		end

		Dropdown:BuildDropdownList()
		Dropdown:Display()

		local Defaults = {}

		if type(Config.Default) == "table" then
			for _, Value in next, Config.Default do
				local Indx = table.find(Dropdown.Values, Value)

				if Indx then
					Defaults[#Defaults + 1] = Indx
				end
			end
			table.clear(Config.Default)
		elseif type(Config.Default) == "number" and Dropdown.Values[Config.Default] ~= nil then
			Defaults[#Defaults + 1] = Config.Default
		else
			local Indx = table.find(Dropdown.Values, Config.Default)
			if Indx then
				Defaults[#Defaults + 1] = Indx
			end
		end

		if next(Defaults) then
			for i = 1, #Defaults do
				local Index = Defaults[i]

				if Config.Multi then
					Dropdown.Value[Dropdown.Values[Index]] = true
				else
					Dropdown.Value = Dropdown.Values[Index]
					break
				end
			end

			Dropdown:BuildDropdownList()
			Dropdown:Display()
		end

		Library.Options[Idx] = Dropdown

		Dropdown.Instance = DropdownFrame

		return setmetatable(Dropdown, {
			__newindex = function(self, index, newvalue)
				if index == "Value" then
					task.spawn(Dropdown.SetValue, Dropdown, newvalue)
				elseif index == "Values" or index == "List" then
					task.spawn(Dropdown.SetValues, Dropdown, newvalue)
				end
				rawset(self, index, newvalue)
			end
		})
	end
end

ElementsTable.Dropdown = Dropdown

local Input = {} do
	Input.__index = Input
	Input.__type = "Input"

	function Input:New(Idx, Config)
		local Library = self.Library
		assert(Config.Title, "Input - Missing Title")
		Config.Callback = Config.Callback or function() end

		local Input = {
			Value = Config.Default or Config.Value or "",
			Numeric = Config.Numeric or false,
			Finished = Config.Finished or false,
			Callback = Config.Callback or function(Value) end,
			ClearOnFocusLost = Config.ClearOnFocusLost or false,
			Type = "Input",
		}

		local InputFrame = Components.Element(Config.Title, Config.Description, self.Container, false)

		Input.SetTitle = InputFrame.SetTitle
		Input.SetDesc = InputFrame.SetDesc

		local Textbox = Components.Textbox(InputFrame.Frame, true)
		Textbox.Frame.Position = UDim2.new(1, -10, 0.5, 0)
		Textbox.Frame.AnchorPoint = Vector2.new(1, 0.5)
		Textbox.Frame.Size = UDim2.fromOffset(160, 30)
		Textbox.Input.Text = Config.Default or ""
		Textbox.Input.PlaceholderText = Config.Placeholder or ""

		local Box = Textbox.Input

		function Input:SetValue(Text)
			if Config.MaxLength and #Text > Config.MaxLength then
				Text = Text:sub(1, Config.MaxLength)
			end

			if Input.Numeric then
				if (not tonumber(Text)) and Text:len() > 0 then
					Text = Input.Value
				end
			end

			rawset(Input, "Value", Text)
			Box.Text = Text

			if typeof(Input.Callback) == "function" then
				Library:SafeCallback(Input.Callback, Input.Value)
			end
			if typeof(Input.Changed) == "function" then
				Library:SafeCallback(Input.Changed, Input.Value)
			end
		end

		if Input.Finished then
			Creator.AddSignal(Box.FocusLost, function(enter: boolean, input: InputObject)
				if not enter then
					return
				end

				Input:SetValue(Box.Text)

				if Config.ClearOnFocusLost then
					Box.Text = ""
				end
			end)
		else
			Creator.AddSignal(Box:GetPropertyChangedSignal("Text"), function()
				Input:SetValue(Box.Text)
			end)
		end

		function Input:OnChanged(Func)
			Input.Changed = Func
			Library:SafeCallback(Func, Input.Value, Input.Value)
		end

		function Input:Destroy()
			InputFrame:Destroy()
			Library.Options[Idx] = nil
		end

		Library.Options[Idx] = Input

		Input.Instance = InputFrame

		return setmetatable(Input, {
			__newindex =  function(self, index, newvalue)
				if index == "Value" then
					task.spawn(Input.SetValue, Input, newvalue)
				end
				rawset(self, index, newvalue)
			end
		})
	end
end

ElementsTable.Input = Input

local Colorpicker = {} do
	Colorpicker.__index = Colorpicker
	Colorpicker.__type = "Colorpicker"

	function Colorpicker:New(Idx, Config)
		local Library = self.Library
		assert(Config.Title, "Colorpicker - Missing Title")
		assert(Config.Default, "AddColorPicker: Missing default value.")

		local Colorpicker = {
			Value = Config.Default or Config.Value,
			Transparency = Config.Transparency or 0,
			UpdateOnChange = Config.UpdateOnChange or Config.UpdateWhileSliding or false,
			Type = "Colorpicker",
			Title = type(Config.Title) == "string" and Config.Title or "Colorpicker",
			Callback = Config.Callback or function(Color) end,
		}

		function Colorpicker:SetHSVFromRGB(Color)
			local H, S, V = Color3.toHSV(Color)
			Colorpicker.Hue = H
			Colorpicker.Sat = S
			Colorpicker.Vib = V
		end

		Colorpicker:SetHSVFromRGB(Colorpicker.Value)

		local ColorpickerFrame = Components.Element(Config.Title, Config.Description, self.Container, true)

		Colorpicker.SetTitle = ColorpickerFrame.SetTitle
		Colorpicker.SetDesc = ColorpickerFrame.SetDesc

		local DisplayFrameColor = New("Frame", {
			Size = UDim2.fromScale(1, 1),
			BackgroundColor3 = Colorpicker.Value,
			Parent = ColorpickerFrame.Frame,
		}, {
			New("UICorner", {
				CornerRadius = UDim.new(0, 4),
			}),
		}) :: Frame

		local DisplayFrame = New("ImageLabel", {
			Size = UDim2.fromOffset(26, 26),
			Position = UDim2.new(1, -10, 0.5, 0),
			AnchorPoint = Vector2.new(1, 0.5),
			Parent = ColorpickerFrame.Frame,
			Image = "http://www.roblox.com/asset/?id=14204231522",
			ImageTransparency = 0.45,
			ScaleType = Enum.ScaleType.Tile,
			TileSize = UDim2.fromOffset(40, 40),
		}, {
			New("UICorner", {
				CornerRadius = UDim.new(0, 4),
			}),
			DisplayFrameColor,
		}) :: ImageLabel

		local function CreateColorDialog()
			local Dialog = Components.Dialog:Create()
			Dialog.Title.Text = Colorpicker.Title
			Dialog.Root.Size = UDim2.fromOffset(430, 330)

			local Hue, Sat, Vib = Colorpicker.Hue, Colorpicker.Sat, Colorpicker.Vib
			local Transparency = Colorpicker.Transparency

			local OrigHue, OrigSat, OrigVib, OrigTransparency = Colorpicker.Hue, Colorpicker.Sat, Colorpicker.Vib, Colorpicker.Transparency

			local function CreateInput()
				local Box = Components.Textbox()
				Box.Frame.Parent = Dialog.Root
				Box.Frame.Size = UDim2.new(0, 90, 0, 32)

				return Box
			end

			local function CreateInputLabel(Text, Pos): TextLabel
				return New("TextLabel", {
					FontFace = Font.new(
						"rbxasset://fonts/families/GothamSSm.json",
						Enum.FontWeight.Medium,
						Enum.FontStyle.Normal
					),
					Text = Text,
					TextColor3 = Color3.fromRGB(240, 240, 240),
					TextSize = 13,
					TextXAlignment = Enum.TextXAlignment.Left,
					Size = UDim2.new(1, 0, 0, 32),
					Position = Pos,
					BackgroundTransparency = 1,
					Parent = Dialog.Root,
					ThemeTag = {
						TextColor3 = "Text",
					},
				}) :: TextLabel
			end

			local function GetRGB()
				local Value = Color3.fromHSV(Hue, Sat, Vib)
				return { R = math.floor(Value.R * 255), G = math.floor(Value.G * 255), B = math.floor(Value.B * 255) }
			end

			local SatCursor = New("ImageLabel", {
				Size = UDim2.new(0, 18, 0, 18),
				ScaleType = Enum.ScaleType.Fit,
				AnchorPoint = Vector2.new(0.5, 0.5),
				BackgroundTransparency = 1,
				Image = "http://www.roblox.com/asset/?id=4805639000",
			}) :: ImageLabel

			local SatVibMap = New("ImageLabel", {
				Size = UDim2.fromOffset(180, 160),
				Position = UDim2.fromOffset(20, 55),
				Image = "rbxassetid://4155801252",
				BackgroundColor3 = Colorpicker.Value,
				BackgroundTransparency = 0,
				Parent = Dialog.Root,
			}, {
				New("UICorner", {
					CornerRadius = UDim.new(0, 4),
				}),
				SatCursor,
			}) :: ImageLabel

			local OldColorFrame = New("Frame", {
				BackgroundColor3 = Colorpicker.Value,
				Size = UDim2.fromScale(1, 1),
				BackgroundTransparency = Colorpicker.Transparency,
			}, {
				New("UICorner", {
					CornerRadius = UDim.new(0, 4),
				}),
			}) :: Frame

			local OldColorFrameChecker = New("ImageLabel", {
				Image = "http://www.roblox.com/asset/?id=14204231522",
				ImageTransparency = 0.45,
				ScaleType = Enum.ScaleType.Tile,
				TileSize = UDim2.fromOffset(40, 40),
				BackgroundTransparency = 1,
				Position = UDim2.fromOffset(112, 220),
				Size = UDim2.fromOffset(88, 24),
				Parent = Dialog.Root,
			}, {
				New("UICorner", {
					CornerRadius = UDim.new(0, 4),
				}),
				New("UIStroke", {
					Thickness = 2,
					Transparency = 0.75,
				}),
				OldColorFrame,
			}) :: ImageLabel

			local DialogDisplayFrame = New("Frame", {
				BackgroundColor3 = Colorpicker.Value,
				Size = UDim2.fromScale(1, 1),
				BackgroundTransparency = 0,
			}, {
				New("UICorner", {
					CornerRadius = UDim.new(0, 4),
				}),
			}) :: Frame

			local DialogDisplayFrameChecker = New("ImageLabel", {
				Image = "http://www.roblox.com/asset/?id=14204231522",
				ImageTransparency = 0.45,
				ScaleType = Enum.ScaleType.Tile,
				TileSize = UDim2.fromOffset(40, 40),
				BackgroundTransparency = 1,
				Position = UDim2.fromOffset(20, 220),
				Size = UDim2.fromOffset(88, 24),
				Parent = Dialog.Root,
			}, {
				New("UICorner", {
					CornerRadius = UDim.new(0, 4),
				}),
				New("UIStroke", {
					Thickness = 2,
					Transparency = 0.75,
				}),
				DialogDisplayFrame,
			}) :: ImageLabel

			local SequenceTable = {}

			for Color = 0, 1, 0.1 do
				SequenceTable[#SequenceTable + 1] = ColorSequenceKeypoint.new(Color, Color3.fromHSV(Color, 1, 1))
			end

			local HueSliderGradient = New("UIGradient", {
				Color = ColorSequence.new(SequenceTable),
				Rotation = 90,
			}) :: UIGradient

			local HueDragHolder = New("Frame", {
				Size = UDim2.new(1, 0, 1, -10),
				Position = UDim2.fromOffset(0, 5),
				BackgroundTransparency = 1,
			}) :: Frame

			local HueDrag = New("ImageLabel", {
				Size = UDim2.fromOffset(14, 14),
				Image = "http://www.roblox.com/asset/?id=12266946128",
				Parent = HueDragHolder,
				ThemeTag = {
					ImageColor3 = "DialogInput",
				},
			}) :: ImageLabel

			local HueSlider = New("Frame", {
				Size = UDim2.fromOffset(12, 190),
				Position = UDim2.fromOffset(210, 55),
				Parent = Dialog.Root,
			}, {
				New("UICorner", {
					CornerRadius = UDim.new(1, 0),
				}),
				HueSliderGradient,
				HueDragHolder,
			}) :: Frame

			local HexInput = CreateInput()
			HexInput.Frame.Position = UDim2.fromOffset(Config.Transparency and 260 or 240, 55)
			CreateInputLabel("Hex", UDim2.fromOffset(Config.Transparency and 360 or 340, 55))

			local RedInput = CreateInput()
			RedInput.Frame.Position = UDim2.fromOffset(Config.Transparency and 260 or 240, 95)
			CreateInputLabel("Red", UDim2.fromOffset(Config.Transparency and 360 or 340, 95))

			local GreenInput = CreateInput()
			GreenInput.Frame.Position = UDim2.fromOffset(Config.Transparency and 260 or 240, 135)
			CreateInputLabel("Green", UDim2.fromOffset(Config.Transparency and 360 or 340, 135))

			local BlueInput = CreateInput()
			BlueInput.Frame.Position = UDim2.fromOffset(Config.Transparency and 260 or 240, 175)
			CreateInputLabel("Blue", UDim2.fromOffset(Config.Transparency and 360 or 340, 175))

			local AlphaInput
			if Config.Transparency then
				AlphaInput = CreateInput()
				AlphaInput.Frame.Position = UDim2.fromOffset(260, 215)
				CreateInputLabel("Alpha", UDim2.fromOffset(360, 215))
			end

			local TransparencySlider, TransparencyDrag, TransparencyColor
			if Config.Transparency then
				local TransparencyDragHolder = New("Frame", {
					Size = UDim2.new(1, 0, 1, -10),
					Position = UDim2.fromOffset(0, 5),
					BackgroundTransparency = 1,
				}) :: Frame

				TransparencyDrag = New("ImageLabel", {
					Size = UDim2.fromOffset(14, 14),
					Image = "http://www.roblox.com/asset/?id=12266946128",
					Parent = TransparencyDragHolder,
					ThemeTag = {
						ImageColor3 = "DialogInput",
					},
				}) :: ImageLabel

				TransparencyColor = New("Frame", {
					Size = UDim2.fromScale(1, 1),
				}, {
					New("UIGradient", {
						Transparency = NumberSequence.new({
							NumberSequenceKeypoint.new(0, 0),
							NumberSequenceKeypoint.new(1, 1),
						}),
						Rotation = 270,
					}),
					New("UICorner", {
						CornerRadius = UDim.new(1, 0),
					}),
				}) :: Frame

				TransparencySlider = New("Frame", {
					Size = UDim2.fromOffset(12, 190),
					Position = UDim2.fromOffset(230, 55),
					Parent = Dialog.Root,
					BackgroundTransparency = 1,
				}, {
					New("UICorner", {
						CornerRadius = UDim.new(1, 0),
					}),
					New("ImageLabel", {
						Image = "http://www.roblox.com/asset/?id=14204231522",
						ImageTransparency = 0.45,
						ScaleType = Enum.ScaleType.Tile,
						TileSize = UDim2.fromOffset(40, 40),
						BackgroundTransparency = 1,
						Size = UDim2.fromScale(1, 1),
						Parent = Dialog.Root,
					}, {
						New("UICorner", {
							CornerRadius = UDim.new(1, 0),
						}),
					}),
					TransparencyColor,
					TransparencyDragHolder,
				}) :: Frame
			end

			local function Display()
				SatVibMap.BackgroundColor3 = Color3.fromHSV(Hue, 1, 1)
				HueDrag.Position = UDim2.new(0, -1, Hue, -6)
				SatCursor.Position = UDim2.new(Sat, 0, 1 - Vib, 0)
				DialogDisplayFrame.BackgroundColor3 = Color3.fromHSV(Hue, Sat, Vib)

				HexInput.Input.Text = `#{Color3.fromHSV(Hue, Sat, Vib):ToHex()}`
				RedInput.Input.Text = GetRGB()["R"]
				GreenInput.Input.Text = GetRGB()["G"]
				BlueInput.Input.Text = GetRGB()["B"]

				if Config.Transparency then
					TransparencyColor.BackgroundColor3 = Color3.fromHSV(Hue, Sat, Vib)
					DialogDisplayFrame.BackgroundTransparency = Transparency
					TransparencyDrag.Position = UDim2.new(0, -1, 1 - Transparency, -6)
					AlphaInput.Input.Text = `{Library.Utilities:Round((1 - Transparency) * 100, 0)}%`
				end

				if Colorpicker.UpdateOnChange then
					Colorpicker:SetValue({ Hue, Sat, Vib }, Transparency)
				end
			end

			Creator.AddSignal(HexInput.Input.FocusLost, function(Enter)
				if Enter then
					local Success, Result = pcall(Color3.fromHex, HexInput.Input.Text)
					if Success and typeof(Result) == "Color3" then
						Hue, Sat, Vib = Color3.toHSV(Result)
					end
				end
				Display()
			end)

			Creator.AddSignal(RedInput.Input.FocusLost, function(Enter)
				if Enter then
					local CurrentColor = GetRGB()
					local Success, Result = pcall(Color3.fromRGB, RedInput.Input.Text, CurrentColor["G"], CurrentColor["B"])
					if Success and typeof(Result) == "Color3" then
						if tonumber(RedInput.Input.Text) <= 255 then
							Hue, Sat, Vib = Color3.toHSV(Result)
						end
					end
				end
				Display()
			end)

			Creator.AddSignal(GreenInput.Input.FocusLost, function(Enter)
				if Enter then
					local CurrentColor = GetRGB()
					local Success, Result =
						pcall(Color3.fromRGB, CurrentColor["R"], GreenInput.Input.Text, CurrentColor["B"])
					if Success and typeof(Result) == "Color3" then
						if tonumber(GreenInput.Input.Text) <= 255 then
							Hue, Sat, Vib = Color3.toHSV(Result)
						end
					end
				end
				Display()
			end)

			Creator.AddSignal(BlueInput.Input.FocusLost, function(Enter)
				if Enter then
					local CurrentColor = GetRGB()
					local Success, Result =
						pcall(Color3.fromRGB, CurrentColor["R"], CurrentColor["G"], BlueInput.Input.Text)
					if Success and typeof(Result) == "Color3" then
						if tonumber(BlueInput.Input.Text) <= 255 then
							Hue, Sat, Vib = Color3.toHSV(Result)
						end
					end
				end
				Display()
			end)

			if Config.Transparency then
				Creator.AddSignal(AlphaInput.Input.FocusLost, function(Enter)
					if Enter then
						pcall(function()
							local Value = tonumber(AlphaInput.Input.Text)
							Transparency = Value >= 0 and Value <= 100 and 1 - Value * 0.01 or Transparency
						end)
					end
					Display()
				end)
			end

			local function UpdateSatVib()
				local MinX = SatVibMap.AbsolutePosition.X
				local MaxX = MinX + SatVibMap.AbsoluteSize.X
				local MouseX = math.clamp(Mouse.X, MinX, MaxX)

				local MinY = SatVibMap.AbsolutePosition.Y
				local MaxY = MinY + SatVibMap.AbsoluteSize.Y
				local MouseY = math.clamp(Mouse.Y, MinY, MaxY)

				Sat = (MouseX - MinX) / (MaxX - MinX)
				Vib = 1 - ((MouseY - MinY) / (MaxY - MinY))
				Display()
			end

			local function UpdateHue()
				local MinY = HueSlider.AbsolutePosition.Y
				local MaxY = MinY + HueSlider.AbsoluteSize.Y
				local MouseY = math.clamp(Mouse.Y, MinY, MaxY)

				Hue = ((MouseY - MinY) / (MaxY - MinY))
				Display()
			end

			local function UpdateTransparency()
				local MinY = TransparencySlider.AbsolutePosition.Y
				local MaxY = MinY + TransparencySlider.AbsoluteSize.Y
				local MouseY = math.clamp(Mouse.Y, MinY, MaxY)

				Transparency = 1 - ((MouseY - MinY) / (MaxY - MinY))
				Display()
			end

			local MouseMoveConnection
			Creator.AddSignal(SatVibMap.InputBegan, function(Input)
				if Input.UserInputType == Enum.UserInputType.MouseButton1 
					or Input.UserInputType == Enum.UserInputType.Touch then

					MouseMoveConnection = Mouse.Move:Connect(UpdateSatVib)
					UpdateSatVib()
				end
			end)

			Creator.AddSignal(SatVibMap.InputEnded, function(Input)
				if Input.UserInputType == Enum.UserInputType.MouseButton1
					or Input.UserInputType == Enum.UserInputType.Touch then

					if MouseMoveConnection then
						MouseMoveConnection:Disconnect()
						MouseMoveConnection = nil
					end
				end
			end)

			Creator.AddSignal(HueSlider.InputBegan, function(Input)
				if Input.UserInputType == Enum.UserInputType.MouseButton1
					or Input.UserInputType == Enum.UserInputType.Touch then

					MouseMoveConnection = Mouse.Move:Connect(UpdateHue)
					UpdateHue()
				end
			end)

			Creator.AddSignal(HueSlider.InputEnded, function(Input)
				if Input.UserInputType == Enum.UserInputType.MouseButton1
					or Input.UserInputType == Enum.UserInputType.Touch then

					if MouseMoveConnection then
						MouseMoveConnection:Disconnect()
						MouseMoveConnection = nil
					end
				end
			end)

			if Config.Transparency then
				Creator.AddSignal(TransparencySlider.InputBegan, function(Input)
					if Input.UserInputType == Enum.UserInputType.MouseButton1
						or Input.UserInputType == Enum.UserInputType.Touch then

						MouseMoveConnection = Mouse.Move:Connect(UpdateTransparency)
						UpdateTransparency()
					end
				end)

				Creator.AddSignal(TransparencySlider.InputEnded, function(Input)
					if Input.UserInputType == Enum.UserInputType.MouseButton1
						or Input.UserInputType == Enum.UserInputType.Touch then

						if MouseMoveConnection then
							MouseMoveConnection:Disconnect()
							MouseMoveConnection = nil
						end
					end
				end)
			end

			Display()

			Dialog:Button("Done", function()
				Colorpicker:SetValue({ Hue, Sat, Vib }, Transparency)
			end)

			Dialog:Button("Cancel", function()
				Colorpicker:SetValue({ OrigHue, OrigSat, OrigVib }, OrigTransparency)
			end)

			Dialog:Open()
		end

		function Colorpicker:Display()
			rawset(Colorpicker, "Value", Color3.fromHSV(Colorpicker.Hue, Colorpicker.Sat, Colorpicker.Vib))

			DisplayFrameColor.BackgroundColor3 = Colorpicker.Value
			DisplayFrameColor.BackgroundTransparency = Colorpicker.Transparency

			if typeof(Colorpicker.Callback) == "function" then
				Library:SafeCallback(Colorpicker.Callback, Colorpicker.Value)
			end
			if typeof(Colorpicker.Changed) == "function" then
				Library:SafeCallback(Colorpicker.Changed, Colorpicker.Value)
			end
		end

		function Colorpicker:SetValue(HSV, Transparency)
			local Color = Color3.fromHSV(HSV[1], HSV[2], HSV[3])

			rawset(Colorpicker, "Transparency", Transparency or 0)
			Colorpicker:SetHSVFromRGB(Color)
			Colorpicker:Display()
		end

		function Colorpicker:SetValueRGB(Color, Transparency)
			rawset(Colorpicker, "Transparency", Transparency or 0)
			Colorpicker:SetHSVFromRGB(Color)
			Colorpicker:Display()
		end

		function Colorpicker:OnChanged(Func)
			Colorpicker.Changed = Func
			Library:SafeCallback(Func, Colorpicker.Value, Colorpicker.Value)
		end

		function Colorpicker:Destroy()
			ColorpickerFrame:Destroy()
			Library.Options[Idx] = nil
		end

		Creator.AddSignal(ColorpickerFrame.Frame.MouseButton1Click, function()
			CreateColorDialog()
		end)

		Colorpicker:Display()

		Library.Options[Idx] = Colorpicker

		Colorpicker.Instance = ColorpickerFrame

		return setmetatable(Colorpicker, {
			__newindex =  function(self, index, newvalue)
				local NewValue_Type = typeof(newvalue)
				if index == "Value" then
					if NewValue_Type == "table" then
						task.spawn(Colorpicker.SetValue, Colorpicker, newvalue, Colorpicker.Transparency)
					else
						task.spawn(Colorpicker.SetValueRGB, Colorpicker, newvalue, Colorpicker.Transparency)
					end
				elseif index == "Transparency" and NewValue_Type == "number" then
					task.spawn(Colorpicker.SetValueRGB, Colorpicker, Colorpicker.Value, newvalue)
				else
					rawset(self, index, newvalue)
				end
			end
		})
	end
end

ElementsTable.Colorpicker = Colorpicker

local Keybind = {} do
	Keybind.__index = Keybind
	Keybind.__type = "Keybind"

	function Keybind:New(Idx, Config)
		local Library = self.Library

		local Keybind = {
			Value = Config.Default or Config.Value or Enum.KeyCode.Unknown,
			Toggled = false,
			Mode = Config.Mode or "Toggle",
			Type = "Keybind",
			Callback = Config.Callback or function(Value) end,
			ChangedCallback = Config.ChangedCallback or function(New) end,
		}

		local Picking = false

		local KeybindFrame = Components.Element(Config.Title or "Keybind", Config.Description, self.Container, true)

		Keybind.SetTitle = KeybindFrame.SetTitle
		Keybind.SetDesc = KeybindFrame.SetDesc

		local KeybindDisplayLabel = New("TextLabel", {
			FontFace = Font.new("rbxasset://fonts/families/GothamSSm.json", Enum.FontWeight.Regular, Enum.FontStyle.Normal),
			Text = Library.Utilities:Prettify(Keybind.Value),
			TextColor3 = Color3.fromRGB(240, 240, 240),
			TextSize = 13,
			TextXAlignment = Enum.TextXAlignment.Center,
			Size = UDim2.new(0, 0, 0, 14),
			Position = UDim2.new(0, 0, 0.5, 0),
			AnchorPoint = Vector2.new(0, 0.5),
			BackgroundColor3 = Color3.fromRGB(255, 255, 255),
			AutomaticSize = Enum.AutomaticSize.X,
			BackgroundTransparency = 1,
			ThemeTag = {
				TextColor3 = "Text",
			},
		})

		local KeybindDisplayFrame = New("TextButton", {
			Size = UDim2.fromOffset(0, 30),
			Position = UDim2.new(1, -10, 0.5, 0),
			AnchorPoint = Vector2.new(1, 0.5),
			BackgroundTransparency = 0.9,
			Parent = KeybindFrame.Frame,
			AutomaticSize = Enum.AutomaticSize.X,
			ThemeTag = {
				BackgroundColor3 = "Keybind",
			},
		}, {
			New("UICorner", {
				CornerRadius = UDim.new(0, 5),
			}),
			New("UIPadding", {
				PaddingLeft = UDim.new(0, 8),
				PaddingRight = UDim.new(0, 8),
			}),
			New("UIStroke", {
				Transparency = 0.5,
				ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
				ThemeTag = {
					Color = "InElementBorder",
				},
			}),
			KeybindDisplayLabel,
		}) :: TextButton

		function Keybind:GetState()
			if UserInputService:GetFocusedTextBox() and Keybind.Mode ~= "Always" then
				return false
			end

			if Keybind.Mode == "Always" then
				return true
			elseif Keybind.Mode == "Hold" then
				if Keybind.Value == "None" then
					return false
				end

				local Key = Keybind.Value

				if Key == "LeftMousebutton" or Key == "RightMousebutton" then
					return Key == "LeftMousebutton" and UserInputService:IsMouseButtonPressed(Enum.UserInputType.MouseButton1)
						or Key == "RightMousebutton"
						and UserInputService:IsMouseButtonPressed(Enum.UserInputType.MouseButton2)
				else
					return UserInputService:IsKeyDown(Enum.KeyCode[Keybind.Value])
				end
			else
				return Keybind.Toggled
			end
		end

		function Keybind:SetValue(Key, Mode)
			Key = Key or Keybind.Value
			Mode = Mode or Keybind.Mode

			rawset(Keybind, "Value", Key)
			Keybind.Mode = Mode

			KeybindDisplayLabel.Text = Library.Utilities:Prettify(Keybind.Value)

			if typeof(Keybind.ChangedCallback) == "function" then
				Library:SafeCallback(Keybind.ChangedCallback, Key)
			end
			if typeof(Keybind.Changed) == "function" then
				Library:SafeCallback(Keybind.Changed, Key)
			end
		end

		function Keybind:OnClick(Callback)
			Keybind.Clicked = Callback
		end

		function Keybind:OnChanged(Callback)
			Keybind.Changed = Callback
			Library:SafeCallback(Callback, Keybind.Value, Keybind.Value)
		end

		function Keybind:DoClick()
			if typeof(Keybind.Callback) == "function" then
				Library:SafeCallback(Keybind.Callback, Keybind.Toggled)
			end
			if typeof(Keybind.Clicked) == "function" then
				Library:SafeCallback(Keybind.Clicked, Keybind.Toggled)
			end
		end

		function Keybind:Destroy()
			KeybindFrame:Destroy()
			Library.Options[Idx] = nil
		end

		Creator.AddSignal(KeybindDisplayFrame.InputBegan, function(Input)
			if
				Input.UserInputType == Enum.UserInputType.MouseButton1
				or Input.UserInputType == Enum.UserInputType.Touch
			then
				Picking = true
				KeybindDisplayLabel.Text = "..."

				wait(0.2)

				UserInputService.InputBegan:Once(function(Input)
					local Key

					if Input.UserInputType == Enum.UserInputType.Keyboard then
						Key = Input.KeyCode.Name
					elseif Input.UserInputType == Enum.UserInputType.MouseButton1 then
						Key = "LeftMousebutton"
					elseif Input.UserInputType == Enum.UserInputType.MouseButton2 then
						Key = "RightMousebutton"
					end

					UserInputService.InputEnded:Once(function(Input)
						if (Input.KeyCode.Name == Key
							or Key == "LeftMousebutton" and Input.UserInputType == Enum.UserInputType.MouseButton1
							or Key == "RightMousebutton" and Input.UserInputType == Enum.UserInputType.MouseButton2)
							and not Library.Unloaded
						then
							Picking = false

							Keybind.Value = Key

							KeybindDisplayLabel.Text = Library.Utilities:Prettify(Keybind.Value)

							Library:SafeCallback(Keybind.ChangedCallback, Input.KeyCode or Input.UserInputType)
							Library:SafeCallback(Keybind.Changed, Input.KeyCode or Input.UserInputType)
						end
					end)
				end)
			end
		end)

		Creator.AddSignal(UserInputService.InputBegan, function(Input)
			if not Picking and not UserInputService:GetFocusedTextBox() then
				if Keybind.Mode == "Toggle" then
					local Key = Keybind.Value

					if Key == "LeftMousebutton" or Key == "RightMousebutton" then
						if
							Key == "LeftMousebutton" and Input.UserInputType == Enum.UserInputType.MouseButton1
							or Key == "RightMousebutton" and Input.UserInputType == Enum.UserInputType.MouseButton2
						then
							Keybind.Toggled = not Keybind.Toggled
							Keybind:DoClick()
						end
					elseif Input.UserInputType == Enum.UserInputType.Keyboard then
						if Input.KeyCode.Name == Key or Input.KeyCode == Key then
							Keybind.Toggled = not Keybind.Toggled
							Keybind:DoClick()
						end
					end
				end
			end
		end)

		Keybind:SetValue(Keybind.Value)

		Library.Options[Idx] = Keybind

		Keybind.Instance = KeybindFrame

		return setmetatable(Keybind, {
			__newindex =  function(self, index, newvalue)
				if index == "Value" then
					task.spawn(Keybind.SetValue, Keybind, newvalue)
				end
				rawset(self, index, newvalue)
			end
		})
	end
end

ElementsTable.Keybind = Keybind

local Slider = {} do
	Slider.__index = Slider
	Slider.__type = "Slider"

	function Slider:New(Idx, Config)
		local Library = self.Library
		assert(Config.Max, "Slider - Missing maximum value.")

		local Slider = {
			Value = nil,
			Min = typeof(Config.Min) == "number" and Config.Min or 0,
			Max = Config.Max,
			Rounding = typeof(Config.Rounding) == "number" and Config.Rounding or 0,
			Callback = typeof(Config.Callback) == "function" and Config.Callback or function(Value, OldValue) end,
			Changed = Config.Changed or function() end,
			Type = "Slider"
		}

		local Dragging = false

		local SliderFrame = Components.Element(Config.Title or "Slider", Config.Description, self.Container, false)
		SliderFrame.DescLabel.Size = UDim2.new(1, -170, 0, 14)

		Slider.SetTitle = SliderFrame.SetTitle
		Slider.SetDesc = SliderFrame.SetDesc

		local SliderDot = New("ImageLabel", {
			AnchorPoint = Vector2.new(0, 0.5),
			Position = UDim2.new(0, -7, 0.5, 0),
			Size = UDim2.fromOffset(14, 14),
			Image = "http://www.roblox.com/asset/?id=12266946128",
			ThemeTag = {
				ImageColor3 = "Accent",
			}
		})

		local SliderRail = New("Frame", {
			BackgroundTransparency = 1,
			Position = UDim2.fromOffset(7, 0),
			Size = UDim2.new(1, -14, 1, 0)
		}, {
			SliderDot,
		})

		local SliderFill = New("Frame", {
			Size = UDim2.new(0, 0, 1, 0),
			ThemeTag = {
				BackgroundColor3 = "Accent",
			}
		}, {
			New("UICorner", {
				CornerRadius = UDim.new(1, 0),
			})
		})

		local SliderDisplay = New("TextBox", {
			FontFace = Font.new("rbxasset://fonts/families/GothamSSm.json"),
			Text = "Value",
			ClearTextOnFocus = true,
			TextSize = 12,
			TextWrapped = true,
			TextXAlignment = Enum.TextXAlignment.Right,
			BackgroundColor3 = Color3.fromRGB(255, 255, 255),
			BackgroundTransparency = 1,
			Size = UDim2.new(0, 100, 0, 14),
			Position = UDim2.new(0, -4, 0.5, 0),
			AnchorPoint = Vector2.new(1, 0.5),
			ThemeTag = {
				TextColor3 = "SubText",
			}
		})

		local SliderInner = New("Frame", {
			Size = UDim2.new(1, 0, 0, 4),
			AnchorPoint = Vector2.new(1, 0.5),
			Position = UDim2.new(1, -10, 0.5, 0),
			BackgroundTransparency = 0.4,
			Parent = SliderFrame.Frame,
			ThemeTag = {
				BackgroundColor3 = "SliderRail",
			}
		}, {
			New("UICorner", {
				CornerRadius = UDim.new(1, 0),
			}),
			New("UISizeConstraint", {
				MaxSize = Vector2.new(150, math.huge),
			}),
			SliderDisplay,
			SliderFill,
			SliderRail
		})

		Creator.AddSignal(SliderDot.InputBegan, function(Input)
			if
				Input.UserInputType == Enum.UserInputType.MouseButton1
				or Input.UserInputType == Enum.UserInputType.Touch
			then
				Dragging = true
			end
		end)

		Creator.AddSignal(SliderDot.InputEnded, function(Input)
			if
				Input.UserInputType == Enum.UserInputType.MouseButton1
				or Input.UserInputType == Enum.UserInputType.Touch
			then
				Dragging = false
			end
		end)

		function Slider:OnChanged(Func)
			Slider.Changed = Func
			Library:SafeCallback(Func, Slider.Value, Slider.Value)
		end

		function Slider:SetValue(Value: number)
			local OldValue = self.Value or Value

			rawset(self, "Value", Library.Utilities:Round(math.clamp(Value, Slider.Min, Slider.Max), Slider.Rounding))

			SliderDot.Position = UDim2.new((self.Value - Slider.Min) / (Slider.Max - Slider.Min), -7, 0.5, 0)
			SliderFill.Size = UDim2.fromScale((self.Value - Slider.Min) / (Slider.Max - Slider.Min), 1)
			SliderDisplay.Text = tostring(self.Value)

			if typeof(Slider.Callback) == "function" then
				Library:SafeCallback(Slider.Callback, self.Value, OldValue)
			end
			if typeof(Slider.Changed) == "function" then
				Library:SafeCallback(Slider.Changed, self.Value, OldValue)
			end
		end

		Creator.AddSignal(UserInputService.InputChanged, function(Input)
			if
				Dragging
				and (
					Input.UserInputType == Enum.UserInputType.MouseMovement
						or Input.UserInputType == Enum.UserInputType.Touch
				)
			then
				local SizeScale =
					math.clamp((Input.Position.X - SliderRail.AbsolutePosition.X) / SliderRail.AbsoluteSize.X, 0, 1)
				Slider:SetValue(Slider.Min + ((Slider.Max - Slider.Min) * SizeScale))
			end
		end)

		Creator.AddSignal(SliderDisplay.FocusLost, function()
			Slider:SetValue(tonumber(SliderDisplay.Text) or Slider.Value)
		end)

		function Slider:Destroy()
			SliderFrame:Destroy()
			Library.Options[Idx] = nil
		end

		Slider:SetValue(typeof(Config.Default) == "number" and Config.Default or Slider.Min)

		Library.Options[Idx] = Slider

		Slider.Instance = SliderFrame

		return setmetatable(Slider, {
			__newindex =  function(self, index, newvalue)
				if index == "Value" then
					task.spawn(Slider.SetValue, Slider, newvalue)
				end
				rawset(self, index, newvalue)
			end
		})
	end
end

ElementsTable.Slider = Slider

local Elements = {}
Elements.__index = Elements
Elements.__namecall = function(Table, Key, ...)
	return Elements[Key](...)
end

for _, ElementComponent in next, ElementsTable do
	Elements[`Create{ElementComponent.__type}`] = function(self, Idx, Config)
		ElementComponent.Container = self.Container
		ElementComponent.Type = self.Type
		ElementComponent.ScrollFrame = self.ScrollFrame
		ElementComponent.Library = Library

		return ElementComponent:New(Idx, Config)
	end

	Elements[`Add{ElementComponent.__type}`] = Elements[`Create{ElementComponent.__type}`]
	Elements[ElementComponent.__type] = Elements[`Create{ElementComponent.__type}`]
end

Library.Elements = Elements

function Library:Window(Config: {
	Title: string?,
	SubTitle: string?,
	TabWidth: number?,
	MinSize: Vector2?,
	Size: UDim2?,
	Resize: boolean?,
	MinimizeKey: Enum.KeyCode?,
	Acrylic: boolean?,
	Theme: string?,
	Mobile: {
		GetIcon: (IsMinimized: boolean) -> { Image: string, ImageRectOffset: Vector2, ImageRectSize: Vector2 },
		Size: UDim2
	}?
	})
	assert(Library.CreatedWindow == nil, "You cannot create more than one window.")

	if not Config.Title then
		local Success, Game_Info = pcall(MarketplaceService.GetProductInfo, MarketplaceService, game.PlaceId)

		Config.Title = Success and Game_Info.Name or "Fluent Renewed"
	end

	Config.MinSize = if typeof(Config.MinSize) == "Vector2" then Config.MinSize else Vector2.new(470, 380)

	Config.Size = if Config.Resize ~= true then Config.Size else UDim2.fromOffset(Library.Utilities:Resize((Config.Size and Config.Size.X.Offset) or 470, (Config.Size and Config.Size.Y.Offset) or 380))
	Config.MinSize = if Config.Resize ~= true then Config.MinSize else Vector2.new(Library.Utilities:Resize((Config.MinSize and Config.MinSize.X) or 470, (Config.MinSize and Config.MinSize.Y) or 380))

	Library.MinimizeKey = if typeof(Config.MinimizeKey) == "string" or typeof(Config.MinimizeKey) == "EnumItem" and Config.MinimizeKey.EnumType == Enum.KeyCode then Config.MinimizeKey else Enum.KeyCode.LeftControl
	Library.UseAcrylic = if typeof(Config.Acrylic) == "boolean" then Config.Acrylic else false
	Library.Acrylic = if typeof(Config.Acrylic) == "boolean" then Config.Acrylic else false
	Library.Theme = if typeof(Config.Theme) == "string" then Config.Theme else "Vynixu"

	if Config.Acrylic then
		Acrylic.init()
	end

	local Window = Components.Window({
		Config = Config,
		Parent = BaseContainer,

		Size = Config.Size,
		MinSize = Config.MinSize,

		Title = Config.Title,
		SubTitle = Config.SubTitle or "Made with Fluent Renewed",

		TabWidth = Config.TabWidth or 160,
		Mobile = Config.Mobile or {
			GetIcon = function(IsMinimized: boolean): { Image: string, ImageRectOffset: Vector2, ImageRectSize: Vector2 }
				return Library.Utilities:GetIcon(IsMinimized and "phosphor-eye" or "phosphor-eye-slash")
			end,
			Size = UDim2.fromOffset(30, 30)
		}
	})

	BaseContainer.Name = `FluentRenewed_{Config.Title}`

	Library.CreatedWindow = Window
	Library:SetTheme(Library.Theme)

	return Window
end

function Library:AddWindow(Config)
	return Library:Window(Config)
end

function Library:CreateWindow(Config)
	return Library:Window(Config)
end

function Library:SetTheme(Name: string)
	if Library.CreatedWindow and table.find(Library.Themes, Name) then
		Library.Theme = Name
		Creator.UpdateTheme()
		Library.ThemeChanged:Fire(Name)
	end
end

function Library:Destroy()
	if Library.CreatedWindow then
		Library.Unloaded = true
		Library.Loaded = false

		Library.OnUnload:Fire(tick())

		if Library.UseAcrylic then
			Library.CreatedWindow.AcrylicPaint.Model:Destroy()
		end

		Creator.Disconnect()

		for i,v in next, Library.Connections do
			local type = typeof(v)

			if type == "RBXScriptConnection" and v.Connected then
				v:Disconnect()
			end
		end

		local info, tweenProps, doTween = TweenInfo.new(2 / 3, Enum.EasingStyle.Quint), {}, false

		local function IsA(obj: Object, class: string)
			local isClass = obj:IsA(class)

			if isClass then
				doTween = true
			end

			return isClass
		end

		for i,v in next, Library.GUI:GetDescendants() do
			table.clear(tweenProps)

			if IsA(v, "GuiObject") then
				tweenProps.BackgroundTransparency = 1
			end

			if IsA(v, "ScrollingFrame") then
				tweenProps.ScrollBarImageTransparency = 1		
			end

			if IsA(v, "TextLabel") or IsA(v, "TextBox") then
				tweenProps.TextStrokeTransparency = 1
				tweenProps.TextTransparency = 1
			end

			if IsA(v, "UIStroke") then
				tweenProps.Transparency = 1
			end

			if IsA(v, "ImageLabel") or IsA(v, "ImageButton") then
				tweenProps.ImageTransparency = 1
			end

			if doTween then
				doTween = false
				TweenService:Create(v, info, tweenProps):Play()
			end
		end

		task.delay(info.Time, function()
			Library.GUI:Destroy()

			Library.PostUnload:Fire(tick())
		end)
	end
end

function Library:ToggleAcrylic(Value: boolean)
	if Library.CreatedWindow then
		if Library.UseAcrylic then
			Library.Acrylic = Value
			Library.CreatedWindow.AcrylicPaint.Model.Transparency = Value and 0.98 or 1
			if Value then
				Acrylic.Enable()
			else
				Acrylic.Disable()
			end
		end
	end
end

function Library:ToggleTransparency(Value: boolean)
	if Library.CreatedWindow then
		Library.CreatedWindow.AcrylicPaint.Frame.Background.BackgroundTransparency = Value and 0.35 or 0
	end
end

function Library:Notify(Config)
	return Notification:New(Config)
end

return Library
